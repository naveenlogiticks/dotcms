#*
   Widget: Google Map Search Locations
   
   Description: This widget allows to display locations, using the Google Map javascript API.
   Also allows to search locations near a direction provided in a search form
   in a radius of X miles.  The results will show all the matches from the
   dotCMS "Location" structure that are in that radius distance.
   
   Author: Oswaldo Gallango (dotCMS)
*#
<!-- Google Map Search Locations - Start -->
##Gets all the existing locations in dotcms
#set($_qk = "+structureName:Location +(conhost:$host.identifier conhost:SYSTEM_HOST)")
#set($cons = $dotcontent.pull(${_qk},30,"Location.country desc"))

<!-- USES GOOGLE MAP API 3 AND REQUIRES A DIFFERENT KEY THAN THE HOST KEY -->
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=${host.googleMap}&sensor=true"></script>
<script type="text/javascript">
  var buildings = new Array();
  var buildingsMarkers = new Array();
  var markers = new Array();
  var map = null;
  var markerOptions = null;  
  
  function validateDirection(){
    var direction = document.getElementById('direction').value;
      if(direction.length < 2){
        alert('A direction, zip code or city/state should be set');
        return false;
      }else{
        return true;
      }      
  }
    
    //This function  shows the locations info below the map 
    function showLocations(from, amount){
      var strHTML="";
        var count=0;
        var location ="";
        for(var i=from; i < (from + amount) && (i < buildings.length); i++){  
          count=count+1;
          console.log(buildings[i].image);
          strHTML+='<li><article>';
            strHTML+='<a href="/locations/' + buildings[i].urlTitle + '">';
              if(buildings[i].image != null){
                  strHTML+='<img src=\'/contentAsset/image/'+buildings[i].inode+'/image/byInode/1/filter/Resize/resize_w/300/filter/Crop/crop_w/300/crop_h/200/\' alt="'+buildings[i].title+'" />';
              }
              strHTML+='<div class="location-body">'
              strHTML+='<h3>'+buildings[i].title+'</h3>';
              strHTML+='<address>';
              strHTML+=  buildings[i].address1+'<br/>';
              if(buildings[i].address2 != null && buildings[i].address2 !=''){
                strHTML+=  buildings[i].address2+'<br/>';
              }
              strHTML+=  buildings[i].city+',';
              if(buildings[i].country == "United States" || buildings[i].country == "Canada"){
                strHTML+=  buildings[i].state+' '+buildings[i].zip;
              }else {
                strHTML+=  buildings[i].country;
              }
              strHTML+='</address>';

              strHTML+='<h4>Services</h4>';
              strHTML+='<ul class="services">';
              strHTML+=buildings[i].segment;
              strHTML+='</ul>';
              strHTML+='</div>';
              strHTML+='<span class="show-map">Show on map</span>';
            strHTML+='</a>';
          strHTML+='</article></li>';
        }
        document.getElementById('locations-results').innerHTML=strHTML;
        var strHTML2="";
        //Pagination        
        strHTML2+='<div style="text-align:center;">';
        var index = from - amount;
        if(index >= 0){
          strHTML2+='<a style="text-decoration:none;" href="javascript:showLocations('+index+','+amount+')">&#60&#60 Previous</a>&nbsp;&nbsp;';
        }
        var index2 = from + amount;
        if(index2 < buildings.length){
          strHTML2+='<a style="text-decoration:none;" href="javascript:showLocations('+index2+','+amount+')">Next &#62&#62</a>';
        }   
        strHTML2+='</div>';  
        document.getElementById('locations-results-pagination').innerHTML=strHTML2;
  }
  
  //This function initialize the google map 
  function initMap(){
    document.getElementById('mapArea').style.display="";
         var myOptions = {
           zoom: ${zoomLevel},
          mapTypeId: google.maps.MapTypeId.ROADMAP,    
          // Add controls
          #if($mapType == true)
              mapTypeControl: true,
              mapTypeControlOptions: {
                mapTypeIds: [
                  google.maps.MapTypeId.ROADMAP, 
                    google.maps.MapTypeId.SATELLITE,
                    google.maps.MapTypeId.HYBRID
                ],
                style: google.maps.MapTypeControlStyle.DROPDOWN_MENU
              },
          #end
          #if($mapOverview == true)
              overviewMapControl: true,
              overviewMapControlOptions: {
                  opened: true
              },
          #end
          #if($mapControl == true)
              zoomControl:true,
              zoomControlOptions:{
                style: google.maps.ZoomControlStyle.LARGE
              },
          #end
          scaleControl: true
      };         
        map = new google.maps.Map(document.getElementById('map_canvas'), myOptions);  
        
        #if($UtilMethods.isSet($markerImage) && $!{markerImage} != "")     
           markerOptions = {
          url: "$markerImageImageURI",
          size: new google.maps.Size($markerWidth, $markerHeight),
          origin: new google.maps.Point(0,0)          
      };
        #end
  }  
  
  //This function creates the locations markers
    function createMarker(latlng,markerTitle, message) {
      if(map.getCenter() ==null){
          map.setCenter(latlng);
        }
        var marker = new google.maps.Marker({
          map : map, 
          position : latlng,
          #if($UtilMethods.isSet($markerImage) && $!{markerImage} != "") 
            icon: markerOptions,
          #end
          title: markerTitle
        });
        //add info window
        google.maps.event.addListener(marker, 'click', function() {
               var infowindow = new google.maps.InfoWindow({
                   //size: new google.maps.Size(260,250)
                   content: message,
                   height: 315,
                   maxWidth: 256
                 });
               //infowindow.setContent(message);
               infowindow.open(map, marker);
        });
        return marker;
    }
    
    //This function activate the info Window from a link outside the map
    function showMarker(index){
      var message = buildingsMarkers[index];
        var location = buildings[index];
        map.setCenter(new google.maps.LatLng(location.lat, location.lon));
        map.setZoom(15);
        var infowindow = new google.maps.InfoWindow({
          //size: new google.maps.Size(260,250)
            content: message,
            height: 315,
            maxWidth: 256
        });
        //infowindow.setContent(message);
        infowindow.open(map, markers[index]);
        document.getElementById('map_canvas').scrollIntoView();      
    }
    
    //Calculate de distances between two lat/lng
  function distance(lat1,lon1,lat2,lon2) {
    var R = 3959; // 3959miles = 6371 km (change this constant to get miles or kilometers)
        var dLat = (lat2-lat1) * Math.PI / 180;
        var dLon = (lon2-lon1) * Math.PI / 180;
        var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
          Math.cos(lat1 * Math.PI / 180 ) * Math.cos(lat2 * Math.PI / 180 ) *
          Math.sin(dLon/2) * Math.sin(dLon/2);
        var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        var d = R * c;
        return Math.round(d);
  }            
  
    //This function initialize the map and marker rendering
  function initialize(){            
      var geocoder = new google.maps.Geocoder();  
      var direction = document.getElementById('direction').value;      
        if(direction != '' && direction != null){            
              geocoder.geocode({'address': direction }, function(point, status){
                var directionLatLong = point[0].geometry.location;
                if (status != google.maps.GeocoderStatus.OK) {
                alert('Geocoding failed. ' + status);
              } else {
                #foreach($con in $cons)
                #if($!{con.country.selectValue} == "United States" || $!{con.country.selectValue} == "Canada")
                  #set($location = "${con.address1} $!{con.address2} $!{con.city}, $!{con.state.selectValue} $!{con.zip}")
                #else
                  #set($location = "${con.address1} $!{con.address2} $!{con.city}, $!{con.country.selectValue}")
                #end            
                               
                var mark${velocityCount} = '${location}';            
                html${velocityCount} = '<div class="map-balloon">';            
                #if ($UtilMethods.isSet($con.image.rawUri))
                  html${velocityCount} += '<span class="image"><img src="/contentAsset/image/$con.inode/image?byInode=1&filter=Resize&resize_w=200" alt="${con.title}" /></span>';
                #end            
                #if ($UtilMethods.isSet($con.description))
                    html${velocityCount} += '<h2><a href="/locations/${con.urlTitle}">$!{con.title}</a></h2>';
                #else
                    html${velocityCount} += '<h2>$!{con.title}</h2>';
                #end            
                html${velocityCount} += mark${velocityCount} + '</div>';
                                  
                geocoder.geocode({'address': mark${velocityCount} }, function(point, status){
                  if (status != google.maps.GeocoderStatus.OK) {
                      alert('Geocoding failed. ' + status);
                    } else {
                    
                      var miledistance = distance(directionLatLong.lat(),directionLatLong.lng(),point[0].geometry.location.lat(),point[0].geometry.location.lng());
                                   var milesRadio = parseInt(document.getElementById('milesR').value);
                                   if(miledistance <= milesRadio){
                          if(map == null){
                            initMap();
                          }
                          var marker = createMarker(point[0].geometry.location,"$!{con.title}" ,html${velocityCount});
                          
                          var segments='';
                              var image=null;
                              #if ($UtilMethods.isSet($con.image.rawUri))
                                image="$con.image.rawUri";
                              #end
                              #foreach($cat in $!{con.segment})
                                segments+="<li>$cat.categoryName</li>";
                              #end
                              var location = {lat: point[0].geometry.location.lat(), lon:point[0].geometry.location.lng(), image:image , segment:segments , inode:"$!{con.inode}", title:"$!{con.title}",urlTitle:"$!{con.urlTitle}", address1:"$!{con.address1}", address2:"$!{con.address2}", zip:"$!{con.zip}", city: "$!{con.city}", state:"$!{con.state.selectValue}", country:"$!{con.country.selectValue}", phone:"$!{con.phone}", fax:"$!{con.fax}", distance:"" };
                              buildings[buildings.length]= location;
                              buildingsMarkers[buildingsMarkers.length]=html${velocityCount};
                              markers[markers.length]=marker;
                              showLocations(0, 8);
                            }
                  }
                });                                                  
            #end    
            }
          });   
        }else {                    
        #foreach($con in $cons)
          #if($!{con.country.selectValue} == "United States" || $!{con.country.selectValue} == "Canada")
            #set($location = "${con.address1} $!{con.address2} $!{con.city}, $!{con.state.selectValue} $!{con.zip}")
          #else
            #set($location = "${con.address1} $!{con.address2} $!{con.city}, $!{con.country.selectValue}")
          #end            
                         
          var mark${velocityCount} = '${location}';            
          html${velocityCount} = '<div class="map-balloon">';            
          #if ($UtilMethods.isSet($con.image.rawUri))
            html${velocityCount} += '<span class="image"><img src="/contentAsset/image/$con.inode/image?byInode=1&filter=Resize&resize_w=200" alt="${con.title}" /></span>';
          #end            
          #if ($UtilMethods.isSet($con.description))
              html${velocityCount} += '<h2><a href="/locations/${con.urlTitle}">$!{con.title}</a></h2>';
          #else
              html${velocityCount} += '<h2>$!{con.title}</h2>';
          #end            
          html${velocityCount} += mark${velocityCount} + '</div>';
                            
          geocoder.geocode({'address': mark${velocityCount} }, function(point, status){
            if (status != google.maps.GeocoderStatus.OK) {
                alert('Geocoding failed. ' + status);
              } else {
                  if(map == null){
                    initMap();
                  }
                  var marker = createMarker(point[0].geometry.location,"$!{con.title}" ,html${velocityCount});
                  
                  var segments='';
                      var image=null;
                      #if ($UtilMethods.isSet($con.image.rawUri))
                        image="$con.image.rawUri";
                      #end
                      #foreach($cat in $!{con.segment})
                        segments+="<li>$cat.categoryName</li>";
                      #end
                      var location = {lat: point[0].geometry.location.lat(), lon:point[0].geometry.location.lng(), image:image , segment:segments , inode:"$!{con.inode}", title:"$!{con.title}",urlTitle:"$!{con.urlTitle}", address1:"$!{con.address1}", address2:"$!{con.address2}", zip:"$!{con.zip}", city: "$!{con.city}", state:"$!{con.state.selectValue}", country:"$!{con.country.selectValue}", phone:"$!{con.phone}", fax:"$!{con.fax}", distance:"" };
                      buildings[buildings.length]= location;
                      buildingsMarkers[buildingsMarkers.length]=html${velocityCount};
                      markers[markers.length]=marker;
                      showLocations(0, 8);
            }
          });                                                  
      #end
    }
  }
  
  jQuery(function() {
     initialize();
   });
</script>
<div class="row">
  <div class="col-sm-12">
    <h2>Zip Code or City, State / Your search Results:</h2>
    <form action="${VTLSERVLET_URI}" id="google-map-search-location-form" name="google-map-search-location-form" class="form-inline location-search">
      <div class="form-group">
        <input type="text" id="direction" name="direction" value="$!{request.getParameter('direction')}" class="form-control" />
      </div>
      <div class="form-group"><label for="">within</label></div>
      <div class="form-group">
        <input type="text" id="milesR" name="milesR" style="width:50px;" value="#if($UtilMethods.isSet($request.getParameter('milesR')))$request.getParameter('milesR')#{else}${getBuildingsInRadio}#{end}" class="form-control" />
      </div>
      <div class="form-group"><label for="">miles</label></div>
      <button type="submit" class="btn btn-primary">Submit</button>
    </form>
  </div>
</div>
<div class="row">
  <div id="mapArea" style="display:none;" class="col-sm-12">
    <div id="map_canvas" class="location-map" style="width:${mapWidth}; height:${mapHeight}; overflow:hidden;">
      <div style="width:100%;height:100%;background:url(/images/icons/loader-big.gif) no-repeat center center;"></div>
    </div>
  </div>
</div>
<ul id="locations-results" class="location-listing">
  <li class="col-sm-12">
    <div class="alert alert-danger">Please enter a valid zip or city,state.</div>
  </li>
</ul>
<div id="locations-results-pagination">
</div>
<!-- Google Map Search Locations - End -->