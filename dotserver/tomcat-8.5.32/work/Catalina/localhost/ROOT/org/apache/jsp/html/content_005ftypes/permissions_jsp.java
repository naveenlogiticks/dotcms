/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2019-12-01 16:25:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.html.content_005ftypes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.http.HttpServletRequest;
import com.liferay.portal.util.WebKeys;
import com.dotmarketing.business.APILocator;
import com.liferay.portal.model.User;
import com.dotcms.contenttype.business.ContentTypeAPI;
import com.dotcms.contenttype.model.type.ContentType;
import com.dotmarketing.util.Config;
import com.liferay.portal.util.ReleaseInfo;
import com.dotmarketing.util.UtilMethods;
import com.dotmarketing.business.Layout;
import com.liferay.portal.NoSuchUserException;
import com.liferay.portal.auth.PrincipalException;
import com.liferay.portal.ejb.AddressManagerUtil;
import com.liferay.portal.ejb.CompanyLocalManagerUtil;
import com.liferay.portal.ejb.PortletManagerUtil;
import com.liferay.portal.ejb.PortletPreferencesManagerUtil;
import com.liferay.portal.ejb.UserLocalManagerUtil;
import com.liferay.portal.model.*;
import com.liferay.portal.util.Constants;
import com.liferay.portal.util.CookieKeys;
import com.liferay.portal.util.ImageKey;
import com.liferay.portal.util.OmniadminUtil;
import com.liferay.portal.util.PortalUtil;
import com.liferay.portal.util.PortletKeys;
import com.liferay.portal.util.Recipient;
import com.liferay.portal.util.RecipientComparator;
import com.liferay.portal.util.ReleaseInfo;
import com.liferay.portal.util.Resolution;
import com.liferay.portal.util.ShutdownUtil;
import com.liferay.portal.util.WebAppPool;
import com.liferay.portlet.ConcretePortletWrapper;
import com.liferay.portlet.LiferayWindowState;
import com.liferay.portlet.PortletURLImpl;
import com.liferay.portlet.RenderParametersPool;
import com.liferay.portlet.RenderRequestImpl;
import com.liferay.portlet.RenderResponseImpl;
import com.liferay.portlet.admin.ejb.AdminConfigManagerUtil;
import com.liferay.portlet.admin.model.EmailConfig;
import com.liferay.portlet.admin.model.JournalConfig;
import com.liferay.portlet.admin.model.ShoppingConfig;
import com.liferay.portlet.admin.model.UserConfig;
import com.liferay.util.BrowserSniffer;
import com.liferay.util.CollectionFactory;
import com.liferay.util.CookieUtil;
import com.liferay.util.CreditCard;
import com.liferay.util.FileUtil;
import com.liferay.util.Html;
import com.liferay.util.Http;
import com.liferay.util.JS;
import com.liferay.util.KeyValuePair;
import com.liferay.util.KeyValuePairComparator;
import com.liferay.util.MathUtil;
import com.liferay.util.ObjectValuePair;
import com.liferay.util.OrderedProperties;
import com.liferay.util.ParamUtil;
import com.liferay.util.PhoneNumber;
import com.liferay.util.PropertiesUtil;
import com.liferay.util.ServerDetector;
import com.liferay.util.SimpleCachePool;
import com.liferay.util.SortedProperties;
import com.liferay.util.State;
import com.liferay.util.StateUtil;
import com.liferay.util.StringComparator;
import com.liferay.util.StringPool;
import com.liferay.util.TextFormatter;
import com.liferay.util.Time;
import com.liferay.util.UnicodeFormatter;
import com.liferay.util.Validator;
import com.liferay.util.Xss;
import com.liferay.util.cal.CalendarUtil;
import com.liferay.util.cal.Recurrence;
import com.liferay.util.lang.BooleanWrapper;
import com.liferay.util.lang.IntegerWrapper;
import com.liferay.util.log4j.Levels;
import com.liferay.util.servlet.DynamicServletRequest;
import com.liferay.util.servlet.SessionParameters;
import com.liferay.util.servlet.StringServletResponse;
import com.liferay.util.servlet.UploadException;
import java.io.ByteArrayInputStream;
import java.io.StringReader;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Currency;
import java.util.Date;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import com.dotcms.repackage.javax.portlet.PortletConfig;
import com.dotcms.repackage.javax.portlet.PortletContext;
import com.dotcms.repackage.javax.portlet.PortletException;
import com.dotcms.repackage.javax.portlet.PortletMode;
import com.dotcms.repackage.javax.portlet.PortletPreferences;
import com.dotcms.repackage.javax.portlet.PortletURL;
import com.dotcms.repackage.javax.portlet.UnavailableException;
import com.dotcms.repackage.javax.portlet.ValidatorException;
import com.dotcms.repackage.javax.portlet.WindowState;
import com.dotmarketing.portlets.common.bean.CrumbTrailEntry;
import java.util.HashMap;
import com.liferay.portal.language.LanguageUtil;
import com.liferay.portal.language.LanguageWrapper;
import com.liferay.portal.language.UnicodeLanguageUtil;
import com.liferay.portal.util.PropsUtil;
import com.liferay.portal.util.WebKeys;
import com.liferay.util.GetterUtil;
import com.liferay.util.StringUtil;
import com.liferay.util.servlet.SessionErrors;
import com.liferay.util.servlet.SessionMessages;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.dotcms.publisher.environment.bean.Environment;
import com.dotcms.publisher.bundle.bean.Bundle;
import com.liferay.portal.util.WebKeys;
import com.dotmarketing.util.Config;
import com.dotmarketing.util.UtilMethods;
import com.dotcms.repackage.org.apache.struts.action.ActionErrors;
import java.util.HashSet;
import java.util.Set;
import com.dotcms.repackage.org.apache.struts.action.ActionErrors;
import com.liferay.portal.language.LanguageUtil;
import java.util.List;
import java.util.ArrayList;
import com.dotcms.repackage.org.apache.struts.action.ActionMessage;
import java.util.Iterator;
import com.liferay.util.servlet.SessionMessages;
import com.dotcms.repackage.org.apache.struts.action.ActionMessages;
import com.dotcms.repackage.org.apache.struts.Globals;
import com.dotmarketing.util.UtilMethods;
import com.liferay.util.servlet.SessionDialogMessage;
import java.util.Map.Entry;
import com.dotcms.contenttype.transform.contenttype.StructureTransformer;
import com.dotcms.contenttype.model.type.ContentType;
import com.dotmarketing.util.Config;
import com.dotmarketing.business.PermissionAPI;
import com.dotmarketing.beans.Host;
import com.dotmarketing.portlets.folders.model.Folder;
import com.dotmarketing.portlets.containers.model.Container;
import com.dotmarketing.portlets.templates.model.Template;
import com.dotmarketing.portlets.links.model.Link;
import com.dotmarketing.portlets.contentlet.model.Contentlet;
import com.dotmarketing.business.Permissionable;
import com.dotmarketing.business.APILocator;
import com.liferay.portal.language.LanguageUtil;
import com.dotmarketing.util.UtilMethods;
import com.dotmarketing.business.CacheLocator;
import com.dotmarketing.portlets.structure.model.Structure;
import com.dotmarketing.portlets.categories.model.Category;
import com.dotmarketing.portlets.htmlpageasset.model.IHTMLPage;
import com.dotmarketing.portlets.rules.model.Rule;
import com.dotmarketing.portlets.templates.design.bean.TemplateLayout;
import com.dotmarketing.portlets.categories.model.Category;

public final class permissions_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(8);
    _jspx_dependants.put("/html/portlet/ext/common/edit_permissions_tab_js_inc.jsp", Long.valueOf(1570476693000L));
    _jspx_dependants.put("/html/common/messages_inc.jsp", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/html/common/top_inc.jsp", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/WEB-INF/tld/struts-html.tld", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/html/common/init.jsp", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/html/portlet/ext/common/edit_permissions_tab_inc.jsp", Long.valueOf(1570476693000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-portlet.tld", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-util.tld", Long.valueOf(1570476689000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.liferay.portal.model");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.liferay.portal.util.ImageKey");
    _jspx_imports_classes.add("com.liferay.util.cal.Recurrence");
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("com.liferay.util.KeyValuePair");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.liferay.portal.ejb.AddressManagerUtil");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.ValidatorException");
    _jspx_imports_classes.add("com.dotmarketing.util.Config");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.EmailConfig");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletURL");
    _jspx_imports_classes.add("com.liferay.portal.ejb.CompanyLocalManagerUtil");
    _jspx_imports_classes.add("com.dotmarketing.portlets.structure.model.Structure");
    _jspx_imports_classes.add("com.dotmarketing.portlets.common.bean.CrumbTrailEntry");
    _jspx_imports_classes.add("com.dotmarketing.business.CacheLocator");
    _jspx_imports_classes.add("com.dotmarketing.business.Layout");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.UnavailableException");
    _jspx_imports_classes.add("com.liferay.portal.ejb.PortletManagerUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.Resolution");
    _jspx_imports_classes.add("com.liferay.portal.util.PropsUtil");
    _jspx_imports_classes.add("com.liferay.util.State");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("com.liferay.portal.model.User");
    _jspx_imports_classes.add("com.dotmarketing.portlets.htmlpageasset.model.IHTMLPage");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletConfig");
    _jspx_imports_classes.add("com.liferay.util.Validator");
    _jspx_imports_classes.add("java.util.GregorianCalendar");
    _jspx_imports_classes.add("com.liferay.util.PhoneNumber");
    _jspx_imports_classes.add("com.liferay.util.BrowserSniffer");
    _jspx_imports_classes.add("com.liferay.util.JS");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("com.liferay.util.servlet.UploadException");
    _jspx_imports_classes.add("com.liferay.portal.language.UnicodeLanguageUtil");
    _jspx_imports_classes.add("com.liferay.util.Xss");
    _jspx_imports_classes.add("com.dotmarketing.portlets.categories.model.Category");
    _jspx_imports_classes.add("com.liferay.util.cal.CalendarUtil");
    _jspx_imports_classes.add("com.liferay.portlet.PortletURLImpl");
    _jspx_imports_classes.add("com.liferay.util.SortedProperties");
    _jspx_imports_classes.add("com.liferay.util.GetterUtil");
    _jspx_imports_classes.add("org.apache.commons.logging.LogFactory");
    _jspx_imports_classes.add("com.liferay.util.ParamUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.PortletKeys");
    _jspx_imports_classes.add("com.liferay.portal.NoSuchUserException");
    _jspx_imports_classes.add("com.liferay.util.log4j.Levels");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.JournalConfig");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletException");
    _jspx_imports_classes.add("com.liferay.portal.auth.PrincipalException");
    _jspx_imports_classes.add("java.util.Currency");
    _jspx_imports_classes.add("java.text.NumberFormat");
    _jspx_imports_classes.add("java.util.TreeSet");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.util.LinkedHashMap");
    _jspx_imports_classes.add("com.liferay.portlet.RenderRequestImpl");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletRequest");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionErrors");
    _jspx_imports_classes.add("com.dotmarketing.business.PermissionAPI");
    _jspx_imports_classes.add("com.dotmarketing.portlets.rules.model.Rule");
    _jspx_imports_classes.add("com.liferay.util.MathUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.OmniadminUtil");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.ShoppingConfig");
    _jspx_imports_classes.add("com.liferay.portlet.RenderParametersPool");
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("com.dotcms.publisher.bundle.bean.Bundle");
    _jspx_imports_classes.add("com.liferay.portal.util.Constants");
    _jspx_imports_classes.add("com.liferay.portal.util.Recipient");
    _jspx_imports_classes.add("com.dotmarketing.portlets.links.model.Link");
    _jspx_imports_classes.add("com.liferay.util.OrderedProperties");
    _jspx_imports_classes.add("com.liferay.portal.ejb.UserLocalManagerUtil");
    _jspx_imports_classes.add("java.io.StringReader");
    _jspx_imports_classes.add("java.util.TreeMap");
    _jspx_imports_classes.add("com.dotmarketing.portlets.templates.model.Template");
    _jspx_imports_classes.add("com.liferay.util.servlet.DynamicServletRequest");
    _jspx_imports_classes.add("com.dotmarketing.util.UtilMethods");
    _jspx_imports_classes.add("com.liferay.util.Http");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.UserConfig");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.util.Random");
    _jspx_imports_classes.add("com.liferay.portal.util.WebKeys");
    _jspx_imports_classes.add("com.dotcms.repackage.org.apache.struts.action.ActionMessages");
    _jspx_imports_classes.add("com.liferay.util.CollectionFactory");
    _jspx_imports_classes.add("com.dotcms.contenttype.transform.contenttype.StructureTransformer");
    _jspx_imports_classes.add("com.liferay.portal.util.ShutdownUtil");
    _jspx_imports_classes.add("com.dotcms.repackage.org.apache.struts.action.ActionErrors");
    _jspx_imports_classes.add("com.liferay.portal.ejb.PortletPreferencesManagerUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.PortalUtil");
    _jspx_imports_classes.add("com.dotmarketing.portlets.containers.model.Container");
    _jspx_imports_classes.add("com.liferay.util.StringPool");
    _jspx_imports_classes.add("java.io.ByteArrayInputStream");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionDialogMessage");
    _jspx_imports_classes.add("com.dotmarketing.portlets.contentlet.model.Contentlet");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionParameters");
    _jspx_imports_classes.add("com.liferay.portlet.RenderResponseImpl");
    _jspx_imports_classes.add("java.text.DateFormat");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletPreferences");
    _jspx_imports_classes.add("com.liferay.util.StringComparator");
    _jspx_imports_classes.add("com.liferay.portlet.ConcretePortletWrapper");
    _jspx_imports_classes.add("java.util.TimeZone");
    _jspx_imports_classes.add("java.util.Collection");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.WindowState");
    _jspx_imports_classes.add("com.dotmarketing.beans.Host");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionMessages");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.liferay.util.SimpleCachePool");
    _jspx_imports_classes.add("com.liferay.portlet.LiferayWindowState");
    _jspx_imports_classes.add("java.util.Map.Entry");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletContext");
    _jspx_imports_classes.add("com.liferay.util.CookieUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.ReleaseInfo");
    _jspx_imports_classes.add("com.dotcms.repackage.org.apache.struts.action.ActionMessage");
    _jspx_imports_classes.add("com.dotcms.contenttype.business.ContentTypeAPI");
    _jspx_imports_classes.add("com.liferay.util.Time");
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageUtil");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("com.liferay.util.servlet.StringServletResponse");
    _jspx_imports_classes.add("com.dotmarketing.business.APILocator");
    _jspx_imports_classes.add("com.dotcms.publisher.environment.bean.Environment");
    _jspx_imports_classes.add("java.util.Stack");
    _jspx_imports_classes.add("java.text.MessageFormat");
    _jspx_imports_classes.add("java.util.HashSet");
    _jspx_imports_classes.add("com.liferay.util.StringUtil");
    _jspx_imports_classes.add("com.liferay.util.PropertiesUtil");
    _jspx_imports_classes.add("com.liferay.util.CreditCard");
    _jspx_imports_classes.add("com.dotmarketing.business.Permissionable");
    _jspx_imports_classes.add("com.liferay.util.UnicodeFormatter");
    _jspx_imports_classes.add("com.liferay.util.lang.IntegerWrapper");
    _jspx_imports_classes.add("com.dotcms.contenttype.model.type.ContentType");
    _jspx_imports_classes.add("com.liferay.util.ServerDetector");
    _jspx_imports_classes.add("com.liferay.portlet.admin.ejb.AdminConfigManagerUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.RecipientComparator");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.text.DecimalFormat");
    _jspx_imports_classes.add("com.liferay.portal.util.WebAppPool");
    _jspx_imports_classes.add("com.liferay.util.Html");
    _jspx_imports_classes.add("com.liferay.util.FileUtil");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletMode");
    _jspx_imports_classes.add("com.liferay.portal.util.CookieKeys");
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageWrapper");
    _jspx_imports_classes.add("com.dotmarketing.portlets.templates.design.bean.TemplateLayout");
    _jspx_imports_classes.add("com.liferay.util.TextFormatter");
    _jspx_imports_classes.add("com.dotcms.repackage.org.apache.struts.Globals");
    _jspx_imports_classes.add("com.liferay.util.StateUtil");
    _jspx_imports_classes.add("com.liferay.util.lang.BooleanWrapper");
    _jspx_imports_classes.add("com.liferay.util.KeyValuePairComparator");
    _jspx_imports_classes.add("org.apache.commons.logging.Log");
    _jspx_imports_classes.add("java.util.Collections");
    _jspx_imports_classes.add("com.liferay.util.ObjectValuePair");
    _jspx_imports_classes.add("com.dotmarketing.portlets.folders.model.Folder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/html/common/auth_backend_check.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	String CTX_PATH = (String) application
			.getAttribute(WebKeys.CTX_PATH);
	String CAPTCHA_PATH = (String) application
			.getAttribute(WebKeys.CAPTCHA_PATH);
	String IMAGE_PATH = (String) application
			.getAttribute(WebKeys.IMAGE_PATH);

	String contextPath = PropsUtil.get(PropsUtil.PORTAL_CTX);
	if (contextPath.equals("/")) {
		contextPath = "";
	}

	String COMMON_IMG = null;

	Company company = PortalUtil.getCompany(request);

	User user = PortalUtil.getUser(request);

	boolean signedIn = false;

	if (user == null) {
		user = company.getDefaultUser();
	} else {
		signedIn = true;
	}

	Locale locale = (Locale) session
			.getAttribute(com.dotcms.repackage.org.apache.struts.Globals.LOCALE_KEY);
	if (locale == null) {

		// Locale should never be null except when the TCK tests invalidate the session

		locale = user.getLocale();
	}
	if(UtilMethods.isSet(request.getParameter("switchLocale"))){
		Locale[] locales = LanguageUtil.getAvailableLocales();
		for (int i = 0; i < locales.length; i++) { 
			String test = locales[i].getLanguage() + "_" + locales[i].getCountry();
			if(test.equals(request.getParameter("switchLocale"))){
				locale = locales[i];
				session.setAttribute(com.dotcms.repackage.org.apache.struts.Globals.LOCALE_KEY, locale);
				break;
			}
		}
		
	}else{//DOTCMS-5013
		session.setAttribute(com.dotcms.repackage.org.apache.struts.Globals.LOCALE_KEY, locale);
	}

	TimeZone timeZone = user.getTimeZone();
	if (timeZone == null) {
		timeZone = company.getTimeZone();
	}

	Layout layout = (Layout) request.getAttribute(WebKeys.LAYOUT);
	Layout[] layouts = (Layout[]) request.getAttribute(WebKeys.LAYOUTS);

	String layoutId = null;
	if (layout != null) {
		layoutId = layout.getId();
	}

	//String portletGroupId = PortalUtil.getPortletGroupId(layoutId);

	int RES_NARROW = 0;
	int RES_TOTAL = 0;
	int RES_WIDE = 0;


//	Skin skin = user.getSkin();

	String SKIN_CSS_IMG = null;


	String SKIN_COMMON_IMG =null;
	String SKIN_IMG =null;

      out.write('\n');
      out.write('\n');

	try {
		String hostId = (String) session.getAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID);

		com.dotmarketing.business.web.HostWebAPI hostApi = com.dotmarketing.business.web.WebAPILocator.getHostWebAPI();
		com.dotmarketing.beans.Host currentHost = hostApi.find(hostId, user, false);
		if (currentHost.isArchived()) {
			List<com.dotmarketing.beans.Host> hosts = hostApi.findAll(user, false);
			for (com.dotmarketing.beans.Host host : hosts) {
				if (!host.isSystemHost() && !host.isArchived()) {
					session.setAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID, host
							.getIdentifier());
					break;
				}
			}
		}
	} catch (Exception e) {

	}

      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");


	String dojoPath = Config.getStringProperty("path.to.dojo");
	if(!UtilMethods.isSet(dojoPath)){
		// Change dojopath in dotmarketing-config.properties!
		response.sendError(500, "No dojo path variable (path.to.dojo) set in the property file");
	}
	String agent = request.getHeader("User-Agent");
	response.setHeader("Cache-Control","no-store");
	response.setHeader("Pragma","no-cache");
	response.setHeader("Expires","01 Jan 2000 00:00:00 GMT");


      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n");
      out.write("\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:bi=\"urn:bi\" xmlns:csp=\"urn:csp\">\n");
      out.write("<head>\n");
      out.write("\t<script src=\"/html/js/dragula-3.7.2/dragula.min.js\"></script>\n");
      out.write("\t<meta http-equiv=\"x-ua-compatible\" content=\"IE=edge\" >\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n");
      out.write("\n");
      out.write("\t<meta content=\"no-cache\" http-equiv=\"Cache-Control\" />\n");
      out.write("\t<meta content=\"no-cache\" http-equiv=\"Pragma\" />\n");
      out.write("\t<meta content=\"0\" http-equiv=\"Expires\" />\n");
      out.write("\t<meta name=\"Expire\" content=\"Now\" />\n");
      out.write("\n");
      out.write("\t<link rel=\"shortcut icon\" href=\"//dotcms.com/favicon.ico\" type=\"image/x-icon\">\n");
      out.write("\t<title>dotCMS : ");
      out.print( LanguageUtil.get(pageContext, "Enterprise-Web-Content-Management") );
      out.write("</title>\n");
      out.write("    \n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(dojoPath);
      out.write("/dijit/themes/dijit.css\">\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"/html/css/dijit-dotcms/dotcms.css?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\">\n");
      out.write("\n");
      out.write("\n");
      out.write("\t<!--[if IE]>\n");
      out.write("\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"/html/css/iehacks.css\" />\n");
      out.write("\t<![endif]-->\n");
      out.write("\n");
      out.write("\t");

	String dojoLocaleConfig = "locale:'en-us'";
	if(locale != null){
		dojoLocaleConfig = "locale:'"+locale.getLanguage() + "-" + locale.getCountry().toLowerCase() + "',";
	}
	
      out.write("\n");
      out.write("\n");
      out.write("   \t<script type=\"text/javascript\">\n");
      out.write("\t   \tdjConfig={\n");
      out.write("\t\t\tparseOnLoad: true,\n");
      out.write("\t\t\ti18n: \"");
      out.print(dojoPath);
      out.write("/custom-build/build/\",\n");
      out.write("\t\t\tuseXDomain: false,\n");
      out.write("\t\t\tisDebug: false,\n");
      out.write("\t\t\t");
      out.print(dojoLocaleConfig);
      out.write("\n");
      out.write("\t\t\tmodulePaths: { dotcms: \"/html/js/dotcms\" }\n");
      out.write("\t   };\n");
      out.write("\n");
      out.write("\t   \tfunction isInodeSet(x){\n");
      out.write("\t\t\treturn (x && x != undefined && x!=\"\" && x.length>15);\n");
      out.write("\t\t}\n");
      out.write("\t\t// Polyfill IE11\n");
      out.write("\t\tif (typeof String.prototype.endsWith !== 'function') {\n");
      out.write("\t\t\tString.prototype.endsWith = function(suffix) {\n");
      out.write("\t\t\t\treturn this.indexOf(suffix, this.length - suffix.length) !== -1;\n");
      out.write("\t\t\t};\n");
      out.write("\t\t}\n");
      out.write("   \t</script>\n");
      out.write("\n");
      out.write("\t<script type=\"text/javascript\" src=\"/html/js/log4js/log4javascript.js\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/html/js/log4js/dotcms-log4js.js\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/html/js/dojo/custom-build/dojo/dojo.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/html/js/dojo/custom-build/build/build.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("  \t<script type=\"text/javascript\" src=\"/html/common/javascript.jsp?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/engine.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/util.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/TemplateAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/HostAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/ContainerAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/RoleAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/BrowserAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/UserAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/InodeAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\t<script type=\"text/javascript\">\n");
      out.write("\t\tdojo.require(\"dojo.data.ItemFileReadStore\");\n");
      out.write("\n");
      out.write("\t\tdojo.require(\"dotcms.dijit.image.ImageEditor\");\n");
      out.write("\t\tdojo.require(\"dotcms.dojo.data.UsersReadStore\");\n");
      out.write("\n");
      out.write("\t\tdojo.addOnLoad(function () {\n");
      out.write("\t\t\tdojo.global.DWRUtil = dwr.util;\n");
      out.write("\t\t\tdojo.global.DWREngine = dwr.engine;\n");
      out.write("\t\t\tdwr.engine.setErrorHandler(DWRErrorHandler);\n");
      out.write("\t\t\tdwr.engine.setWarningHandler(DWRErrorHandler);\n");
      out.write("\t\t});\n");
      out.write("\n");
      out.write("\t\tfunction DWRErrorHandler(msg, e) {\n");
      out.write("\t\t\tconsole.log(msg, e);\n");
      out.write("\t\t}\n");
      out.write("\t\tvar dojoDom=dojo.require(\"dojo.dom\");\n");
      out.write("\t\tvar dojoDomGeometry=dojo.require(\"dojo.dom-geometry\");\n");
      out.write("\t\tvar dojoStyle=dojo.require(\"dojo.dom-style\");\n");
      out.write("\t\tdojo.coords = function(elem,xx) {\n");
      out.write("\t\t\tvar mb=dojoDomGeometry.getMarginBox(elem,dojoStyle.getComputedStyle(elem));\n");
      out.write("\t\t\tvar abs=dojoDomGeometry.position(elem,xx);\n");
      out.write("\t\t\tmb.x=abs.x;\n");
      out.write("\t\t\tmb.y=abs.y;\n");
      out.write("\t\t\tmb.w=abs.w;\n");
      out.write("\t\t\tmb.h=abs.h;\n");
      out.write("\t\t\treturn mb;\n");
      out.write("\t\t};\n");

	if(UtilMethods.isSet(request.getParameter(WebKeys.IN_FRAME)) && UtilMethods.isSet(request.getParameter(WebKeys.FRAME))){
		boolean inFrame = Boolean.valueOf(request.getParameter(WebKeys.IN_FRAME));
		
		if(inFrame){
			  request.getSession().setAttribute(WebKeys.IN_FRAME,inFrame);
	    	  request.getSession().setAttribute(WebKeys.FRAME,request.getParameter(WebKeys.FRAME));
		}else{
			  request.getSession().removeAttribute(WebKeys.IN_FRAME);
	  	      request.getSession().removeAttribute(WebKeys.FRAME);
		}
	}

      out.write("\n");
      out.write("\t</script>\n");
      out.write("\t");
 String dotBackImage = (!UtilMethods.isSet(company.getHomeURL()) || "localhost".equals(company.getHomeURL())) ? "/html/images/backgrounds/bg-3.jpg" : company.getHomeURL();
      out.write("\n");
      out.write("\t<style>\n");
      out.write("\t\t.imageBG{background-color:");
      out.print( company.getSize() );
      out.write(";background-image:url(");
      out.print( dotBackImage );
      out.write(");background-repeat:no-repeat;background-position:top center;background-size:100% auto;height:75px;position:absolute;top:0;left:0;width:100%;z-index:-2;}\n");
      out.write("\t</style>\n");
      out.write("\n");
      out.write("\n");
      out.write("</head>\n");
if(UtilMethods.isSet(request.getParameter("popup")) || UtilMethods.isSet(request.getAttribute("popup")) ){
      out.write("\n");
      out.write("<body class=\"dotcms\" style=\"background:white\">\n");
}else{ 
      out.write("\n");
      out.write("<body class=\"dotcms\" style=\"visibility:hidden;background:white\">\n");
} 
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

if(request.getSession().getAttribute(ActionErrors.GLOBAL_ERROR) != null){
	request.setAttribute(ActionErrors.GLOBAL_ERROR, request.getSession().getAttribute(ActionErrors.GLOBAL_ERROR));

}


Set<String> messages = new HashSet<String>();
Set<String> errors = new HashSet<String>();
SessionDialogMessage dialogMessage = null;

if(request.getAttribute(ActionErrors.GLOBAL_ERROR) !=null){
	ActionErrors aes = (ActionErrors) request.getAttribute(ActionErrors.GLOBAL_ERROR);
	Iterator it = aes.get();
	while(it.hasNext()){
		ActionMessage am = (ActionMessage) it.next();
		String m = LanguageUtil.get(pageContext, am.getKey());
		if(am.getValues() != null){
			for(int i=0;i<am.getValues().length;i++){
				m = UtilMethods.replace(m, "{" + i + "}", (String) am.getValues()[i]);
			}
		}
		errors.add(m);
	}
}

if(request.getAttribute(Globals.ERROR_KEY) != null){
	ActionErrors aes = (ActionErrors) request.getAttribute(Globals.ERROR_KEY);
	Iterator it = aes.get();
	while(it.hasNext()){
		ActionMessage am = (ActionMessage) it.next();
		String m = LanguageUtil.get(pageContext, am.getKey());
		if(am.getValues() != null){
			for(int i=0;i<am.getValues().length;i++){
				m = UtilMethods.replace(m, "{" + i + "}", (String) am.getValues()[i]);
			}
		}
		errors.add(m);
	}
}




if(request.getAttribute(ActionMessages.GLOBAL_MESSAGE) !=null){
	ActionMessages aes = (ActionMessages) request.getAttribute(ActionMessages.GLOBAL_MESSAGE);
	Iterator it = aes.get();
	while(it.hasNext()){
		ActionMessage am = (ActionMessage) it.next();
		messages.add(am.getKey());
	}
}



if(SessionMessages.contains(session, "message")){
	messages.add((String) SessionMessages.get(session, "message"));
}

if(SessionMessages.contains(session, "error")){
	errors.add((String) SessionMessages.get(session, "error"));
}
if(SessionMessages.contains(session, "custommessage")){
	messages.add((String) SessionMessages.get(session, "custommessage"));
}

if (SessionMessages.contains(session, "dialogMessage")){
	dialogMessage = (SessionDialogMessage) SessionMessages.get(session, "dialogMessage");
}

//Support multiple messages
int i = 0;
do {
	if (SessionMessages.contains(request, "message" + i)) {
		messages.add((String) SessionMessages.get(request, "message" + i));
		i++;
	}
} while (SessionMessages.contains(request, "message" + i));

i = 0;
do {
	if(SessionMessages.contains(request, "error" + i)){
		errors.add((String) SessionMessages.get(request, "error" + i));
		i++;
	}
} while (SessionMessages.contains(request, "error" + i));

i = 0;
do {
	if(SessionMessages.contains(request, "custommessage" + i)){
		messages.add((String) SessionMessages.get(request, "custommessage" + i));
		i++;
	}
} while (SessionMessages.contains(request, "custommessage" + i));



SessionMessages.clear(session);
SessionMessages.clear(request);
request.getSession().removeAttribute("com.dotcms.repackage.org.apache.struts.action.MESSAGE");
request.getSession().removeAttribute("com.dotcms.repackage.org.apache.struts.action.ERROR");




      out.write("\n");
      out.write("\n");
      out.write("<script type='text/javascript' src='/html/js/messages.js'></script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("\tdojo.require(\"dojo.fx\");\n");
      out.write("\tdojo.require(\"dijit.layout.ContentPane\");\n");
      out.write("\n");
      out.write("\t\t");
if(errors.size() > 0){
      out.write("\n");
      out.write("\t\t   dojo.addOnLoad(\n");
      out.write("\t\t\t\t   function () {\n");
      out.write("\t\t   \t\t\t\tshowDotCMSErrorMessage(\"<ul>");
for(String x : errors){
      out.write("<li>");
      out.print(UtilMethods.replace(LanguageUtil.get(pageContext, x), "\"", "\\\"") );
      out.write("</li>");
} 
      out.write("</ul>\")\n");
      out.write("\t\t\t\t   }\n");
      out.write("\t\t   \t\t);\n");
      out.write("\t\t");
}
      out.write("\n");
      out.write("\t\t\n");
      out.write("\t\n");
      out.write("\t\t");
if(messages.size() > 0){
      out.write("\n");
      out.write("\t\t   dojo.addOnLoad(\n");
      out.write("\t\t\t\t   function () {\n");
      out.write("\t\t   \t\t\t\tshowDotCMSSystemMessage(\"<div class=\\\"messageIcon resolveIcon\\\"></div>\" + \"");
for(String x : messages){
      out.write(' ');
      out.print(UtilMethods.replace(LanguageUtil.get(pageContext, x), "\"", "\\\"") );
} 
      out.write("\")\n");
      out.write("\t\t\t\t   }\n");
      out.write("\t\t   \t\t);\n");
      out.write("\t\t");
}
      out.write("\n");
      out.write("\n");
      out.write("    \t");
if(dialogMessage != null){
      out.write("\n");
      out.write("\t\t\tdojo.addOnLoad(function() {\n");
      out.write("                var dia = dijit.byId(\"messageDialog\");\n");
      out.write("                if(dia){\n");
      out.write("                    dia.destroyRecursive();\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                dia = new dijit.Dialog({\n");
      out.write("                    id\t\t\t:\t\"messageDialog\",\n");
      out.write("                    title\t\t: \t\"");
      out.print(dialogMessage.getTitle());
      out.write("\",\n");
      out.write("                    style\t\t:\t\"display:none;width:630px;height:auto;vertical-align: middle; \",\n");
      out.write("\t\t\t\t\tdraggable\t:\ttrue\n");
      out.write("                });\n");
      out.write("                var contentPane = new dojox.layout.ContentPane({\n");
      out.write("                    id \t\t\t: \"messageDialogContentPane\"\n");
      out.write("                }).placeAt(\"messageDialog\");\n");
      out.write("\n");
      out.write("                dojo.place(\"<span style='color: red; font-weight: bold'>");
      out.print( dialogMessage.getError() );
      out.write("</span>\", \"messageDialogContentPane\", \"last\");\n");
      out.write("\n");
      out.write("                ");

                String messageHTML = "";
                for (Entry<String, List<String>> entry : dialogMessage.getMessages().entrySet()) {
					messageHTML += "<table class='listingTable' style='margin-bottom: 0px'><thead><tr><th>"+ entry.getKey() +"</th></tr></thead><tbody>";
					for (String item : entry.getValue()) {
						messageHTML += "<tr><td>" + item + "</td></tr>";
					}
					messageHTML += "</tbody></table>";
                }
      out.write("\n");
      out.write("\n");
      out.write("                dojo.place(\"<div style='overflow: auto;height:auto; margin-top: 10px; margin-bottom: 20px'>");
      out.print( messageHTML );
      out.write("</div>\", \"messageDialogContentPane\", \"last\");\n");
      out.write("\t\t\t\t\n");
      out.write("                dojo.place(\"<span style='margin-bottom: 10px; color: #888888;font-size: smaller'>");
      out.print( dialogMessage.getFooter() );
      out.write("</span>\", \"messageDialogContentPane\", \"last\");\n");
      out.write("\n");
      out.write("\t\t\t\tdia.show();\n");
      out.write("    \t\t}) ;\n");
      out.write("    \t");
}
      out.write("\n");
      out.write("</script>");
      out.write('\n');
      out.write('\n');

    final HttpServletRequest httpServletRequest = ((HttpServletRequest) request);
    final String contentTypeId = httpServletRequest.getParameter("contentTypeId");
    Structure structure = APILocator.getStructureAPI().find(contentTypeId, user);

    request.setAttribute(com.dotmarketing.util.WebKeys.PERMISSIONABLE_EDIT, structure);

      out.write('\n');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\" src=\"/dwr/interface/PermissionAjax.js\"></script>\n");
      out.write("<script type=\"text/javascript\" src=\"/html/js/dotcms/dijit/form/RolesFilteringSelect.js\"></script>\n");
      out.write("<script type=\"text/javascript\"><!--\n");
      out.write("\n");
      out.write("\tdojo.require('dijit.layout.AccordionContainer');\n");
      out.write("\tdojo.require('dijit.layout.ContentPane');\n");
      out.write("\tdojo.require('dotcms.dijit.form.RolesFilteringSelect');\n");
      out.write("\tdojo.require('dotcms.dojo.data.UsersReadStore');\n");
      out.write("\n");
      out.write("\t//Global variables\n");
      out.write("\t");

		PermissionAPI permAPI = APILocator.getPermissionAPI();
		Permissionable asset = ((Permissionable)request.getAttribute(com.dotmarketing.util.WebKeys.PERMISSIONABLE_EDIT));
		Structure hostStrucuture = CacheLocator.getContentTypeCache().getStructureByVelocityVarName("Host");
		Contentlet contentletAux = ((Contentlet)request.getAttribute(com.dotmarketing.util.WebKeys.CONTENTLET_EDIT));
	
      out.write("\n");
      out.write("\tvar languageId = '");
      out.print( ((UtilMethods.isSet(contentletAux) && UtilMethods.isSet(contentletAux.getLanguageId())) ? contentletAux.getLanguageId() : "") );
      out.write("';\n");
      out.write("\tvar assetId = '");
      out.print( asset.getPermissionId() );
      out.write("';\n");
      out.write("\tvar assetType = '");
      out.print( ((asset instanceof Contentlet) && ((Contentlet)asset).getStructureInode().equals(hostStrucuture.getInode()))?Host.class.getName():asset.getClass().getName() );
      out.write("';\n");
      out.write("\tvar isParentPermissionable = ");
      out.print( (asset.isParentPermissionable()) );
      out.write(";\n");
      out.write("\tvar isFolder = ");
      out.print( (asset instanceof Folder) );
      out.write(";\n");
      out.write("\tvar isHost = ");
      out.print( (asset instanceof Host) || ((asset instanceof Contentlet) && ((Contentlet)asset).getStructureInode().equals(hostStrucuture.getInode())) );
      out.write(";\n");
      out.write("\tvar doesUserHavePermissionsToEdit = ");
      out.print( permAPI.doesUserHavePermission(asset, PermissionAPI.PERMISSION_EDIT_PERMISSIONS, user) );
      out.write(";\n");
      out.write("\tvar isNewAsset = assetId == 0 || assetId == '' || !assetId;\n");
      out.write("\n");
      out.write("    var accordionContainer;\n");
      out.write("\n");
      out.write("    var currentPermissions;\n");
      out.write("\tvar inheritingPermissions = false;\n");
      out.write("\tvar changesMadeToPermissions = false;\n");
      out.write("\n");
      out.write("\t//I18n messages\n");
      out.write("\tvar roleAlreadyInListMesg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "role-already-in-list")) );
      out.write("';\n");
      out.write("\tvar globalPath = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "global-permission-path")) );
      out.write("';\n");
      out.write("\tvar permissionsSavedMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "permissions-saved")) );
      out.write("'\n");
      out.write("\tvar removeIndividualPermissionConfirm = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "remove-individual-permissions-confirm")) );
      out.write("'\n");
      out.write("\tvar newAssetPermissionsMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "new-asset-permissions-message")) );
      out.write("'\n");
      out.write("\tvar noPermissionsMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "no-permissions-message")) );
      out.write("'\n");
      out.write("\tvar roleLockedForPermissions = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "role-locked-to-permissions")) );
      out.write("'\n");
      out.write("\tvar roleNotRequiredPermissions = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "role-pageContext-lacks-permission")) );
      out.write("'\n");
      out.write("\tvar cascadePermissionsConfirm = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "cascade-permissions-confirm-msg")) );
      out.write("'\n");
      out.write("\tvar hostsWillInheritMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Hosts")) );
      out.write("';\n");
      out.write("\tvar foldersWillInheritMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Folders")) );
      out.write("';\n");
      out.write("\tvar containersWillInheritMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Containers")) );
      out.write("';\n");
      out.write("\tvar templatesWillInheritMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Templates")) );
      out.write("';\n");
      out.write("\tvar templateLayoutsWillInheritMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Templates-Layouts")) );
      out.write("';\n");
      out.write("\tvar pagesWillInheritMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Pages")) );
      out.write("';\n");
      out.write("\tvar linksWillInheritMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Links")) );
      out.write("';\n");
      out.write("\tvar contentWillInheritMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Content-Files")) );
      out.write("';\n");
      out.write("\tvar permissionsOnChildrenMsg1 = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Permissions-on-Children1")) );
      out.write("';\n");
      out.write("\tvar permissionsOnChildrenMsg2 = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Permissions-on-Children2")) );
      out.write("';\n");
      out.write("\tvar structureWillInheritMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Structure")) );
      out.write("';\n");
      out.write("\tvar noPermissionsSavedMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "no-permissions-saved")) );
      out.write("';\n");
      out.write("\tvar categoriesWillInheritMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Category")) );
      out.write("';\n");
      out.write("\tvar rulesWillInheritMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Rules")) );
      out.write("';\n");
      out.write("\n");
      out.write("\t//HTML Templates\n");
      out.write("\tvar inheritedSourcesTemplate = '<span class=\"${icon}\"></span> ${path}';\n");
      out.write("\tvar titleTemplateString = dojo._getText('/html/portlet/ext/common/edit_permissions_accordion_title.html');\n");
      out.write("\n");
      out.write("\tif(isFolder){\n");
      out.write("\t\tvar contentTemplateString = dojo._getText('/html/portlet/ext/common/edit_permissions_accordion_folder_entry.html');\n");
      out.write("\t}\n");
      out.write("\telse if(isHost){\n");
      out.write("\t\tvar contentTemplateString = dojo._getText('/html/portlet/ext/common/edit_permissions_accordion_entry.html');\n");
      out.write("\t}\n");
      out.write("\telse{\n");
      out.write("\t\tvar contentTemplateString = dojo._getText('/html/portlet/ext/common/edit_permissions_accordion_empty_entry.html');\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t//Global constants\n");
      out.write("\tvar viewPermission = ");
      out.print( PermissionAPI.PERMISSION_READ );
      out.write(";\n");
      out.write("\tvar editPermission = ");
      out.print( PermissionAPI.PERMISSION_WRITE );
      out.write(";\n");
      out.write("\tvar publishPermission = ");
      out.print( PermissionAPI.PERMISSION_PUBLISH );
      out.write(";\n");
      out.write("\tvar editPermissionsPermission = ");
      out.print( PermissionAPI.PERMISSION_EDIT_PERMISSIONS );
      out.write(";\n");
      out.write("\tvar addChildrenPermission = ");
      out.print( PermissionAPI.PERMISSION_CAN_ADD_CHILDREN );
      out.write(";\n");
      out.write("\n");
      out.write("\tvar hostClassName = '");
      out.print( Host.class.getCanonicalName() );
      out.write("'\n");
      out.write("\tvar folderClassName = '");
      out.print( Folder.class.getCanonicalName() );
      out.write("'\n");
      out.write("\tvar containerClassName = '");
      out.print( Container.class.getCanonicalName() );
      out.write("'\n");
      out.write("\tvar templateClassName = '");
      out.print( Template.class.getCanonicalName() );
      out.write("'\n");
      out.write("\tvar templateLayoutClassName = '");
      out.print( TemplateLayout.class.getCanonicalName() );
      out.write("'\n");
      out.write("\tvar pageClassName = '");
      out.print( IHTMLPage.class.getCanonicalName() );
      out.write("'\n");
      out.write("\tvar linkClassName = '");
      out.print( Link.class.getCanonicalName() );
      out.write("'\n");
      out.write("\tvar contentClassName = '");
      out.print( Contentlet.class.getCanonicalName() );
      out.write("';\n");
      out.write("\tvar structureClassName = '");
      out.print( Structure.class.getCanonicalName() );
      out.write("';\n");
      out.write("\tvar categoryClassName = '");
      out.print( Category.class.getCanonicalName() );
      out.write("';\n");
      out.write("\tvar rulesClassName = '");
      out.print( Rule.class.getCanonicalName() );
      out.write("';\n");
      out.write("\n");
      out.write("\tvar dijits = [];\n");
      out.write("\n");
      out.write("    function preloadingPermissions(){\n");
      out.write("        try {\n");
      out.write("            //dwr.util.useLoadingMessage();\n");
      out.write("            dojo.style(dijit.byId('savingPermissionsDialog').closeButtonNode, 'visibility', 'hidden');\n");
      out.write("            loadPermissions();\n");
      out.write("      }\n");
      out.write("      catch(err){\n");
      out.write("          //console.log(\"error\",err)\n");
      out.write("      }\n");
      out.write("    }\n");
      out.write("    setTimeout(loadPermissions, 0);\n");
      out.write("    setTimeout(loadPermissions, 500);\n");
      out.write("    setTimeout(loadPermissions, 1000);\n");
      out.write("    var permissionsLoaded = false;\n");
      out.write("\t//Initialization\n");
      out.write("\tdojo.addOnLoad(preloadingPermissions);\n");
      out.write("\n");
      out.write("    \n");
      out.write("    \n");
      out.write("    \n");
      out.write("    \n");
      out.write("\tfunction loadPermissions () {\n");
      out.write("\t    if(permissionsLoaded)return;\n");
      out.write("\t\tpermissionsLoaded=true;\n");
      out.write("\t\tif(isNewAsset) {\n");
      out.write("\t\t\tdojo.style('loadingPermissionsAccordion', { display: 'none' });\n");
      out.write("\t\t\tdojo.style('assetPermissionsWrapper', { display: 'none' });\n");
      out.write("\t\t\tdojo.style('assetPermissionsMessageWrapper', { display: '' });\n");
      out.write("\t\t\tdojo.byId('assetPermissionsMessageWrapper').innerHTML = newAssetPermissionsMsg;\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tdojo.style('loadingPermissionsAccordion', { display: '' });\n");
      out.write("\t\tdojo.style('assetPermissionsWrapper', { display: 'none' });\n");
      out.write("\n");
      out.write("\t\tif(dijit.byId('permissionsAccordionContainer')) {\n");
      out.write("\t\t\t//Manually destroying widgets since Accordion destroy recursive does not take care of all\n");
      out.write("\t\t\tvar container = dijit.byId('permissionsAccordionContainer');\n");
      out.write("\t\t\ttry{\n");
      out.write("\t\t\t    container.destroyDescendants(true);\n");
      out.write("\t\t\t}catch(ex){\n");
      out.write("\t\t\t\tconsole.log('loadPermissions: error removing permissions container: ' + ex);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\ttry{\n");
      out.write("\t\t\t\tcontainer.destroyRecursive(true);\n");
      out.write("\t\t\t}catch(ex){\n");
      out.write("\t\t\t\tconsole.log('loadPermissions: error removing permissions container: ' + ex);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\t//http://jira.dotmarketing.net/browse/DOTCMS-6214\n");
      out.write("\t\tdestroyChecks();\n");
      out.write("\n");
      out.write("\t\tPermissionAjax.getAssetPermissions(assetId, languageId, { callback: renderPermissionsCallback, scope: this });\n");
      out.write("\n");
      out.write("\t\tif(isParentPermissionable)\n");
      out.write("\t\t\tdojo.style('cascadeChangesChkWrapper', { display: '' });\n");
      out.write("\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction renderPermissionsCallback(permissions) {\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tif(!doesUserHavePermissionsToEdit) {\n");
      out.write("\t\t\tdojo.style('assetPermissionsMessageWrapper', { display: '' });\n");
      out.write("\t\t\tdojo.byId('assetPermissionsMessageWrapper').innerHTML = noPermissionsMsg;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tcurrentPermissions = permissions;\n");
      out.write("\n");
      out.write("\t\tsetupInheritanceOptions();\n");
      out.write("\n");
      out.write("\t\taccordionContainer = new dijit.layout.AccordionContainer({\n");
      out.write("\t\t\tlayout: function () {\n");
      out.write("\t\t\t\t// Implement _LayoutWidget.layout() virtual method.\n");
      out.write("\t\t\t\t// Set the height of the open pane based on what room remains.\n");
      out.write("\n");
      out.write("\t\t\t\tvar openPane = this.selectedChildWidget;\n");
      out.write("\n");
      out.write("\t\t\t\t// get cumulative height of all the title bars\n");
      out.write("\t\t\t\tvar totalCollapsedHeight = 0;\n");
      out.write("\t\t\t\tdojo.forEach(this.getChildren(), function(child){\n");
      out.write("\t\t\t\t\ttotalCollapsedHeight += child._buttonWidget.getTitleHeight();\n");
      out.write("\t\t\t\t\tif((!isFolder && !isHost) || (inheritingPermissions)) {\n");
      out.write("\t\t\t\t\t\tdojo.style(child.containerNode, { padding: '0' });\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t\tvar mySize = this._contentBox;\n");
      out.write("\t\t\t\tif (isHost && !inheritingPermissions) {\n");
      out.write("\t\t\t\t\tthis._verticalSpace = 280;\n");
      out.write("\t\t\t\t}else if (isFolder && !inheritingPermissions) {\n");
      out.write("\t\t\t\t\tthis._verticalSpace = 200;\n");
      out.write("\t\t\t\t}else {\n");
      out.write("\t\t\t\t\tthis._verticalSpace = 0;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// Memo size to make displayed child\n");
      out.write("\t\t\t\tthis._containerContentBox = {\n");
      out.write("\t\t\t\t\th: this._verticalSpace,\n");
      out.write("\t\t\t\t\tw: mySize.w\n");
      out.write("\t\t\t\t};\n");
      out.write("\n");
      out.write("\t\t\t\tif(openPane){\n");
      out.write("\t\t\t\t\topenPane.resize(this._containerContentBox);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("        },\n");
      out.write("        \"permissionsAccordionContainer\");\n");
      out.write("\n");
      out.write("\t\tdojo.forEach(permissions, function(role) {\n");
      out.write("\t\t\taddTemplatePermissionOptions(role, role.permissions);\n");
      out.write("\t\t\taddPermissionsAccordionPane(role);\n");
      out.write("\t\t})\n");
      out.write("\n");
      out.write("\t    try{\n");
      out.write("\t      accordionContainer.startup();\n");
      out.write("\t\t}catch(ex){}\n");
      out.write("\n");
      out.write("\t\tdojo.forEach(permissions, function(role) {\n");
      out.write("\t\t\ttry{\n");
      out.write("\t\t      initPermissionsAccordionPane(role);\n");
      out.write("\t\t\t}catch(ex){}\n");
      out.write("\t\t})\n");
      out.write("\n");
      out.write("\t\tdojo.style('loadingPermissionsAccordion', { display: 'none' });\n");
      out.write("\t\tdojo.style('assetPermissionsWrapper', { display: '' });\n");
      out.write("\n");
      out.write("\t\tif(!doesUserHavePermissionsToEdit) {\n");
      out.write("\t\t\tdojo.style('permissionsTabFt', { display: 'none' });\n");
      out.write("\t\t\tdojo.style('resetPermissionActions', { display: 'none' });\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif(permissions.length == 0) {\n");
      out.write("\t\t\tdojo.style('inheritingFrom', { display: 'none' })\n");
      out.write("\t\t\tdojo.style('noPermissionsMessage', { display: '' })\n");
      out.write("\t\t\tdojo.style('permissionsAccordionContainer', { display: 'none' })\n");
      out.write("\t\t\tdojo.style('permissionsTabFt', { display: '' });\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif(inheritingPermissions && permissions.length > 0) {\n");
      out.write("\t\t\tdojo.style('permissionsActions', { display: 'none' });\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tadjustAccordionHeigth();\n");
      out.write("\t\tif(!inheritingPermissions && (isHost || isFolder)){\n");
      out.write("\t\t\tdojo.query(\".accordionEntry\").forEach(function(node, index, arr){\n");
      out.write("\t\t\t\tnode.className = \"permissionTable\";\n");
      out.write("\t\t\t });\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction setupInheritanceOptions () {\n");
      out.write("\t\tdojo.byId('inheritingFromSources').innerHTML = '';\n");
      out.write("\t\tif(allInheritedPermissions(currentPermissions)) {\n");
      out.write("\t\t\tvar sources = listOfInheritedSources();\n");
      out.write("\t\t\tdojo.forEach(sources, function (source) {\n");
      out.write("\t\t\t\tsource.icon = 'shimIcon';\n");
      out.write("\t\t\t\tif(source.type == 'host') {\n");
      out.write("\t\t\t\t\tsource.icon = 'publishIcon'\n");
      out.write("\t\t\t\t} else if(source.type == 'structure') {\n");
      out.write("\t\t\t\t\tsource.icon = 'structureIcon'\n");
      out.write("\t\t\t\t} else if(source.type == 'folder') {\n");
      out.write("\t\t\t\t\tsource.icon = 'folderSelectedIcon'\n");
      out.write("\t\t\t\t} else if(source.type == 'category') {\n");
      out.write("\t\t\t\t\tsource.icon = 'fixIcon'\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tif(source.path == 'SYSTEM_HOST') source.path = globalPath;\n");
      out.write("\n");
      out.write("\t\t\t\tvar html = dojo.string.substitute(inheritedSourcesTemplate, source);\n");
      out.write("\t\t\t\tdojo.place(html, 'inheritingFromSources', 'last');\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\tdojo.style('permissionsTabFt', { display: 'none' });\n");
      out.write("\t\t\tdojo.style('inheritingFrom', { display: '' });\n");
      out.write("\t\t\tdojo.style('permissionIndividuallyButtonWrapper', { display: '' });\n");
      out.write("\t\t\tdojo.style('resetPermissionButtonWrapper', { display: 'none' });\n");
      out.write("\t\t\tinheritingPermissions = true;\n");
      out.write("\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tdojo.style('permissionsTabFt', { display: '' });\n");
      out.write("\t\t\tdojo.style('inheritingFrom', { display: 'none' });\n");
      out.write("\t\t\tdojo.style('permissionIndividuallyButtonWrapper', { display: 'none' });\n");
      out.write("\t\t\tdojo.style('resetPermissionButtonWrapper', { display: '' });\n");
      out.write("\t\t\tinheritingPermissions = false;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\tfunction allInheritedPermissions(permissions) {\n");
      out.write("\t\tfor(var i = 0; i < permissions.length; i++) {\n");
      out.write("\t\t\tvar permission = permissions[i];\n");
      out.write("\t\t\tif(!permission.inherited)\n");
      out.write("\t\t\t\treturn false;\n");
      out.write("\t\t}\n");
      out.write("\t\treturn true;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction listOfInheritedSources() {\n");
      out.write("\t\tvar sourcesLoaded = [];\n");
      out.write("\t\tvar sources = [];\n");
      out.write("\t\tfor(var i = 0; i < currentPermissions.length; i++) {\n");
      out.write("\t\t\tvar role = currentPermissions[i];\n");
      out.write("\t\t\tif(role.inherited) {\n");
      out.write("\t\t\t\tif(sourcesLoaded[role.inheritedFromId] == null) {\n");
      out.write("\t\t\t\t\tsources.push({ path: role.inheritedFromPath, type: role.inheritedFromType });\n");
      out.write("\t\t\t\t\tsourcesLoaded[role.inheritedFromId] = role.id;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\treturn sources;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction adjustAccordionHeigth() {\n");
      out.write("\t\tvar container = dijit.byId('permissionsAccordionContainer');\n");
      out.write("\t\tcontainer.resize();\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction addPermissionsAccordionPane(role) {\n");
      out.write("\n");
      out.write("\t\tdijit.registry.remove();\n");
      out.write("\n");
      out.write("\t\tvar title = dojo.string.substitute(titleTemplateString, role);\n");
      out.write("\t\tvar content = dojo.string.substitute(contentTemplateString, role);\n");
      out.write("\n");
      out.write("    \t//console.log(\"title: \" + title);\n");
      out.write("    \t//console.log(\"content: \" + content);\n");
      out.write("\n");
      out.write("\t\tvar contentPane = new dijit.layout.ContentPane({\n");
      out.write("\t        title: title,\n");
      out.write("\t        content: content,\n");
      out.write("\t        rolename: role.name,\n");
      out.write("\t\t\tid: 'permissionsAccordionPane-' + role.id\n");
      out.write("\t    })\n");
      out.write("\n");
      out.write("\t    // http://jira.dotmarketing.net/browse/DOTCMS-5375\n");
      out.write("\t    var childrens=accordionContainer.getChildren();\n");
      out.write("\t    var insertIndex=0;\n");
      out.write("\t    var rolename=role.name.toLowerCase();\n");
      out.write("\t    for(var i=0;i<childrens.length;i++) {\n");
      out.write("\t        var chRoleName=childrens[i].rolename.toLowerCase();\n");
      out.write("\t        if(rolename>chRoleName)\n");
      out.write("\t            insertIndex=i+1;\n");
      out.write("\t        else\n");
      out.write("\t            break;\n");
      out.write("\t    }\n");
      out.write("\t    accordionContainer.addChild(contentPane, insertIndex);\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction initPermissionsAccordionPane(role) {\n");
      out.write("\t\tdijits.push(dojo.parser.parse(dojo.byId('permissionTitleTableWrapper-' + role.id)));\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction applyPermissionChanges () {\n");
      out.write("\n");
      out.write("\t\t// check if there is changes\n");
      out.write("        if(dijit.byId('cascadeChangesCheckbox').attr('value')==false) {\n");
      out.write("            var changes=false;\n");
      out.write("            for(var i = 0; i < currentPermissions.length; i++) {\n");
      out.write("                var role = currentPermissions[i];\n");
      out.write("                changes=changes || thereIsPermissionCheckChanges(role);\n");
      out.write("            }\n");
      out.write("            if(!changes) {\n");
      out.write("                showDotCMSSystemMessage(noPermissionsSavedMsg);\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\t\tchangesMadeToPermissions =false;\n");
      out.write("\t\tvar cascade = false;\n");
      out.write("\t\tif(isParentPermissionable) {\n");
      out.write("\t\t\tcascade = dijit.byId('cascadeChangesCheckbox').attr('value') == 'on';\n");
      out.write("\t\t\tdijit.byId('cascadeChangesCheckbox').attr('value', false);\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif(cascade && !confirm(cascadePermissionsConfirm))\n");
      out.write("\t\t\treturn;\n");
      out.write("\n");
      out.write("\t\tvar permissionsToSubmit = [];\n");
      out.write("\t\tfor(var i = 0; i < currentPermissions.length; i++) {\n");
      out.write("\t\t\tvar role = currentPermissions[i];\n");
      out.write("\t\t\tvar rolePermission = { roleId: role.id }\n");
      out.write("\t\t\trolePermission.individualPermission = retrievePermissionChecks(role.id);\n");
      out.write("\t\t\tif(isFolder || isHost) {\n");
      out.write("\t\t\t\trolePermission.foldersPermission = retrievePermissionChecks(role.id, 'folders');\n");
      out.write("\t\t\t\trolePermission.containersPermission = retrievePermissionChecks(role.id, 'containers');\n");
      out.write("\t\t\t\trolePermission.templatesPermission = retrievePermissionChecks(role.id, 'templates');\n");
      out.write("\t\t\t\trolePermission.templateLayoutsPermission = retrievePermissionChecks(role.id, 'template-layouts');\n");
      out.write("\t\t\t\trolePermission.pagesPermission = retrievePermissionChecks(role.id, 'pages');\n");
      out.write("\t\t\t\trolePermission.linksPermission = retrievePermissionChecks(role.id, 'links');\n");
      out.write("\t\t\t\trolePermission.contentPermission = retrievePermissionChecks(role.id, 'content');\n");
      out.write("\t\t\t\trolePermission.structurePermission = retrievePermissionChecks(role.id, 'structure');\n");
      out.write("\t\t\t\trolePermission.categoriesPermissions = retrievePermissionChecks(role.id, 'categories');\n");
      out.write("\t\t\t\trolePermission.rulesPermissions = retrievePermissionChecks(role.id, 'rules');\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tdojo.forEach(rolePermission, function(value){\n");
      out.write("\t\t\t\tconsole.log(\"rolePermission: \" + value);\n");
      out.write("\t\t\t});\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\tpermissionsToSubmit.push(rolePermission)\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif(window.scrollTo)\n");
      out.write("\t\t\twindow.scrollTo(0,0);\t// To show lightbox effect(IE) and save content errors.\n");
      out.write("\t\tdijit.byId('savingPermissionsDialog').show();\n");
      out.write("\n");
      out.write("\t\tPermissionAjax.saveAssetPermissions(assetId, languageId, permissionsToSubmit, cascade, dojo.hitch(this, savePermissionsCallback, assetId, permissionsToSubmit, cascade));\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction savePermissionsCallback(assetId, permissionsToSubmit, cascade) {\n");
      out.write("\t\tdijit.byId('savingPermissionsDialog').hide();\n");
      out.write("\n");
      out.write("\t\tshowDotCMSSystemMessage(permissionsSavedMsg);\n");
      out.write("\n");
      out.write("\t\tvar rolesRemoved = checkRolePermissionsRemoved(permissionsToSubmit);\n");
      out.write("\t\tif(accordionContainer.getChildren().length == rolesRemoved.length) {\n");
      out.write("\t\t\tloadPermissions();\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tfor(var i = 0; i < rolesRemoved.length; i++) {\n");
      out.write("\t\t\t\tvar roleRemoved = rolesRemoved[i];\n");
      out.write("\t\t\t\tremovePermissionsRoleAccordion(roleRemoved);\n");
      out.write("\t\t\t\tremoveRole(roleRemoved.roleId, currentPermissions);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction removePermissionsRoleAccordion(role) {\n");
      out.write("\n");
      out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits(null, role.roleId))\n");
      out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('folders', role.roleId))\n");
      out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('containers', role.roleId))\n");
      out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('templates', role.roleId))\n");
      out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('template-layouts', role.roleId))\n");
      out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('pages', role.roleId))\n");
      out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('links', role.roleId))\n");
      out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('content', role.roleId))\n");
      out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('structure', role.roleId))\n");
      out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('categories', role.roleId))\n");
      out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('rules', role.roleId))\n");
      out.write("\n");
      out.write("\t\tvar containerPane = dijit.byId('permissionsAccordionPane-' + role.roleId);\n");
      out.write("\t\taccordionContainer.removeChild(containerPane);\n");
      out.write("\t\tcontainerPane.destroy();\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction destroyCheckboxes(checkboxesList) {\n");
      out.write("\t\tif(checkboxesList.addChildrenPermissionCheckbox) checkboxesList.addChildrenPermissionCheckbox.destroy();\n");
      out.write("\t\tif(checkboxesList.editPermissionCheckbox) checkboxesList.editPermissionCheckbox.destroy();\n");
      out.write("\t\tif(checkboxesList.editPermissionsPermissionCheckbox) checkboxesList.editPermissionsPermissionCheckbox.destroy();\n");
      out.write("\t\tif(checkboxesList.publishPermissionCheckbox) checkboxesList.publishPermissionCheckbox.destroy();\n");
      out.write("\t\tif(checkboxesList.viewPermissionCheckbox) checkboxesList.viewPermissionCheckbox.destroy();\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction checkRolePermissionsRemoved(permissionSet) {\n");
      out.write("\n");
      out.write("\t\tvar rolesRemoved = new Array();\n");
      out.write("\t\tfor(var i = 0; i < permissionSet.length; i++) {\n");
      out.write("\n");
      out.write("\t\t\tvar rolePermission = permissionSet[i];\n");
      out.write("\t\t\tif((rolePermission.individualPermission |\n");
      out.write("\t\t\t\t\trolePermission.foldersPermission |\n");
      out.write("\t\t\t\t\trolePermission.containersPermission |\n");
      out.write("\t\t\t\t\trolePermission.templatesPermission |\n");
      out.write("\t\t\t\t\trolePermission.templateLayoutsPermission |\n");
      out.write("\t\t\t\t\trolePermission.pagesPermission |\n");
      out.write("\t\t\t\t\trolePermission.linksPermission |\n");
      out.write("\t\t\t\t\trolePermission.contentPermission |\n");
      out.write("\t\t\t\t\trolePermission.structurePermission |\n");
      out.write("\t\t\t\t\trolePermission.categoriesPermissions |\n");
      out.write("\t\t\t\t\trolePermission.rulesPermissions ) == 0) {\n");
      out.write("\t\t\t\trolesRemoved.push(rolePermission);\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\t\treturn rolesRemoved;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction retrievePermissionChecks(id, type) {\n");
      out.write("\n");
      out.write("\t\tvar permission = 0;\n");
      out.write("\n");
      out.write("\t\tvar prefix = '';\n");
      out.write("\t\tif(type) prefix = type + \"-\";\n");
      out.write("\n");
      out.write("\t\tif(isPermissionChecked(prefix + 'view-permission-' + id))\n");
      out.write("\t\t\tpermission = permission | viewPermission;\n");
      out.write("\t\tif(isPermissionChecked(prefix + 'add-children-permission-' + id))\n");
      out.write("\t\t\tpermission = permission | addChildrenPermission;\n");
      out.write("\t\tif(isPermissionChecked(prefix + 'edit-permission-' + id))\n");
      out.write("\t\t\tpermission = permission | editPermission;\n");
      out.write("\t\tif(isPermissionChecked(prefix + 'publish-permission-' + id))\n");
      out.write("\t\t\tpermission = permission | publishPermission;\n");
      out.write("\t\tif(isPermissionChecked(prefix + 'edit-permissions-permission-' + id))\n");
      out.write("\t\t\tpermission = permission | editPermissionsPermission;\n");
      out.write("\n");
      out.write("\t\treturn permission;\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t/** Determines whether the specified element is checked or not. */\n");
      out.write("\tfunction isPermissionChecked(id){\n");
      out.write("\t\tvar checkbox = dijit.byId(id);\n");
      out.write("\t\tif (checkbox) {\n");
      out.write("\t\t\tvar parent = checkbox.domNode.parentNode;\n");
      out.write("\t\t\treturn parent.style.display !== 'none' && checkbox.attr('value') == 'on';\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\treturn false;\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction thereIsPermissionCheckChanges(item) {\n");
      out.write("        var id=item.id;\n");
      out.write("\n");
      out.write("        // check individual permission changes\n");
      out.write("        if(dijit.byId('view-permission-' + id) &&\n");
      out.write("                ((dijit.byId('view-permission-' + id).attr('value') == 'on' && item.viewPermissionChecked==\"\") ||\n");
      out.write("                 (dijit.byId('view-permission-' + id).attr('value') == false && item.viewPermissionChecked!=\"\")))\n");
      out.write("            return true;\n");
      out.write("        if(dijit.byId('add-children-permission-' + id) &&\n");
      out.write("                ((dijit.byId('add-children-permission-' + id).attr('value') == 'on' && item.addChildrenPermissionChecked==\"\") ||\n");
      out.write("                 (dijit.byId('add-children-permission-' + id).attr('value') == false && item.addChildrenPermissionChecked!=\"\")))\n");
      out.write("            return true;\n");
      out.write("        if(dijit.byId('edit-permission-' + id) &&\n");
      out.write("                ((dijit.byId('edit-permission-' + id).attr('value') == 'on' && item.editPermissionChecked==\"\") ||\n");
      out.write("                 (dijit.byId('edit-permission-' + id).attr('value') == false && item.editPermissionChecked!=\"\")))\n");
      out.write("            return true;\n");
      out.write("        if(dijit.byId('edit-permission-' + id) &&\n");
      out.write("                ((dijit.byId('edit-permission-' + id).attr('value') == 'on' && item.editPermissionChecked==\"\") ||\n");
      out.write("                 (dijit.byId('edit-permission-' + id).attr('value') == false && item.editPermissionChecked!=\"\")))\n");
      out.write("            return true;\n");
      out.write("        if(dijit.byId('publish-permission-' + id) &&\n");
      out.write("                ((dijit.byId('publish-permission-' + id).attr('value') == 'on' && item.publishPermissionChecked==\"\") ||\n");
      out.write("                 (dijit.byId('publish-permission-' + id).attr('value') == false && item.publishPermissionChecked!=\"\")))\n");
      out.write("            return true;\n");
      out.write("        if(dijit.byId('edit-permissions-permission-' + id) &&\n");
      out.write("                ((dijit.byId('edit-permissions-permission-' + id).attr('value') == 'on' && item.editPermissionsPermissionChecked==\"\") ||\n");
      out.write("                 (dijit.byId('edit-permissions-permission-' + id).attr('value') == false && item.editPermissionsPermissionChecked!=\"\")))\n");
      out.write("            return true;\n");
      out.write("\n");
      out.write("        var changedType=function(item,type) {\n");
      out.write("            if(dijit.byId(type+'-view-permission-' + id) &&\n");
      out.write("                    ((dijit.byId(type+'-view-permission-' + id).attr('value') == 'on' && item[type+'ViewPermissionChecked']==\"\") ||\n");
      out.write("                     (dijit.byId(type+'-view-permission-' + id).attr('value') == false && item[type+'ViewPermissionChecked']!=\"\")))\n");
      out.write("                return true;\n");
      out.write("            if(dijit.byId(type+'-add-children-permission-' + id) &&\n");
      out.write("                    ((dijit.byId(type+'-add-children-permission-' + id).attr('value') == 'on' && item[type+'AddChildrenPermissionChecked']==\"\") ||\n");
      out.write("                     (dijit.byId(type+'-add-children-permission-' + id).attr('value') == false && item[type+'AddChildrenPermissionChecked']!=\"\")))\n");
      out.write("                return true;\n");
      out.write("            if(dijit.byId(type+'-edit-permission-' + id) &&\n");
      out.write("                    ((dijit.byId(type+'-edit-permission-' + id).attr('value') == 'on' && item[type+'EditPermissionChecked']==\"\") ||\n");
      out.write("                     (dijit.byId(type+'-edit-permission-' + id).attr('value') == false && item[type+'EditPermissionChecked']!=\"\")))\n");
      out.write("                return true;\n");
      out.write("            if(dijit.byId(type+'-edit-permission-' + id) &&\n");
      out.write("                    ((dijit.byId(type+'-edit-permission-' + id).attr('value') == 'on' && item[type+'EditPermissionChecked']==\"\") ||\n");
      out.write("                     (dijit.byId(type+'-edit-permission-' + id).attr('value') == false && item[type+'EditPermissionChecked']!=\"\")))\n");
      out.write("                return true;\n");
      out.write("            if(dijit.byId(type+'-publish-permission-' + id) &&\n");
      out.write("                    ((dijit.byId(type+'-publish-permission-' + id).attr('value') == 'on' && item[type+'PublishPermissionChecked']==\"\") ||\n");
      out.write("                     (dijit.byId(type+'-publish-permission-' + id).attr('value') == false && item[type+'PublishPermissionChecked']!=\"\")))\n");
      out.write("                return true;\n");
      out.write("            if(dijit.byId(type+'-edit-permissions-permission-' + id) &&\n");
      out.write("                    ((dijit.byId(type+'-edit-permissions-permission-' + id).attr('value') == 'on' && item[type+'EditPermissionsPermissionChecked']==\"\") ||\n");
      out.write("                     (dijit.byId(type+'-edit-permissions-permission-' + id).attr('value') == false && item[type+'EditPermissionsPermissionChecked']!=\"\")))\n");
      out.write("                return true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        types=['hosts','folders','containers','templates','template-layouts','pages','links','structure','content','categories','rules'];\n");
      out.write("\n");
      out.write("        for(var i=0;i<types.length;i++)\n");
      out.write("            if(changedType(item,types[i]))\n");
      out.write("                return true;\n");
      out.write("\n");
      out.write("        return false;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("\tfunction viewPermissionChanged (type, id) {\n");
      out.write("       changesMadeToPermissions=true;\n");
      out.write("\t\tvar checkboxes = getPermissionCheckboxDijits(type, id);\n");
      out.write("\n");
      out.write("\t\tif(checkboxes.viewPermissionCheckbox.attr('value') != 'on') {\n");
      out.write("\t\t\tif(checkboxes.addChildrenPermissionCheckbox) checkboxes.addChildrenPermissionCheckbox.attr('value', false);\n");
      out.write("\t\t\tif(checkboxes.editPermissionCheckbox) checkboxes.editPermissionCheckbox.attr('value', false);\n");
      out.write("\t\t\tif(checkboxes.publishPermissionCheckbox) checkboxes.publishPermissionCheckbox.attr('value', false);\n");
      out.write("\t\t\tif(checkboxes.editPermissionsPermissionCheckbox) checkboxes.editPermissionsPermissionCheckbox.attr('value', false);\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction addChildrenPermissionChanged (type, id) {\n");
      out.write("\t\tchangesMadeToPermissions=true;\n");
      out.write("\t\tvar checkboxes = getPermissionCheckboxDijits(type, id);\n");
      out.write("\n");
      out.write("\t\tif(checkboxes.addChildrenPermissionCheckbox.attr('value') == 'on') {\n");
      out.write("\t\t\tif(checkboxes.viewPermissionCheckbox) checkboxes.viewPermissionCheckbox.attr('value', 'on');\n");
      out.write("\t\t}\n");
      out.write("\t\telse {\n");
      out.write("\t\t\tif(checkboxes.editPermissionCheckbox) checkboxes.editPermissionCheckbox.attr('value', false);\n");
      out.write("\t\t\tif(checkboxes.publishPermissionCheckbox) checkboxes.publishPermissionCheckbox.attr('value', false);\n");
      out.write("\t\t\tif(checkboxes.editPermissionsPermissionCheckbox) checkboxes.editPermissionsPermissionCheckbox.attr('value', false);\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction editPermissionChanged (type, id) {\n");
      out.write("\t\tchangesMadeToPermissions=true;\n");
      out.write("\t\tvar checkboxes = getPermissionCheckboxDijits(type, id);\n");
      out.write("\n");
      out.write("\t\tif(checkboxes.editPermissionCheckbox.attr('value') == 'on') {\n");
      out.write("\t\t\tif(checkboxes.viewPermissionCheckbox) checkboxes.viewPermissionCheckbox.attr('value', 'on');\n");
      out.write("\t\t\tif(checkboxes.addChildrenPermissionCheckbox) checkboxes.addChildrenPermissionCheckbox.attr('value', 'on');\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tif(checkboxes.publishPermissionCheckbox) checkboxes.publishPermissionCheckbox.attr('value', false);\n");
      out.write("\t\t\tif(checkboxes.editPermissionsPermissionCheckbox) checkboxes.editPermissionsPermissionCheckbox.attr('value', false);\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction publishPermissionChanged (type, id) {\n");
      out.write("\t\tchangesMadeToPermissions=true;\n");
      out.write("\t\tvar checkboxes = getPermissionCheckboxDijits(type, id);\n");
      out.write("\n");
      out.write("\t\tif(checkboxes.publishPermissionCheckbox.attr('value') == 'on') {\n");
      out.write("\t\t\tif(checkboxes.viewPermissionCheckbox) checkboxes.viewPermissionCheckbox.attr('value', 'on');\n");
      out.write("\t\t\tif(checkboxes.addChildrenPermissionCheckbox) checkboxes.addChildrenPermissionCheckbox.attr('value', 'on');\n");
      out.write("\t\t\tif(checkboxes.editPermissionCheckbox) checkboxes.editPermissionCheckbox.attr('value', 'on');\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\tif(checkboxes.editPermissionsPermissionCheckbox) checkboxes.editPermissionsPermissionCheckbox.attr('value', false);\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction editPermissionsPermissionChanged (type, id) {\n");
      out.write("\t\tchangesMadeToPermissions=true;\n");
      out.write("\t\tvar checkboxes = getPermissionCheckboxDijits(type, id);\n");
      out.write("\n");
      out.write("\t\tif(checkboxes.editPermissionsPermissionCheckbox.attr('value') == 'on') {\n");
      out.write("\t\t\tif(checkboxes.viewPermissionCheckbox) checkboxes.viewPermissionCheckbox.attr('value', 'on');\n");
      out.write("\t\t\tif(checkboxes.addChildrenPermissionCheckbox) checkboxes.addChildrenPermissionCheckbox.attr('value', 'on');\n");
      out.write("\t\t\tif(checkboxes.editPermissionCheckbox) checkboxes.editPermissionCheckbox.attr('value', 'on');\n");
      out.write("\t\t\tif(checkboxes.publishPermissionCheckbox) checkboxes.publishPermissionCheckbox.attr('value', 'on');\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction addRoleToPermissions(role) {\n");
      out.write("\n");
      out.write("\t\tdojo.style('permissionsAccordionContainer', { display: '' })\n");
      out.write("\n");
      out.write("\t\tif(!role)\n");
      out.write("\t\t\trole = dijit.byId('permissionsRoleSelector').attr('selectedItem');\n");
      out.write("\n");
      out.write("\t\trole.id = norm(role.id);\n");
      out.write("\t\trole.DBFQN = norm(role.DBFQN);\n");
      out.write("\t\trole.FQN = norm(role.FQN);\n");
      out.write("\t\trole.description = norm(role.description);\n");
      out.write("\t\trole.editLayouts = norm(role.editLayouts);\n");
      out.write("\t\trole.editPermissions = norm(role.editPermissions);\n");
      out.write("\t\trole.editUsers = norm(role.editUsers);\n");
      out.write("\t\trole.locked = norm(role.locked);\n");
      out.write("\t\trole.name = norm(role.name);\n");
      out.write("\t\trole.roleKey = norm(role.roleKey);\n");
      out.write("\t\trole.system = norm(role.system);\n");
      out.write("\n");
      out.write("\t\tif(!role.editPermissions) {\n");
      out.write("\t\t\talert(roleNotRequiredPermissions);\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\t\tif(role.locked) {\n");
      out.write("\t\t\talert(roleLockedForPermissions);\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif(findRole(role.id, currentPermissions)) {\n");
      out.write("\t\t\talert(roleAlreadyInListMesg);\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\trole.permissions = [];\n");
      out.write("\t\tcurrentPermissions.push(role);\n");
      out.write("\t\taddTemplatePermissionOptions(role, role.permissions);\n");
      out.write("\t\taddPermissionsAccordionPane(role);\n");
      out.write("\t    initPermissionsAccordionPane(role);\n");
      out.write("\t\tadjustAccordionHeigth();\n");
      out.write("\t\tselectAccordionPane(role.id);\n");
      out.write("\n");
      out.write("\t\tdojo.query(\".accordionEntry\").forEach(function(node, index, arr){\n");
      out.write("\t\t\tnode.className = \"permissionTable\";\n");
      out.write("\t\t });\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction addUserToPermissions() {\n");
      out.write("\t\tif(dijit.byId('permissionsUserSelector').attr('value') == '') {\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\t\tvar userId = dijit.byId('permissionsUserSelector').attr('value').split('-')[1];\n");
      out.write("\t\tRoleAjax.getUserRole(userId, addUserToPermissionCallback);\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction addUserToPermissionCallback(role) {\n");
      out.write("\t\taddRoleToPermissions(role);\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction selectAccordionPane(id) {\n");
      out.write("\t\taccordionContainer.selectChild(dijit.byId('permissionsAccordionPane-' + id));\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction permissionsIndividually () {\n");
      out.write("\t  if(assetType == 'com.dotmarketing.portlets.folders.model.Folder' ||\n");
      out.write("\t\t   assetType == 'com.dotmarketing.beans.Host') {\n");
      out.write("\t\t dijit.byId('savingPermissionsDialog').show();\n");
      out.write("\t\t changesMadeToPermissions=false;\n");
      out.write("\t\t permissionsLoaded = false;\n");
      out.write("\t\t PermissionAjax.permissionIndividually(assetId, languageId, permissionIndividuallyCallback);\n");
      out.write("\n");
      out.write("\t  }else{\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tdojo.forEach(currentPermissions, function (role) {\n");
      out.write("\t\t\tif(!role.editPermissions) {\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tif(role.locked) {\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits(null, role.id))\n");
      out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('folders', role.id))\n");
      out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('containers', role.id))\n");
      out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('templates', role.id))\n");
      out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('template-layouts', role.id))\n");
      out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('pages', role.id))\n");
      out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('links', role.id))\n");
      out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('content', role.id))\n");
      out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('structure', role.id))\n");
      out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('categories', role.id))\n");
      out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('rules', role.id))\n");
      out.write("\t\t});\n");
      out.write("\t\tdojo.style('permissionsTabFt', { display: '' });\n");
      out.write("\t\tdojo.style('inheritingFrom', { display: 'none' });\n");
      out.write("\t\tdojo.style('permissionIndividuallyButtonWrapper', { display: 'none' });\n");
      out.write("\t\tdojo.style('resetPermissionButtonWrapper', { display: '' });\n");
      out.write("\t\tdojo.style('permissionsActions', { display: '' });\n");
      out.write("\t\tdojo.query(\".accordionEntry\").forEach(function(node, index, arr){\n");
      out.write("\t\t\tnode.className = \"permissionTable\";\n");
      out.write("\t\t });\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tvar cont = dijit.byId('permissionsAccordionContainer');\n");
      out.write("\n");
      out.write("\t\tcont.layout=function () {\n");
      out.write("\t\t\t// Implement _LayoutWidget.layout() virtual method.\n");
      out.write("\t\t\t// Set the height of the open pane based on what room remains.\n");
      out.write("\n");
      out.write("\t\t\tvar openPane = this.selectedChildWidget;\n");
      out.write("\n");
      out.write("\t\t\t// get cumulative height of all the title bars\n");
      out.write("\t\t\tvar totalCollapsedHeight = 0;\n");
      out.write("\t\t\tdojo.forEach(this.getChildren(), function(child){\n");
      out.write("\t\t\t\ttotalCollapsedHeight += child._buttonWidget.getTitleHeight();\n");
      out.write("\t\t\t\tif((!isFolder && !isHost)) {\n");
      out.write("\t\t\t\t\tdojo.style(child.containerNode, { padding: '0' });\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\tvar mySize = this._contentBox;\n");
      out.write("\t\t\tif(isFolder || isHost) {\n");
      out.write("\t\t\t\tthis._verticalSpace = 200;\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tthis._verticalSpace = 0;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t// Memo size to make displayed child\n");
      out.write("\t\t\tthis._containerContentBox = {\n");
      out.write("\t\t\t\th: this._verticalSpace,\n");
      out.write("\t\t\t\tw: mySize.w\n");
      out.write("\t\t\t};\n");
      out.write("\n");
      out.write("\t\t\tif(openPane){\n");
      out.write("\t\t\t\topenPane.resize(this._containerContentBox);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tadjustAccordionHeigth();\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tinheritingPermissions = false;\n");
      out.write("\t\tchangesMadeToPermissions=true;\n");
      out.write("\t  }\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction enableCheckboxes (checkboxes) {\n");
      out.write("\n");
      out.write("\t\tif(checkboxes.viewPermissionCheckbox)\n");
      out.write("\t\t\tcheckboxes.viewPermissionCheckbox.attr('disabled', false);\n");
      out.write("\t\tif(checkboxes.addChildrenPermissionCheckbox)\n");
      out.write("\t\t\tcheckboxes.addChildrenPermissionCheckbox.attr('disabled', false);\n");
      out.write("\t\tif(checkboxes.editPermissionCheckbox)\n");
      out.write("\t\t\tcheckboxes.editPermissionCheckbox.attr('disabled', false);\n");
      out.write("\t\tif(checkboxes.publishPermissionCheckbox)\n");
      out.write("\t\t\tcheckboxes.publishPermissionCheckbox.attr('disabled', false);\n");
      out.write("\t\tif(checkboxes.editPermissionsPermissionCheckbox)\n");
      out.write("\t\t\tcheckboxes.editPermissionsPermissionCheckbox.attr('disabled', false);\n");
      out.write("\t\tif(dijit.byId('cascadeChangesCheckbox'))\n");
      out.write("\t\t\tdijit.byId('cascadeChangesCheckbox').attr('disabled', false);\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction resetPermissions () {\n");
      out.write("\t\tif(confirm(removeIndividualPermissionConfirm)) {\n");
      out.write("\t\t\tchangesMadeToPermissions=false;\n");
      out.write("\t\t\tdijit.byId('savingPermissionsDialog').show();\n");
      out.write("            permissionsLoaded = false;\n");
      out.write("\t\t\tPermissionAjax.resetAssetPermissions(assetId, languageId, resetPermissionsCallback);\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction resetPermissionsCallback () {\n");
      out.write("\t\tdijit.byId('savingPermissionsDialog').hide();\n");
      out.write("\t\tloadPermissions();\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t//Permissions tab utility functions\n");
      out.write("\tfunction findRole(roleId, roles) {\n");
      out.write("\t\tfor(var i = 0; i < roles.length; i++) {\n");
      out.write("\t\t\tif(roles[i].id == roleId) {\n");
      out.write("\t\t\t\treturn roles[i];\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\treturn null;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction removeRole(roleId, roles) {\n");
      out.write("\t\tfor(var i = 0; i < roles.length; i++) {\n");
      out.write("\t\t\tif(roles[i].id == roleId) {\n");
      out.write("\t\t\t\troles.splice(i, 1);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction getPermissionCheckboxDijits (type, id) {\n");
      out.write("\t\tvar prefix = type?type + \"-\":\"\";\n");
      out.write("\t\tvar viewPermissionCheckbox = dijit.byId(prefix + 'view-permission-' + id);\n");
      out.write("\t\tvar addChildrenPermissionCheckbox = dijit.byId(prefix + 'add-children-permission-' + id);\n");
      out.write("\t\tvar editPermissionCheckbox = dijit.byId(prefix + 'edit-permission-' + id);\n");
      out.write("\t\tvar publishPermissionCheckbox = dijit.byId(prefix + 'publish-permission-' + id);\n");
      out.write("\t\tvar editPermissionsPermissionCheckbox = dijit.byId(prefix + 'edit-permissions-permission-' + id);\n");
      out.write("\t\treturn {\n");
      out.write("\t\t\tviewPermissionCheckbox: viewPermissionCheckbox,\n");
      out.write("\t\t\taddChildrenPermissionCheckbox: addChildrenPermissionCheckbox,\n");
      out.write("\t\t\teditPermissionCheckbox: editPermissionCheckbox,\n");
      out.write("\t\t\tpublishPermissionCheckbox: publishPermissionCheckbox,\n");
      out.write("\t\t\teditPermissionsPermissionCheckbox: editPermissionsPermissionCheckbox\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction addTemplatePermissionOptions(role, permissions){\n");
      out.write("\n");
      out.write("\t\tfillTemplatePermissionOptions(role, permissions);\n");
      out.write("\t\tfillTemplatePermissionOptions(role, permissions, hostClassName, 'hosts');\n");
      out.write("\t\tfillTemplatePermissionOptions(role, permissions, folderClassName, 'folders');\n");
      out.write("\t\tfillTemplatePermissionOptions(role, permissions, containerClassName, 'containers');\n");
      out.write("\t\tfillTemplatePermissionOptions(role, permissions, templateClassName, 'templates');\n");
      out.write("\t\tfillTemplatePermissionOptions(role, permissions, templateLayoutClassName, 'templateLayouts');\n");
      out.write("\t\tfillTemplatePermissionOptions(role, permissions, pageClassName, 'pages');\n");
      out.write("\t\tfillTemplatePermissionOptions(role, permissions, linkClassName, 'links');\n");
      out.write("\t\tfillTemplatePermissionOptions(role, permissions, contentClassName, 'content');\n");
      out.write("\t\tfillTemplatePermissionOptions(role, permissions, structureClassName, 'structure');\n");
      out.write("\t\tfillTemplatePermissionOptions(role, permissions, categoryClassName, 'categories');\n");
      out.write("\t\tfillTemplatePermissionOptions(role, permissions, rulesClassName, 'rules');\n");
      out.write("\n");
      out.write("\t\trole[\"view-permission-style\"] = '';\n");
      out.write("\t\trole[\"add-children-permission-style\"] = '';\n");
      out.write("\t\trole[\"edit-permission-style\"] = '';\n");
      out.write("\t\trole[\"publish-permission-style\"] = '';\n");
      out.write("\t\trole[\"edit-permissions-permission-style\"] = '';\n");
      out.write("\t\trole[\"add-children-permission-style\"] = '';\n");
      out.write("\t\tif(assetType == 'com.dotmarketing.portlets.folders.model.Folder') {\n");
      out.write("\t\t\trole[\"publish-permission-style\"] = 'display:none';\n");
      out.write("\t\t} else if(assetType == 'com.dotmarketing.beans.Host') {\n");
      out.write("\t\t\trole[\"publish-permission-style\"] = 'display:none';\n");
      out.write("\t\t} else if(assetType == 'com.dotmarketing.portlets.structure.model.Structure') {\n");
      out.write("\t\t\trole[\"add-children-permission-style\"] = 'display: none'\n");
      out.write("\t\t} else if(assetType == 'com.dotmarketing.portlets.categories.model.Category') {\n");
      out.write("\t\t\trole[\"publish-permission-style\"] = 'display:none';\n");
      out.write("\t\t\trole[\"add-children-permission-style\"] = 'display: none'\n");
      out.write("\t\t} else if(assetType == 'com.dotmarketing.portlets.report.model.Report') {\n");
      out.write("\t\t\trole[\"publish-permission-style\"] = 'display:none';\n");
      out.write("\t\t\trole[\"add-children-permission-style\"] = 'display: none'\n");
      out.write("\t\t}\n");
      out.write("\t\t");
 if(UtilMethods.isSet(contentletAux) && contentletAux.getStructure().getStructureType()==Structure.STRUCTURE_TYPE_HTMLPAGE) {
      out.write("\n");
      out.write("     ");
 } 
      out.write("\n");
      out.write("\t\t\n");
      out.write("\t\telse {\n");
      out.write("\t\t\trole[\"add-children-permission-style\"] = 'display: none'\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\trole[\"icon\"] = '/html/images/shim.gif';\n");
      out.write("\t\tif(!role.editPermissions || role.locked) {\n");
      out.write("\t\t\trole[\"icon\"] = '/html/images/icons/lock.png';\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\trole.hostsWillInherit = hostsWillInheritMsg;\n");
      out.write("\t\trole.foldersWillInherit = foldersWillInheritMsg;\n");
      out.write("\t\trole.containersWillInherit = containersWillInheritMsg;\n");
      out.write("\t\trole.templatesWillInherit = templatesWillInheritMsg;\n");
      out.write("\t\trole.templateLayoutsWillInherit = templateLayoutsWillInheritMsg;\n");
      out.write("\t\trole.pagesWillInherit = pagesWillInheritMsg;\n");
      out.write("\t\trole.linksWillInherit = linksWillInheritMsg;\n");
      out.write("\t\trole.contentWillInherit = contentWillInheritMsg;\n");
      out.write("\t\trole.permissionsOnChildren1=permissionsOnChildrenMsg1;\n");
      out.write("\t\trole.permissionsOnChildren2=permissionsOnChildrenMsg2;\n");
      out.write("\t\trole.structureWillInherit = structureWillInheritMsg;\n");
      out.write("\t\trole.categoriesWillInherit = categoriesWillInheritMsg;\n");
      out.write("\t\trole.rulesWillInherit = rulesWillInheritMsg;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction fillTemplatePermissionOptions (role, permissions, permissionType, assetType) {\n");
      out.write("\n");
      out.write("\t\tif(!permissionType) permissionType = 'individual'\n");
      out.write("\n");
      out.write("\t\tprefix = \"view\";\n");
      out.write("\t\tif(assetType) prefix = assetType + \"View\";\n");
      out.write("\t\tif(hasPermissionSet(permissions, permissionType, viewPermission)) {\n");
      out.write("\t\t\trole[prefix + \"PermissionChecked\"] = 'checked=\"checked\"'\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\trole[prefix + \"PermissionChecked\"] = ''\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tprefix = \"addChildren\";\n");
      out.write("\t\tif(assetType) prefix = assetType + \"AddChildren\";\n");
      out.write("\t\tif(hasPermissionSet(permissions, permissionType, addChildrenPermission)) {\n");
      out.write("\t\t\trole[prefix + \"PermissionChecked\"] = 'checked=\"checked\"'\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\trole[prefix + \"PermissionChecked\"] = ''\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tprefix = \"edit\";\n");
      out.write("\t\tif(assetType) prefix = assetType + \"Edit\";\n");
      out.write("\t\tif(hasPermissionSet(permissions, permissionType, editPermission)) {\n");
      out.write("\t\t\trole[prefix + \"PermissionChecked\"] = 'checked=\"checked\"'\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\trole[prefix + \"PermissionChecked\"] = ''\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tprefix = \"publish\";\n");
      out.write("\t\tif(assetType) prefix = assetType + \"Publish\";\n");
      out.write("\t\tif(hasPermissionSet(permissions, permissionType, publishPermission)) {\n");
      out.write("\t\t\trole[prefix + \"PermissionChecked\"] = 'checked=\"checked\"'\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\trole[prefix + \"PermissionChecked\"] = ''\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tprefix = \"editPermissions\";\n");
      out.write("\t\tif(assetType) prefix = assetType + \"EditPermissions\";\n");
      out.write("\t\tif(hasPermissionSet(permissions, permissionType, editPermissionsPermission)) {\n");
      out.write("\t\t\trole[prefix + \"PermissionChecked\"] = 'checked=\"checked\"'\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\trole[prefix + \"PermissionChecked\"] = ''\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif(role.inherited || !doesUserHavePermissionsToEdit || role.editPermissions != true || role.locked==true) {\n");
      out.write("\t\t\t role.editPermissionDisabled = 'disabled=\"disabled\"';\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\t role.editPermissionDisabled = '';\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction hasPermissionSet(list, type, permission) {\n");
      out.write("\t\tfor (var i = 0; i < list.length; i++) {\n");
      out.write("\t\t\tvar perm = list[i];\n");
      out.write("\t\t\tif((perm.permission & permission) == permission && perm.type == type) {\n");
      out.write("\t\t\t\treturn true;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\treturn false;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction norm(value) {\n");
      out.write("\t\treturn dojo.isArray(value)?value[0]:value;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction permissionIndividuallyCallback () {\n");
      out.write("\t\tdijit.byId('savingPermissionsDialog').hide();\n");
      out.write("\t\tloadPermissions();\n");
      out.write("\t\tdojo.style('permissionsActions', { display: '' });\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction destroyChecks(){\n");
      out.write("\t\ttry{\n");
      out.write("\t\t   if (dijits) {\n");
      out.write("\t\t\t  for (var i = 0, n = dijits.length; i < n; i++) {\n");
      out.write("\t\t\t      if(dijits[i]){\n");
      out.write("                      for (var j = 0, n = dijits[i].length; j < n; j++) {\n");
      out.write("                          dijits[i][j].destroyRecursive();\n");
      out.write("                      }\n");
      out.write("\t\t\t      }\n");
      out.write("\t\t\t   }\n");
      out.write("\t\t   }\n");
      out.write("\t\t}catch(ex){\n");
      out.write("\t\t\tconsole.log(ex);\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("--></script>\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- START Loading Image Div -->\r\n");
      out.write("\t\r\n");
      out.write("<div id=\"loadingPermissionsAccordion\"><img src=\"/html/js/dojo/custom-build/dojox/widget/Standby/images/loading.gif\"></div>\r\n");
      out.write("<!-- END Loading Image Div -->\r\n");
      out.write("\r\n");
      out.write("<!-- START Alert Message -->\r\n");
      out.write("\t<div id=\"assetPermissionsMessageWrapper\" display=\"none\"></div>\r\n");
      out.write("<!-- END Message -->\r\n");
      out.write("\r\n");
      out.write("<div id=\"assetPermissionsWrapper\">\r\n");
      out.write("<div style=\"padding-left:20px;padding-bottom:10px;white-space: nowrap;font-size:88%;\" class=\"permissionType\">\r\n");
      out.write("\t");
if(asset instanceof Folder){
      out.write("\r\n");
      out.write("\t\t ");
      out.print( LanguageUtil.get(pageContext, "Folder") );
      out.write(":  <b>");
      out.print( APILocator.getIdentifierAPI().find((Folder) asset).getPath() );
      out.write("</b>\r\n");
      out.write("\t");
}else if(asset instanceof Host){
      out.write("\r\n");
      out.write("\t\t ");
      out.print( LanguageUtil.get(pageContext, "Host") );
      out.write(":  <b>");
      out.print( ((Host) asset).getHostname() );
      out.write("</b>\r\n");
      out.write("\t");
}else if(asset instanceof Contentlet){
      out.write("\r\n");
      out.write("\t\t");
if( ((Contentlet) asset).getStructureInode().equals(APILocator.getHostAPI().findSystemHost().getStructureInode())){ 
      out.write("\r\n");
      out.write("\t\t\t ");
      out.print( LanguageUtil.get(pageContext, "Host") );
      out.write(":  <b>");
      out.print( ((Contentlet) asset).getTitle() );
      out.write("</b>\r\n");
      out.write("\t\t");
}else if(!((Contentlet) asset).getPermissionId().isEmpty()) { 
      out.write("\r\n");
      out.write("\t\t\t ");
      out.print( LanguageUtil.get(pageContext, "Content") );
      out.write(":  <b>");
      out.print( ((Contentlet) asset).getTitle() );
      out.write("</b>\t\t\r\n");
      out.write("\t\t");
} 
      out.write('\r');
      out.write('\n');
      out.write('	');
}else if(asset instanceof Structure){
      out.write("\r\n");
      out.write("\t\t ");
      out.print( LanguageUtil.get(pageContext, "Structure") );
      out.write(":  <b>");
      out.print( ((Structure) asset).getName() );
      out.write("</b>\r\n");
      out.write("\t");
}else if(asset instanceof ContentType){
      out.write("\r\n");
      out.write("         ");
      out.print( LanguageUtil.get(pageContext, "Structure") );
      out.write(":  <b>");
      out.print( new StructureTransformer(ContentType.class.cast(asset)).asStructure().getName() );
      out.write("</b>\r\n");
      out.write("\t");
}else if(asset instanceof Category){
      out.write("\r\n");
      out.write("\t\t ");
      out.print( LanguageUtil.get(pageContext, "Category") );
      out.write(":  <b>");
      out.print( ((Category) asset).getCategoryName() );
      out.write("</b>\r\n");
      out.write("\t");
}
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("<!-- START Button Row -->\r\n");
      out.write("\t<div id=\"inheritingFrom\" class=\"permissions__bar-user-role\" style=\"display: none;\">\r\n");
      out.write("\t\t<div class=\"permissions__bar-user-role-main\">\r\n");
      out.write("\t\t\t<b>");
      out.print( LanguageUtil.get(pageContext, "Inheriting-Permissions-From") );
      out.write(":</b>&nbsp;\r\n");
      out.write("\t\t\t<span id=\"inheritingFromSources\"></span>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"permissions__bar-user-role-actions\">\r\n");
      out.write("\t\t\t<span id=\"resetPermissionActions\">\r\n");
      out.write("\t\t\t\t<span id=\"permissionIndividuallyButtonWrapper\" style=\"display:none;\">\r\n");
      out.write("\t\t\t\t\t<button dojoType=\"dijit.form.Button\" onclick=\"permissionsIndividually()\" type=\"button\">");
      out.print( LanguageUtil.get(pageContext, "want-to-permission-individually") );
      out.write("</button>\r\n");
      out.write("\t\t\t\t</span>\r\n");
      out.write("\t\t\t\t<div id=\"resetInheritanceMess\" style=\"display: none;\"></div>\r\n");
      out.write("\t\t\t</span>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"permissionsTabFt\" class=\"permissions__bar-user-role\">\r\n");
      out.write("\t\t<div class=\"permissions__bar-user-role-main\">\r\n");
      out.write("\t\t\t<div class=\"inline-form\">\r\n");
      out.write("\t\t\t\t<span class=\"rolesIcon\"></span>\r\n");
      out.write("\t\t\t\t<select id=\"permissionsRoleSelector\" dojoType=\"dotcms.dijit.form.RolesFilteringSelect\" excludeRoles=\"");
      out.print( APILocator.getRoleAPI().loadCMSAdminRole().getId());
      out.write("\"></select>\r\n");
      out.write("\t\t\t\t<button dojoType=\"dijit.form.Button\" onclick=\"addRoleToPermissions();return false;\">");
      out.print( LanguageUtil.get(pageContext, "Add-Role") );
      out.write("</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"inline-form\">\r\n");
      out.write("\t\t\t\t<span class=\"userIcon\"></span>\r\n");
      out.write("\t\t\t\t<div dojoType=\"dotcms.dojo.data.UsersReadStore\" jsId=\"usersStore\" includeRoles=\"false\" style=\"margin: none\"></div>\r\n");
      out.write("\t\t\t\t<select id=\"permissionsUserSelector\" name=\"permissionsUserSelector\" dojoType=\"dijit.form.FilteringSelect\" store=\"usersStore\" searchDelay=\"300\" pageSize=\"30\" labelAttr=\"name\" invalidMessage=\"");
      out.print( LanguageUtil.get(pageContext, "Invalid-option-selected") );
      out.write("\"></select>\r\n");
      out.write("\t\t\t\t<button dojoType=\"dijit.form.Button\" onclick=\"addUserToPermissions();return false;\">");
      out.print( LanguageUtil.get(pageContext, "Add-User") );
      out.write("</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"permissions__bar-user-role-actions\">\r\n");
      out.write("\t\t\t<span id=\"resetPermissionButtonWrapper\" style=\"display:none;\">\r\n");
      out.write("\t\t\t\t<button dojoType=\"dijit.form.Button\" onclick=\"resetPermissions()\" class=\"dijitButtonDanger\">");
      out.print( LanguageUtil.get(pageContext, "reset-permissions") );
      out.write("</button>\r\n");
      out.write("\t\t\t</span>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("<!-- END Button Row -->\r\n");
      out.write("\r\n");
      out.write("<!-- START Permission Rows -->\r\n");
      out.write("\t<div class=\"permissionWrapper\">\r\n");
      out.write("\t\t<table class=\"permissionTable\">\r\n");
      out.write("\t\t    <tr>\r\n");
      out.write("\t\t        <th class=\"permissionType\"></th>\r\n");
      out.write("\t\t        <th>");
      out.print( LanguageUtil.get(pageContext, "View") );
      out.write("</th>\r\n");
      out.write("\t\t        <th>");
      out.print( LanguageUtil.get(pageContext, "Add-br-children") );
      out.write("</th>\r\n");
      out.write("\t\t        <th>");
      out.print( LanguageUtil.get(pageContext, "Edit") );
      out.write("</th>\r\n");
      out.write("\t\t        <th>");
      out.print( LanguageUtil.get(pageContext, "Publish") );
      out.write("</th>\r\n");
      out.write("\t\t        <th>");
      out.print( LanguageUtil.get(pageContext, "Edit") );
      out.write("<br/>");
      out.print( LanguageUtil.get(pageContext, "Permissions") );
      out.write("</th>\r\n");
      out.write("\t\t    </tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"permissionsAccordionContainer\" class=\"permissionWrapper\"></div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div id=\"noPermissionsMessage\" class=\"noResultsMessage\" style=\"display: none\">");
      out.print( LanguageUtil.get(user, "No-permissions-message") );
      out.write("</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"clear\"></div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"permissions__button-row\" id=\"permissionsActions\">\r\n");
      out.write("\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" class=\"applyChangesButton\" id=\"applyChangesButton\" onClick=\"applyPermissionChanges('${id}')\">\r\n");
      out.write("\t\t\t");
      out.print( LanguageUtil.get(pageContext, "Apply-Changes") );
      out.write("\r\n");
      out.write("\t\t</button>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<span id=\"cascadeChangesChkWrapper\" style=\"display: none\" class=\"reset-permissions\">\r\n");
      out.write("\t\t\t<input type=\"checkbox\" dojoType=\"dijit.form.CheckBox\" id=\"cascadeChangesCheckbox\" /> \r\n");
      out.write("\t\t\t");
      out.print( LanguageUtil.get(pageContext, "Reset-Children-Permissions") );
      out.write("<a href=\"javascript: ;\" id=\"resetPermissionsHintHook\">?</a>\r\n");
      out.write("\t\t\t<span dojoType=\"dijit.Tooltip\" connectId=\"resetPermissionsHintHook\" id=\"resetPermissionsHint\" class=\"fieldHint\">");
      out.print( LanguageUtil.get(pageContext, "Reset-Children-Permissions-Hint") );
      out.write("</span>\r\n");
      out.write("\t\t</span>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<!-- START Saving permissions dialog -->\r\n");
      out.write("\t<div id=\"savingPermissionsDialog\" dojoType=\"dijit.Dialog\" title=\"");
      out.print( LanguageUtil.get(pageContext, "saving-permissions") );
      out.write("\" style=\"display: none;\">\r\n");
      out.write("\t\t<div dojoType=\"dijit.ProgressBar\" style=\"width:200px;text-align:center;\" indeterminate=\"true\"></div>\r\n");
      out.write("\t</div>\r\n");
      out.write("<!-- END Saving permissions dialog -->\r\n");
      out.write("\r\n");
      out.write("<!-- START Confirm Save permissions  change dialog -->\t\r\n");
      out.write("     <div dojoType=\"dijit.Dialog\" id=\"applyPermissionsChangesDialog\" title='");
      out.print(LanguageUtil.get(pageContext, "Permissions-Confirmation") );
      out.write("' style=\"display: none\">\r\n");
      out.write("     \t ");
      out.print(LanguageUtil.get(pageContext, "permissions-changes-confirmation") );
      out.write("\r\n");
      out.write("     \t<div class=\"buttonRow\">\r\n");
      out.write("     \t\t<button dojoType=\"dijit.form.Button\" onClick=\"dijit.byId('applyPermissionsChangesDialog').hide(); applyPermissionChanges('${id}'); \" type=\"button\">");
      out.print( LanguageUtil.get(pageContext, "Yes") );
      out.write("</button>\r\n");
      out.write("\t\t\t<button dojoType=\"dijit.form.Button\" onClick=\"dijit.byId('applyPermissionsChangesDialog').hide();\" type=\"button\">");
      out.print( LanguageUtil.get(pageContext, "No") );
      out.write("</button>\t \r\n");
      out.write("     \t</div>\t\t\t\t\r\n");
      out.write("     </div>\r\n");
      out.write("<!-- END Confirm Save permissions  change dialog -->");
      out.write('\n');
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
