/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2019-11-28 18:42:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.html.portlet.ext.osgi;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.dotcms.publisher.environment.bean.Environment;
import java.util.List;
import com.dotmarketing.util.UtilMethods;
import java.util.List;
import com.liferay.portal.language.LanguageUtil;
import com.dotcms.enterprise.LicenseUtil;
import com.dotcms.enterprise.license.LicenseLevel;
import com.dotcms.publisher.endpoint.business.PublishingEndPointAPI;
import com.dotmarketing.business.APILocator;
import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;
import com.dotmarketing.util.UtilMethods;
import org.osgi.framework.Bundle;
import org.apache.felix.framework.OSGIUtil;
import com.dotmarketing.util.Logger;
import com.dotmarketing.exception.DotSecurityException;
import com.liferay.portal.model.User;
import com.dotmarketing.business.APILocator;
import com.dotmarketing.util.UtilMethods;

public final class bundles_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/html/common/uservalidation.jsp", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/html/portlet/ext/remotepublish/init.jsp", Long.valueOf(1570476693000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.dotmarketing.util.UtilMethods");
    _jspx_imports_classes.add("com.dotmarketing.util.Logger");
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageUtil");
    _jspx_imports_classes.add("com.dotmarketing.exception.DotSecurityException");
    _jspx_imports_classes.add("com.dotcms.publisher.environment.bean.Environment");
    _jspx_imports_classes.add("com.dotmarketing.business.APILocator");
    _jspx_imports_classes.add("com.dotcms.publisher.endpoint.bean.PublishingEndPoint");
    _jspx_imports_classes.add("com.dotcms.publisher.endpoint.business.PublishingEndPointAPI");
    _jspx_imports_classes.add("org.apache.felix.framework.OSGIUtil");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.dotcms.enterprise.LicenseUtil");
    _jspx_imports_classes.add("com.liferay.portal.model.User");
    _jspx_imports_classes.add("com.dotcms.enterprise.license.LicenseLevel");
    _jspx_imports_classes.add("org.osgi.framework.Bundle");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');

    //Verify if we have set environments on session
    String selectedEnvKey = com.dotmarketing.util.WebKeys.SELECTED_ENVIRONMENTS + request.getSession().getAttribute("USER_ID");
	String selectedBundleKey = com.dotmarketing.util.WebKeys.SELECTED_BUNDLE + request.getSession().getAttribute("USER_ID");

    List<Environment> lastSelectedEnvironments = null;
    if ( request.getSession().getAttribute(selectedEnvKey) != null ) {
        lastSelectedEnvironments = (List<Environment>) request.getSession().getAttribute(selectedEnvKey);
    }

    //Verify if we have set a bundle on session
    com.dotcms.publisher.bundle.bean.Bundle lastSelectedBundle = null;
    if ( request.getSession().getAttribute( selectedBundleKey ) != null ) {
        lastSelectedBundle = (com.dotcms.publisher.bundle.bean.Bundle) request.getSession().getAttribute( selectedBundleKey );
    }

      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("    var lastSelectedEnvironments = [];\n");
      out.write("    ");
if (lastSelectedEnvironments != null) {

        int i = 0;
        for (Environment environment: lastSelectedEnvironments) {
            String id = environment.getId();
            String name = environment.getName();
    
      out.write("\n");
      out.write("\n");
      out.write("            var entry = {name:'");
      out.print(name);
      out.write("',id:'");
      out.print(id);
      out.write("'};\n");
      out.write("            lastSelectedEnvironments[");
      out.print(i++);
      out.write("] = entry;\n");
      out.write("    ");
}
      out.write("\n");
      out.write("\n");
      out.write("    ");
}
      out.write("\n");
      out.write("\n");
      out.write("    var lastSelectedBundle = {};\n");
      out.write("    ");
if (lastSelectedBundle != null) {

        String id = lastSelectedBundle.getId();
        String name = lastSelectedBundle.getName();
      out.write("\n");
      out.write("\n");
      out.write("        lastSelectedBundle = {name: '");
      out.print(UtilMethods.escapeSingleQuotes(name));
      out.write("', id: '");
      out.print(id);
      out.write("'};\n");
      out.write("    ");
}
      out.write("\n");
      out.write("\n");
      out.write("    sessionStorage.setItem(\"lastSelectedEnvironments\",JSON.stringify(lastSelectedEnvironments));\n");
      out.write("    sessionStorage.setItem(\"lastSelectedBundle\",JSON.stringify(lastSelectedBundle));\n");
      out.write("\n");
      out.write("</script>");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
        
	request.setAttribute("requiredPortletAccess", "dynamic-plugins"); 

      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	try { //maintenance
		final String requiredPortletAccess = UtilMethods.isSet(request.getAttribute("requiredPortletAccess"))
		        ? (String) request.getAttribute("requiredPortletAccess")
		                : (UtilMethods.isSet(request.getAttribute("PORTLET_ID")))
		                ? (String) request.getAttribute("PORTLET_ID") 
		                        : "maintenance";

		User userToCheck = com.liferay.portal.util.PortalUtil.getUser(request);
		if(userToCheck == null || !APILocator.getLayoutAPI().doesUserHaveAccessToPortlet(requiredPortletAccess, userToCheck)){
			throw new DotSecurityException("Invalid user accessing JSP - is user '" + userToCheck + "' logged in?");
		}
	} catch (Exception e) {
		Logger.error(this.getClass(), e.getMessage());
		response.sendError(403);
		return;
	}
 
      out.write("\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    require([\"dijit/form/SimpleTextarea\", \"dijit/Dialog\", \"dijit/MenuItem\"]);\n");
      out.write("\n");
      out.write("    window.states = {};\n");
      out.write("    states[");
      out.print(Bundle.ACTIVE);
      out.write("]= \"");
      out.print(LanguageUtil.get(pageContext, "OSGI-Bundles-State-Active"));
      out.write("\";\n");
      out.write("    states[");
      out.print(Bundle.INSTALLED);
      out.write("]= \"");
      out.print(LanguageUtil.get(pageContext, "OSGI-Bundles-State-Installed"));
      out.write("\";\n");
      out.write("    states[");
      out.print(Bundle.RESOLVED);
      out.write("]= \"");
      out.print(LanguageUtil.get(pageContext, "OSGI-Bundles-State-Resolved"));
      out.write("\";\n");
      out.write("    states[");
      out.print(Bundle.STARTING);
      out.write("]= \"");
      out.print(LanguageUtil.get(pageContext, "OSGI-Bundles-State-Starting"));
      out.write("\";\n");
      out.write("    states[");
      out.print(Bundle.STOPPING);
      out.write("]= \"");
      out.print(LanguageUtil.get(pageContext, "OSGI-Bundles-State-Stopping"));
      out.write("\";\n");
      out.write("    states[");
      out.print(Bundle.UNINSTALLED);
      out.write("]= \"");
      out.print(LanguageUtil.get(pageContext, "OSGI-Bundles-State-Uninstalled"));
      out.write("\";\n");
      out.write("    states[");
      out.print(Bundle.START_TRANSIENT);
      out.write("]= \"");
      out.print(LanguageUtil.get(pageContext, "OSGI-Bundles-State-StartTransient"));
      out.write("\";\n");
      out.write("    states[");
      out.print(Bundle.STOP_TRANSIENT);
      out.write("]= \"");
      out.print(LanguageUtil.get(pageContext, "OSGI-Bundles-State-StopTransient"));
      out.write("\";\n");
      out.write("\n");
      out.write("    var popupMenusDiv;\n");
      out.write("    var popupMenus = \"\";\n");
      out.write("\n");
      out.write("    var enterprise = ");
      out.print(LicenseUtil.getLevel() >= LicenseLevel.STANDARD.level);
      out.write(";\n");
      out.write("    ");

    PublishingEndPointAPI pepAPI = APILocator.getPublisherEndPointAPI();
    List<PublishingEndPoint> sendingEndpoints = pepAPI.getReceivingEndPoints();
    
      out.write("\n");
      out.write("    var sendingEndpoints = ");
      out.print(UtilMethods.isSet(sendingEndpoints) && !sendingEndpoints.isEmpty());
      out.write(";\n");
      out.write("\n");
      out.write("    var deployPath = '");
      out.print(OSGIUtil.getInstance().getFelixDeployPath());
      out.write("';\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<div class=\"buttonBoxLeft\">\n");
      out.write("\t\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("<script language=\"Javascript\">\n");
      out.write("\t/**\n");
      out.write("\t\tfocus on search box\n");
      out.write("\t**/\n");
      out.write("\trequire([ \"dijit/focus\", \"dojo/dom\", \"dojo/domReady!\" ], function(focusUtil, dom){\n");
      out.write("\t\tdojo.require('dojox.timing');\n");
      out.write("\t\tt = new dojox.timing.Timer(500);\n");
      out.write("\t\tt.onTick = function(){\n");
      out.write("\t\t  focusUtil.focus(dom.byId(\"availBundlesCombo\"));\n");
      out.write("\t\t  t.stop();\n");
      out.write("\t\t};\n");
      out.write("\t\tt.start();\n");
      out.write("\t});\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("<div class=\"portlet-main\">\n");
      out.write("\t\n");
      out.write("\t<!-- START Toolbar -->\n");
      out.write("\t<div class=\"portlet-toolbar\">\n");
      out.write("\t\t<div class=\"portlet-toolbar__actions-primary\">\n");
      out.write("\t\t\t<div dojoType=\"dojo.data.ItemFileReadStore\" jsId=\"test\" url=\"/html/portlet/ext/osgi/available_bundles_json.jsp\"></div>\n");
      out.write("\t\t\t\t");
      out.print( LanguageUtil.get(pageContext,"OSGI-AVAIL-BUNDLES") );
      out.write(" : <input dojoType=\"dijit.form.ComboBox\" store=\"test\" searchAttr=\"label\" name=\"availBundlesCombo\" id=\"availBundlesCombo\">\n");
      out.write("\t\t\t<button dojoType=\"dijit.form.Button\" type=\"submit\" onclick=\"javascript:bundles.deploy()\">");
      out.print(LanguageUtil.get(pageContext, "OSGI-Load-Bundle"));
      out.write("</button>\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<div class=\"portlet-toolbar__info\">\n");
      out.write("\t\t</div>\n");
      out.write("    \t<div class=\"portlet-toolbar__actions-secondary\">\n");
      out.write("    \t\t<!-- START Actions -->\t\t\t\n");
      out.write("\t\t\t<button dojoType=\"dijit.form.Button\" onClick=\"javascript:dijit.byId('uploadOSGIDialog').show()\" iconClass=\"plusIcon\" type=\"button\">");
      out.print(LanguageUtil.get(pageContext, "OSGI-Upload-Bundle"));
      out.write("</button>\n");
      out.write("\t\t\t<button dojoType=\"dijit.form.Button\" onClick=\"bundles.reboot(true);\" iconClass=\"resetIcon\" type=\"button\">");
      out.print(LanguageUtil.get(pageContext, "OSGI-restart-framework"));
      out.write("</button>\n");
      out.write("\t\t\t<button dojoType=\"dijit.form.Button\" onClick=\"bundles.extraPackages();\" iconClass=\"editIcon\" type=\"button\">");
      out.print(LanguageUtil.get(pageContext, "OSGI-extra-packages"));
      out.write("</button>\n");
      out.write("\t\t\t<button dojoType=\"dijit.form.Button\" onClick=\"mainAdmin.refresh();\" iconClass=\"resetIcon\" type=\"button\">");
      out.print(LanguageUtil.get(pageContext, "Refresh"));
      out.write("</button>\n");
      out.write("\t\t\t<!-- END Actions -->\n");
      out.write("    \t</div>\n");
      out.write("   </div>\n");
      out.write("   <!-- END Toolbar -->\n");
      out.write("\t\n");
      out.write("\t<table class=\"listingTable\" style=\"margin:0 0 25px 0;\" id=\"bundlesTable\">\n");
      out.write("\t    <tbody id=\"bundlesTable-body\">\n");
      out.write("\t\t<tr>\n");
      out.write("\t\t\t<th>");
      out.print(LanguageUtil.get(pageContext, "OSGI-Name"));
      out.write("</th>\n");
      out.write("\t\t\t<th>");
      out.print(LanguageUtil.get(pageContext, "OSGI-State"));
      out.write("</th>\n");
      out.write("\t\t\t<th>");
      out.print(LanguageUtil.get(pageContext, "OSGI-Jar"));
      out.write("</th>\n");
      out.write("\t\t\t<th>");
      out.print(LanguageUtil.get(pageContext, "OSGI-Actions"));
      out.write("</th>\n");
      out.write("\t\t</tr>\n");
      out.write("\t    <tr id=\"loading-row\">\n");
      out.write("\t        <td colspan=\"100\" align=\"center\">");
      out.print(LanguageUtil.get(pageContext, "Loading"));
      out.write("...</td>\n");
      out.write("\t    </tr>\n");
      out.write("\t    </tbody>\n");
      out.write("\t</table>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div id=\"savingOSGIDialog\" dojoType=\"dijit.Dialog\" disableCloseButton=\"true\" title=\"OSGI\" style=\"display: none;\">\n");
      out.write("\t<div dojoType=\"dijit.ProgressBar\" style=\"width:200px;text-align:center;\" indeterminate=\"true\" jsId=\"saveProgress\" id=\"saveProgress\"></div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div id=\"uploadOSGIDialog\" dojoType=\"dijit.Dialog\" disableCloseButton=\"true\" title=\"");
      out.print(LanguageUtil.get(pageContext, "OSGI-Upload-Bundle"));
      out.write("\" style=\"display: none;\">\n");
      out.write("\t<div style=\"padding:30px 15px;\">\n");
      out.write("\t\t<form id=\"addBundle\" name=\"addBundle\" enctype=\"multipart/form-data\" method=\"post\">\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"cmd\" value=\"add\">\n");
      out.write("\t\t\t<div>\n");
      out.write("\t\t\t\t<!-- <input name=\"bundleUpload\" multiple=\"false\" type=\"file\" data-dojo-type=\"dojox.form.Uploader\" label=\"Select Bundle\" id=\"bundleUpload\" showProgress=\"true\"/>&nbsp;&nbsp;&nbsp; -->\n");
      out.write("\t\t\t\t<!-- <span id=\"uploadFileName\"></span> -->\n");
      out.write("\t\t\t\t<input type=\"file\" name=\"bundleUpload\" size=\"40\">\n");
      out.write("\t\t\t\t<button dojoType=\"dijit.form.Button\" onClick='bundles.add()' iconClass=\"uploadIcon\" type=\"button\">");
      out.print(LanguageUtil.get(pageContext, "OSGI-Upload-Bundle"));
      out.write("</button>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</form>\n");
      out.write("\t</div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div id=\"packagesOSGIDialog\" dojoType=\"dijit.Dialog\" disableCloseButton=\"true\" title=\"");
      out.print(LanguageUtil.get(pageContext, "OSGI-extra-packages"));
      out.write("\" style=\"display: none;\">\n");
      out.write("    <div style=\"padding:30px 15px;\">\n");
      out.write("        <form id=\"modifyPackagesForm\" name=\"modifyPackagesForm\" method=\"post\">\n");
      out.write("            <input type=\"hidden\" name=\"cmd\" value=\"modifyPackages\">\n");
      out.write("            <div style=\"height: 400px;\">\n");
      out.write("                <textarea dojoType=\"dijit.form.SimpleTextarea\" id=\"packages\" name=\"packages\" style=\"width:350px; height: 390px!important; overflow-y: scroll!important;\"></textarea>\n");
      out.write("            </div>\n");
      out.write("            <div>\n");
      out.write("                <button dojoType=\"dijit.form.Button\" onClick='bundles.modifyExtraPackages()' iconClass=\"saveIcon\" type=\"button\">");
      out.print(LanguageUtil.get(pageContext, "OSGI-modify-packages"));
      out.write("</button>\n");
      out.write("            </div>\n");
      out.write("        </form>\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("<div id=\"popup_menus\"></div>\n");
      out.write("\n");
      out.write("<script type=\"application/javascript\">\n");
      out.write("\n");
      out.write("    var getBundlesData = function () {\n");
      out.write("\n");
      out.write("        //Displays the loading dialog\n");
      out.write("        try {dijit.byId('savingOSGIDialog').show();} catch (e) {}\n");
      out.write("\n");
      out.write("        var xhrArgs = {\n");
      out.write("            url: \"/api/osgi/getInstalledBundles/ignoreSystemBundles/true/type/json\",\n");
      out.write("            handleAs: \"json\",\n");
      out.write("            load: function (data) {\n");
      out.write("\n");
      out.write("                if (data.length > 0) {\n");
      out.write("\n");
      out.write("                    var i = 0;\n");
      out.write("                    data.forEach(function(bundleData){\n");
      out.write("\n");
      out.write("                        //First we need to destroy any existing widget with the same id\n");
      out.write("                        try {dijit.byId(\"popupTr\" + i).destroy(true);} catch (e) {}\n");
      out.write("                        try {dijit.byId(\"tr\" + bundleData.jarFile).destroy(true);} catch (e) {}\n");
      out.write("\n");
      out.write("                        var htmlContent = \"<tr id=\\\"tr\" + bundleData.jarFile + \"\\\">\" +\n");
      out.write("                                \"<td>\" + bundleData.symbolicName + \"</td>\" +\n");
      out.write("                                \"<td>\" + window.states[bundleData.state] + \"</td>\" +\n");
      out.write("                                \"<td>\" + bundleData.jarFile + \"</td>\";\n");
      out.write("\n");
      out.write("                        htmlContent += \"<td>\";\n");
      out.write("                        if (bundleData.state != ");
      out.print(Bundle.ACTIVE);
      out.write(") {\n");
      out.write("                            htmlContent += \"<a href=\\\"javascript:bundles.start('\" + bundleData.jarFile + \"','\" + bundleData.bundleId + \"')\\\">");
      out.print(LanguageUtil.get(pageContext, "OSGI-Start"));
      out.write("</a>\";\n");
      out.write("                        }\n");
      out.write("                        if (bundleData.state == ");
      out.print(Bundle.ACTIVE);
      out.write(") {\n");
      out.write("                            htmlContent += \"<a href=\\\"javascript:bundles.stop('\" + bundleData.jarFile + \"','\" + bundleData.bundleId + \"')\\\">");
      out.print(LanguageUtil.get(pageContext, "OSGI-Stop"));
      out.write("</a>\";\n");
      out.write("                        }\n");
      out.write("                        if (bundleData.location.indexOf(bundleData.separator) != -1 && bundleData.location.indexOf(deployPath + bundleData.separator) != -1) {\n");
      out.write("                            htmlContent += \"&nbsp;|&nbsp;<a href=\\\"javascript:bundles.undeploy('\" + bundleData.jarFile + \"','\" + bundleData.bundleId + \"')\\\">");
      out.print(LanguageUtil.get(pageContext, "OSGI-Undeploy"));
      out.write("</a>\";\n");
      out.write("                        }\n");
      out.write("                        htmlContent += \"</td></tr>\";\n");
      out.write("\n");
      out.write("                        dojo.place(htmlContent, \"bundlesTable-body\", \"after\");\n");
      out.write("\n");
      out.write("                        if (bundleData.location.indexOf(bundleData.separator) != -1 && bundleData.location.indexOf(deployPath + bundleData.separator) != -1) {\n");
      out.write("                            if(enterprise) {\n");
      out.write("                                popupMenus += \"<div dojoType=\\\"dijit.Menu\\\" class=\\\"dotContextMenu\\\" id=\\\"popupTr\" + (i++) +\"\\\" contextMenuForWindow=\\\"false\\\" style=\\\"display: none;\\\" targetNodeIds=\\\"tr\" + bundleData.jarFile + \"\\\">\";\n");
      out.write("                                if (sendingEndpoints) {\n");
      out.write("                                    popupMenus += \"<div dojoType=\\\"dijit.MenuItem\\\" iconClass=\\\"sServerIcon\\\" onClick=\\\"javascript:bundles.remotePublishBundle('\" + bundleData.jarFile + \"');\\\">");
      out.print(LanguageUtil.get(pageContext, "Remote-Publish") );
      out.write("</div>\";\n");
      out.write("                                }\n");
      out.write("                                popupMenus += \"<div dojoType=\\\"dijit.MenuItem\\\" iconClass=\\\"bundleIcon\\\" onClick=\\\"javascript:bundles.addToBundlePlugin('\" + bundleData.jarFile + \"');\\\">");
      out.print(LanguageUtil.get(pageContext, "Add-To-Bundle") );
      out.write("</div>\";\n");
      out.write("                                popupMenus += \"</div>\";\n");
      out.write("                            }\n");
      out.write("                        }\n");
      out.write("                    });\n");
      out.write("\n");
      out.write("                    require([\"dojo/html\", \"dojo/dom\"],\n");
      out.write("                        function (html, dom) {\n");
      out.write("                            html.set(dom.byId(\"popup_menus\"), popupMenus,{parseContent: true});\n");
      out.write("                        });\n");
      out.write("                } else {\n");
      out.write("                    var htmlContent = \"<tr><td colspan=\\\"100\\\" align=\\\"center\\\">");
      out.print(LanguageUtil.get(pageContext, "No-Results-Found"));
      out.write("</td></tr>\";\n");
      out.write("                    dojo.place(htmlContent, \"bundlesTable-body\", \"after\");\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                //Hiddes the loading dialog\n");
      out.write("                try {dijit.byId('savingOSGIDialog').hide();} catch (e) {}\n");
      out.write("                dojo.byId(\"loading-row\").hide();\n");
      out.write("            },\n");
      out.write("            error: function (error) {\n");
      out.write("\n");
      out.write("                //Hiddes the loading dialog\n");
      out.write("                try {dijit.byId('savingOSGIDialog').hide();} catch (e) {}\n");
      out.write("                dojo.byId(\"loading-row\").hide();\n");
      out.write("\n");
      out.write("                showDotCMSSystemMessage(error.responseText, true);\n");
      out.write("            }\n");
      out.write("        };\n");
      out.write("        dojo.xhrGet(xhrArgs);\n");
      out.write("    };\n");
      out.write("\n");
      out.write("    dojo.addOnLoad(function () {\n");
      out.write("\n");
      out.write("        if (dijit.byId('savingOSGIDialog') == undefined) {\n");
      out.write("            setTimeout(function () {\n");
      out.write("                getBundlesData()\n");
      out.write("            }, 50);\n");
      out.write("        } else {\n");
      out.write("            getBundlesData();\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
