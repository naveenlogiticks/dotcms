/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2019-11-28 18:41:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.html.portlet.ext.workflows.schemes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.dotcms.enterprise.LicenseUtil;
import com.dotcms.enterprise.license.LicenseLevel;
import com.liferay.portal.language.LanguageUtil;

public final class workflow_005fmain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.dotcms.enterprise.LicenseUtil");
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageUtil");
    _jspx_imports_classes.add("com.dotcms.enterprise.license.LicenseLevel");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\" src=\"/html/portlet/ext/workflows/schemes/workflow_js.jsp\" ></script>\n");
      out.write("\n");
      out.write("<style type=\"text/css\">\n");
      out.write("\t@import \"/html/portlet/ext/workflows/schemes/workflow.css\"; \n");
      out.write("\t@import \"/html/js/dragula-3.7.2/dragula.min.css\"; \n");
      out.write("</style>\t\n");
      out.write("\n");
      out.write("<div class=\"portlet-wrapper\" ");
if(LicenseUtil.getLevel() < LicenseLevel.STANDARD.level){ 
      out.write("style=\"background:#F4F3F4 url(/html/images/skin/workflow-background.png) repeat-x 0 0 \" ");
} 
      out.write(">\n");
      out.write("\t<div class=\"subNavCrumbTrail\">\n");
      out.write("\t\t<ul id=\"subNavCrumbUl\">\n");
      out.write("\t\t\t<li>\n");
      out.write("\t\t\t\t<a href=\"javascript:schemeAdmin.show()\">");
      out.print(LanguageUtil.get(pageContext, "Workflow"));
      out.write("</a>\n");
      out.write("\t\t\t</li>\n");
      out.write("\t\t\t<li class=\"lastCrumb\"><span>");
      out.print(LanguageUtil.get(pageContext, "Schemes"));
      out.write("</span></li>\n");
      out.write("\t\t</ul>\n");
      out.write("\t\t<div class=\"clear\"></div>\n");
      out.write("\t</div>\n");
      out.write("\t\n");
      out.write("\t");
if(LicenseUtil.getLevel() < LicenseLevel.STANDARD.level){ 
      out.write("\n");
      out.write("\t\n");
      out.write("\n");
      out.write("\t\t\n");
      out.write("\t\t\t<style>\n");
      out.write("\t\t\t\t.wrapper{background:url(/html/images/skin/workflow-promo.png) no-repeat 0 0;height:992px;margin:0 auto;}\n");
      out.write("\t\t\t\t.content{position:fixed;left:50%;top:50%;margin:-200px 0 0 -300px;width:600px;background:#333;opacity:.85;color:#fff;padding:20px 20px 35px 20px;-moz-border-radius: 15px;-webkit-border-radius: 15px;-moz-box-shadow:0px 0px 15px #666;-webkit-box-shadow:0px 0px 15px #666;}\n");
      out.write("\t\t\t\t.content h2{font-size:200%;}\n");
      out.write("\t\t\t\t.content p{margin:0;}\n");
      out.write("\t\t\t\t.content ul{margin:5px 0 25px 15px;padding:0 0 0 10px;list-style-position:outside; list-style:decimal;}\n");
      out.write("\t\t\t\t.content li{list-style-position:outside; list-style:disc;}\n");
      out.write("\t\t\t\t.content a{color:#fff;}\n");
      out.write("\t\t\t</style>\n");
      out.write("\t\t\t<div class=\"greyBg\"></div>\n");
      out.write("\t\t\t<div class=\"wrapper\">\n");
      out.write("\t\t\t\t<div class=\"content\">\n");
      out.write("\t\t\t\t\t<h2>");
      out.print( LanguageUtil.get(pageContext, "Workflows") );
      out.write("</h2>\n");
      out.write("\t\t\t\t\t<p>");
      out.print( LanguageUtil.get(pageContext, "Workflows-Not-Licensed") );
      out.write("</p>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t    </div>\n");
      out.write("\t");
}else{ 
      out.write("\n");
      out.write("\t\t<div id=\"hangWorkflowMainHere\">\n");
      out.write("\t\t\n");
      out.write("\t\t</div>\n");
      out.write("\t");
} 
      out.write("\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div dojoType=\"dijit.Dialog\" style=\"display: none\" id=\"addEditScheme\">\n");
      out.write("\t<div id=\"addEditSchemeHanger\"></div>\n");
      out.write("</div>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
