/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2019-11-28 18:41:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.html.portlet.ext.workflows.schemes;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.liferay.portal.language.LanguageUtil;

public final class workflow_005fjs_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/html/portlet/ext/workflows/schemes/workflow_icons.json", Long.valueOf(1570476693000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
response.setContentType("text/html");
      out.write("\n");
      out.write("dojo.require(\"dijit.form.Form\");\n");
      out.write("dojo.require(\"dijit.form.Button\");\n");
      out.write("dojo.require(\"dijit.form.ValidationTextBox\");\n");
      out.write("dojo.require(\"dijit.form.DateTextBox\");\n");
      out.write("dojo.require(\"dojo.hash\");\n");
      out.write("dojo.require(\"dojo.dnd.Container\");\n");
      out.write("dojo.require(\"dojo.dnd.Manager\");\n");
      out.write("dojo.require(\"dojo.dnd.Source\");\n");
      out.write("dojo.require(\"dojox.layout.ContentPane\");\n");
      out.write("dojo.require(\"dijit.TooltipDialog\");\n");
      out.write("dojo.require(\"dojox.data.QueryReadStore\");\n");
      out.write("dojo.require(\"dojo.NodeList-manipulate\");\n");
      out.write("// refresh page when the hash has changed\n");
      out.write("dojo.subscribe(\"/dojo/hashchange\", this, function(hash){mainAdmin.refresh();});\n");
      out.write("\n");
      out.write("dojo.require(\"dijit.layout.TabContainer\");\n");
      out.write("dojo.require(\"dojo.data.ItemFileReadStore\");\n");
      out.write("dojo.require(\"dotcms.dojo.data.RoleReadStore\");\n");
      out.write("dojo.provide(\"ValidationTextarea\");\n");
      out.write("dojo.require(\"dijit.form.SimpleTextarea\");\n");
      out.write("\n");
      out.write("dojo.declare(\n");
      out.write("    \"ValidationTextarea\",\n");
      out.write("    [dijit.form.ValidationTextBox,dijit.form.SimpleTextarea],\n");
      out.write("    {\n");
      out.write("        invalidMessage: \"This field is required\",\n");
      out.write("        regExp: \"(.|\\\\s)*\"\n");
      out.write("    }\n");
      out.write(");\n");
      out.write("\n");
      out.write("dojo.require(\"dojo.store.Memory\");\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("//\n");
      out.write("//\n");
      out.write("// -------------------- SchemeAdminMain --------------------\n");
      out.write("//\n");
      out.write("//\n");
      out.write("\n");
      out.write("dojo.declare(\"dotcms.dijit.workflows.MainAdmin\", null, {\n");
      out.write("\tbaseDiv : \"workflowSchemeMain\",\n");
      out.write("\twfCrumbTrail : new Array(),\n");
      out.write("\tconstructor : function() {\n");
      out.write("\t},\n");
      out.write("\tshow : function(href) {\n");
      out.write("\n");
      out.write("\t\tvar r = Math.floor(Math.random() * 1000000000);\n");
      out.write("\t\tif (href.indexOf(\"?\") > -1) {\n");
      out.write("\t\t\thref = href + \"&r=\" + r;\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\thref = href + \"?r=\" + r;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\thref = href + \"&donothing\";\n");
      out.write("\n");
      out.write("\t\tdojo.hash(encodeURIComponent(href));\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\trefresh : function() {\n");
      out.write("\t\tvar hashValue = decodeURIComponent(dojo.hash());\n");
      out.write("\n");
      out.write("\t\tif(!hashValue || hashValue.length ==0){\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\t\tvar myCp = dijit.byId(this.baseDiv);\n");
      out.write("\t\tvar hanger = dojo.byId(\"hangWorkflowMainHere\");\n");
      out.write("\t\tif(!hanger){\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\t\tif (myCp) {\n");
      out.write("\t\t\tmyCp.attr(\"content\",\"\");//myCp.destroyRecursive(true);\n");
      out.write("\t\t}else{\n");
      out.write("\t\t\tmyCp = new dojox.layout.ContentPane({\n");
      out.write("\t\t\tid : this.baseDiv\n");
      out.write("\t\t\t}).placeAt(\"hangWorkflowMainHere\");\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvar r = Math.floor(Math.random() * 1000000000);\n");
      out.write("\t\thashValue = hashValue + \"&rand=\" + r;\n");
      out.write("\t\tmyCp.attr(\"href\", hashValue);\n");
      out.write("\t\t// myCp.refresh();\n");
      out.write("\t\tdojo.parser.parse(\"hangWorkflowMainHere\");\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\taddCrumbtrail : function (title, urlx){\n");
      out.write("\t\tvar entry = {title:title, url:urlx};\n");
      out.write("\n");
      out.write("\t\tthis.wfCrumbTrail[this.wfCrumbTrail.length] = entry;\n");
      out.write("\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\tresetCrumbTrail : function(){\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tthis.wfCrumbTrail = new Array();\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\trefreshCrumbtrail : function (){\n");
      out.write("\t\tvar crumbDiv = dojo.byId(\"subNavCrumbUl\");\n");
      out.write("\t\tcrumbDiv.innerHTML =\"\";\n");
      out.write("\t\t<!-- dojo.create(\"li\",\n");
      out.write("\t\t// {onClick:this.show(this.wfCrumbTrail[i].url)},crumbDiv ) -->\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tfor( i =0;i< this.wfCrumbTrail.length;i++ ){\n");
      out.write("\t\t\tvar className=\"showPointer\";\n");
      out.write("\t\t\tif(i+1 ==this.wfCrumbTrail.length){\n");
      out.write("\t\t\t\tdojo.create(\"li\", {innerHTML:\"<b>\" + mainAdmin.wfCrumbTrail[i].title + \"</b>\", className:\"lastCrumb\"},crumbDiv );\n");
      out.write("\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\telse{\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\tdojo.create(\"li\", {innerHTML:\"<a href='javascript:mainAdmin.show(mainAdmin.wfCrumbTrail[\" + i + \"].url)'>\" + mainAdmin.wfCrumbTrail[i].title + \"</a>\", className:className},crumbDiv );\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\tconfirm : function(confirmationMessage ){\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tvar dia = dijit.byId(\"wfConfirmDialog\");\n");
      out.write("\t\tif(dia){\n");
      out.write("\t\t\tdia.destroyRecursive();\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tdia = new dijit.Dialog({\n");
      out.write("\t\t\tid\t\t\t:\t\"wfConfirmDialog\",\n");
      out.write("\t\t\ttitle\t\t: \t\"");
      out.print(LanguageUtil.get(pageContext, "Confirm"));
      out.write("\",\n");
      out.write("\t\t\tinnerHTML \t\t: confirmationMessage\n");
      out.write("\t\t\t});\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tdia.show();\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("});\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("//\n");
      out.write("//\n");
      out.write("//\n");
      out.write("// -------------------- SchemeAdmin --------------------\n");
      out.write("//\n");
      out.write("//\n");
      out.write("//\n");
      out.write("dojo.declare(\"dotcms.dijit.workflows.SchemeAdmin\", null, {\n");
      out.write("\tbaseJsp : \"/html/portlet/ext/workflows/schemes/view_schemes.jsp\",\n");
      out.write("\teditJsp : \"/html/portlet/ext/workflows/schemes/edit_scheme.jsp\",\n");
      out.write("    importJsp : \"/html/portlet/ext/workflows/schemes/import_scheme.jsp\",\n");
      out.write("\tshowArchived : false,\n");
      out.write("\tcrumbTitle:\"");
      out.print(LanguageUtil.get(pageContext, "Schemes"));
      out.write("\",\n");
      out.write("\taddEditDiv:\"wfEditSchemeDia\",\n");
      out.write("    importDiv:\"wfImportSchemeDia\",\n");
      out.write("\tconstructor : function() {\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tshow : function() {\n");
      out.write("\t\tvar href = this.baseJsp;\n");
      out.write("\t\tif (this.showArchived) {\n");
      out.write("\t\t\thref = href + \"?showArchived=true\";\n");
      out.write("\t\t}\n");
      out.write("\t\tmainAdmin.show(href);\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tshowAddEdit : function(schemeId) {\n");
      out.write("\t\tvar myCp = dijit.byId(\"wfEditSchemeCp\");\n");
      out.write("\t\tif (myCp) {\n");
      out.write("\t\t\tmyCp.destroyRecursive(false);\n");
      out.write("\t\t}\n");
      out.write("\t\tvar href = this.editJsp;\n");
      out.write("\t\tif (schemeId && schemeId.length > 0) {\n");
      out.write("\t\t\thref = href + \"?schemeId=\" + schemeId;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tmyCp = new dijit.layout.ContentPane({\n");
      out.write("\t\t\tid : \"wfEditSchemeCp\",\n");
      out.write("\t\t\tparseOnLoad : true,\n");
      out.write("\n");
      out.write("\t\t})\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tvar dia = dijit.byId(this.addEditDiv);\n");
      out.write("\t\tif(dia){\n");
      out.write("\t\t\tdia.destroyRecursive(false);\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tdia = new dijit.Dialog({\n");
      out.write("\t\t\tid\t\t\t:\tthis.addEditDiv,\n");
      out.write("\t\t\ttitle\t\t: \t\"");
      out.print(LanguageUtil.get(pageContext, "Edit-Scheme"));
      out.write("\",\n");
      out.write("\t\t\tstyle        : \"width:600px;height:560px\",\n");
      out.write("\t\t\tdraggable\t:\ttrue\n");
      out.write("\t\t});\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tmyCp.attr(\"href\", href);\n");
      out.write("\n");
      out.write("\t\tmyCp.placeAt(this.addEditDiv);\n");
      out.write("\n");
      out.write("\t\tdia.show();\n");
      out.write("\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\thideAddEdit : function() {\n");
      out.write("\t\tvar dialog = dijit.byId(this.addEditDiv);\n");
      out.write("\t\tdialog.hide();\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tsaveAddEdit : function() {\n");
      out.write("\n");
      out.write("\t\tvar myForm = dijit.byId(\"addEditSchemeForm\");\n");
      out.write("\n");
      out.write("\t\tif (myForm.validate()) {\n");
      out.write("\n");
      out.write("\t\t\tdojo.xhrPost({\n");
      out.write("\t\t\t\tform : \"addEditSchemeForm\",\n");
      out.write("\t\t\t\ttimeout : 30000,\n");
      out.write("\t\t\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\t\t\t\t\tif (dojo.isString(dataOrError)) {\n");
      out.write("\t\t\t\t\t\tif (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("\t\t\t\t\t\t\tschemeAdmin.saveError(dataOrError);\n");
      out.write("\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\tschemeAdmin.saveSuccess(dataOrError);\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tthis.saveError(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-save-Scheme"));
      out.write("\");\n");
      out.write("\n");
      out.write("\t\t\t\t\t}\n");
      out.write("                    schemeAdmin.show(); // refresh so changes can be seen\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\t\t;\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("    \tunArchiveScheme : function() {\n");
      out.write("        \tvar archived = dojo.byId(\"schemeArchived\");\n");
      out.write("        \tarchived.value=\"false\"\n");
      out.write("        \tthis.saveAddEdit();\n");
      out.write("    \t},\n");
      out.write("\n");
      out.write("    \tarchiveScheme : function() {\n");
      out.write("        \tvar archived = dojo.byId(\"schemeArchived\");\n");
      out.write("        \tarchived.value=\"true\"\n");
      out.write("        \tthis.saveAddEdit();\n");
      out.write("    \t},\n");
      out.write("\n");
      out.write("\tcopyScheme : function(schemeId, name) {\n");
      out.write("\n");
      out.write("\t\tvar optionalName = prompt (\"");
      out.print(LanguageUtil.get(pageContext, "Workflow-Name"));
      out.write("\", name);\n");
      out.write("\n");
      out.write("\t\tif (null != optionalName) {\n");
      out.write("\n");
      out.write("\t\t\tvar xhrArgs = {\n");
      out.write("\t\t\t\turl: \"/api/v1/workflow/schemes/\" + schemeId + \"/copy?name=\" + optionalName,\n");
      out.write("\n");
      out.write("\t\t\t\tpostData: '',\n");
      out.write("\t\t\t\thandleAs: 'json',\n");
      out.write("\t\t\t\theaders : {\n");
      out.write("\t\t\t\t'Accept' : 'application/json',\n");
      out.write("\t\t\t\t'Content-Type' : 'application/json;charset=utf-8'\n");
      out.write("\t\t\t\t},\n");
      out.write("\n");
      out.write("\t\t\t\ttimeout : 30000,\n");
      out.write("\t\t\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\t\t\t\t\t\t\tif (ioArgs.xhr.status != 200) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\tif (ioArgs.xhr.getResponseHeader(\"error-message\")) {\n");
      out.write("\t\t\t\t\t\t\t\t\tschemeAdmin.copyError(ioArgs.xhr.getResponseHeader(\"error-message\"));\n");
      out.write("\t\t\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\t\t\tschemeAdmin.copyError(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-copy-Scheme"));
      out.write("\");\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\tschemeAdmin.copySuccess(dataOrError);\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\tschemeAdmin.show(); // refresh so changes can be seen\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t};\n");
      out.write("\t\t\tdojo.xhrPost(xhrArgs);\n");
      out.write("\t\t}\n");
      out.write("\t\treturn;\n");
      out.write("\t},\n");
      out.write("    deleteScheme : function(schemeId) {\n");
      out.write("\n");
      out.write("        if(!confirm(\"");
      out.print(LanguageUtil.get(pageContext, "Confirm-Delete-Scheme"));
      out.write("\")){\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("        var xhrArgs = {\n");
      out.write("            url: \"/api/v1/workflow/schemes/\" + schemeId ,\n");
      out.write("            timeout : 30000,\n");
      out.write("            handle : function(dataOrError, ioArgs) {\n");
      out.write("                if (dojo.isString(dataOrError)) {\n");
      out.write("                    if (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("                        schemeAdmin.deleteError(dataOrError);\n");
      out.write("                    } else {\n");
      out.write("                        schemeAdmin.deleteSuccess(dataOrError);\n");
      out.write("                     }\n");
      out.write("                } else {\n");
      out.write("                    schemeAdmin.deleteError(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-delete-Scheme"));
      out.write("\");\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        };\n");
      out.write("        dojo.xhrDelete(xhrArgs);\n");
      out.write("        return;\n");
      out.write("    },\n");
      out.write("\tsaveSuccess : function(message) {\n");
      out.write("\t\tvar dialog = dijit.byId(schemeAdmin.addEditDiv);\n");
      out.write("        if(dialog != undefined){\n");
      out.write("            dialog.hide();\n");
      out.write("        }\n");
      out.write("\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Workflow-Scheme-saved"));
      out.write("\");\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\tsaveError : function(message) {\n");
      out.write("\t\tshowDotCMSSystemMessage(message, true);\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("    deleteSuccess : function(message) {\n");
      out.write("        var dialog = dijit.byId(schemeAdmin.addEditDiv);\n");
      out.write("        if(dialog != undefined){\n");
      out.write("            dialog.hide();\n");
      out.write("        }\n");
      out.write("        schemeAdmin.show();\n");
      out.write("        mainAdmin.refresh();\n");
      out.write("        showDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Workflow-Scheme-deleted"));
      out.write("\");\n");
      out.write("    },\n");
      out.write("    deleteError : function(message) {\n");
      out.write("        showDotCMSSystemMessage(message, true);\n");
      out.write("    },\n");
      out.write("\tcopySuccess : function(message) {\n");
      out.write("\t\tvar dialog = dijit.byId(schemeAdmin.addEditDiv);\n");
      out.write("        if(dialog != undefined){\n");
      out.write("            dialog.hide();\n");
      out.write("        }\n");
      out.write("\t\tschemeAdmin.show();\n");
      out.write("\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Workflow-Scheme-copied"));
      out.write("\");\n");
      out.write("\t},\n");
      out.write("\tcopyError : function(message) {\n");
      out.write("\t\tshowDotCMSSystemMessage(message, true);\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("    exportScheme : function(schemeId) {\n");
      out.write("\n");
      out.write("        var xhrArgs = {\n");
      out.write("            url: \"/api/v1/workflow/schemes/\"+schemeId+\"/export\",\n");
      out.write("            timeout : 30000,\n");
      out.write("            handleAs: \"json\",\n");
      out.write("            load: function(data) {\n");
      out.write("                 schemeAdmin.downloadFile(schemeId, data);\n");
      out.write("            }, error : function(error) {\n");
      out.write("                 showDotCMSSystemMessage(error, true);\n");
      out.write("            }\n");
      out.write("        };\n");
      out.write("        dojo.xhrGet(xhrArgs);\n");
      out.write("        return;\n");
      out.write("    },\n");
      out.write("    downloadFile : function (schemeId, data) {\n");
      out.write("        var blob = new Blob([JSON.stringify(data.entity)], {type: 'application/json'});\n");
      out.write("        var url = URL.createObjectURL(blob);\n");
      out.write("\n");
      out.write("        let a = document.createElement(\"a\");\n");
      out.write("        a.style = \"display: none\";\n");
      out.write("        document.body.appendChild(a);\n");
      out.write("\n");
      out.write("        a.href = url;\n");
      out.write("        a.download = 'scheme_'+schemeId+'.json';\n");
      out.write("        a.click();\n");
      out.write("        window.URL.revokeObjectURL(url);\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    showImport : function(schemeId) {\n");
      out.write("        var myCp = dijit.byId(\"wfImportSchemeCp\");\n");
      out.write("        if (myCp) {\n");
      out.write("            myCp.destroyRecursive(false);\n");
      out.write("        }\n");
      out.write("        var href = this.importJsp;\n");
      out.write("\n");
      out.write("        myCp = new dijit.layout.ContentPane({\n");
      out.write("            id : \"wfImportSchemeCp\",\n");
      out.write("            parseOnLoad : true,\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        var dia = dijit.byId(this.importDiv);\n");
      out.write("        if(dia){\n");
      out.write("            dia.destroyRecursive(false);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        dia = new dijit.Dialog({\n");
      out.write("            id : this.importDiv,\n");
      out.write("            title : \"");
      out.print(LanguageUtil.get(pageContext, "Import-Workflow-Scheme"));
      out.write("\",\n");
      out.write("            draggable : false\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        myCp.attr(\"href\", href)\n");
      out.write("        myCp.placeAt(this.importDiv)\n");
      out.write("        dia.show();\n");
      out.write("    },\n");
      out.write("    hideImport : function() {\n");
      out.write("        var dialog = dijit.byId(this.importDiv);\n");
      out.write("        dialog.hide();\n");
      out.write("    },\n");
      out.write("    importScheme : function() {\n");
      out.write("\n");
      out.write("        if(!confirm(\"");
      out.print(LanguageUtil.get(pageContext, "Confirm-Import-Scheme"));
      out.write("\")){\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var fileReader = new FileReader();\n");
      out.write("        fileReader.readAsText(document.getElementById(\"schemejsonfile\").files[0]);\n");
      out.write("        fileReader.onload = function (fileReaderEvent, fileText) {\n");
      out.write("            var fileText = fileReaderEvent.target.result;\n");
      out.write("\n");
      out.write("            var xhrArgs = {\n");
      out.write("                url : \"/api/v1/workflow/schemes/import\",\n");
      out.write("                postData: fileText,\n");
      out.write("                timeout : 30000,\n");
      out.write("                headers: { \"Content-Type\": \"application/json\"},\n");
      out.write("                handle : function(dataOrError, ioArgs) {\n");
      out.write("                    if (ioArgs.xhr.status != 200) {\n");
      out.write("                        if (ioArgs.xhr.getResponseHeader(\"error-message\")) {\n");
      out.write("                            schemeAdmin.importError(ioArgs.xhr.getResponseHeader(\"error-message\"));\n");
      out.write("                        } else {\n");
      out.write("                            schemeAdmin.importError(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-import-Scheme"));
      out.write("\");\n");
      out.write("                        }\n");
      out.write("                    } else {\n");
      out.write("                        schemeAdmin.importSuccess(dataOrError);\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            };\n");
      out.write("\n");
      out.write("            dojo.xhrPost(xhrArgs);\n");
      out.write("        }\n");
      out.write("        return;\n");
      out.write("    },\n");
      out.write("    importSuccess : function(message) {\n");
      out.write("\t\ttry {\n");
      out.write("\t\t\tdijit.byId('importWorkflowErrors').hide();\n");
      out.write("\t\t} catch (e) {\n");
      out.write("\t\t\tconsole.error(e);\n");
      out.write("\t\t}\n");
      out.write("        schemeAdmin.hideImport();\n");
      out.write("        mainAdmin.refresh();\n");
      out.write("        showDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Workflow-Scheme-Imported"));
      out.write("\");\n");
      out.write("    },\n");
      out.write("    importError : function(message) {\n");
      out.write("\t\tvar errorDisplayElement = dijit.byId('importWorkflowErrors');\n");
      out.write("\t\tdojo.byId('importWorkflowExceptionData').innerHTML = \"<ul><li>\"+message+\"</li></ul>\";\n");
      out.write("\t\terrorDisplayElement.show();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("});\n");
      out.write("\n");
      out.write("\n");
      out.write("//\n");
      out.write("//\n");
      out.write("//\n");
      out.write("\n");
      out.write("//\n");
      out.write("// -------------------- StepAdmin --------------------\n");
      out.write("//\n");
      out.write("//\n");
      out.write("//\n");
      out.write("//\n");
      out.write("dojo.declare(\"dotcms.dijit.workflows.StepAdmin\", null, {\n");
      out.write("\tbaseJsp : \"/html/portlet/ext/workflows/schemes/view_steps.jsp\",\n");
      out.write("\teditJsp : \"/html/portlet/ext/workflows/schemes/edit_step.jsp\",\n");
      out.write("\tschemeId: \"\",\n");
      out.write("\tcrumbTitle:\"");
      out.print(LanguageUtil.get(pageContext, "Steps"));
      out.write("\",\n");
      out.write("\tshowViewSteps : function(schemeId) {\n");
      out.write("\t\tmainAdmin.show(this.baseJsp + \"?schemeId=\" + schemeId);\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\teditStep : function(schemeId, stepId){\n");
      out.write("\t\tmainAdmin.show(this.editJsp + \"?schemeId=\" + schemeId + \"&stepId=\"+ stepId);\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\talreadyDone : \"\",\n");
      out.write("\taddStep : function (){\n");
      out.write("\n");
      out.write("\t\tvar stepName = encodeURIComponent(dijit.byId(\"stepName\").getValue());\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tvar myParams = \"cmd=add&stepName=\" + encodeURIComponent(stepName) + \"&schemeId=\" +  this.schemeId;\n");
      out.write("\n");
      out.write("\t\tvar xhrArgs = {\n");
      out.write("\n");
      out.write("\t\t\turl: \"/DotAjaxDirector/com.dotmarketing.portlets.workflows.ajax.WfStepAjax\",\n");
      out.write("\t\t\tpostData : myParams,\n");
      out.write("    \t\thandleAs: \"text\",\n");
      out.write("\t\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\t\t\t\tif (dojo.isString(dataOrError)) {\n");
      out.write("\t\t\t\t\tif (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("\t\t\t\t\t\tshowDotCMSSystemMessage(dataOrError, true);\n");
      out.write("\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tstepAdmin.addSuccess(dataOrError);\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-add-Step"));
      out.write("\", true);\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\t\tdojo.xhrPost(xhrArgs);\n");
      out.write("\n");
      out.write("\t\treturn;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tshowAddNewStep : function (){\n");
      out.write("\t\tvar dia = dijit.byId(\"addNewStepDia\");\n");
      out.write("\t\tif(dia){\n");
      out.write("\t\t\tdia.destroyRecursive();\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tdia = new dijit.Dialog({\n");
      out.write("\t\t\t\tcontent: '<div class=\"inline-form\">");
      out.print(LanguageUtil.get(pageContext, "Name"));
      out.write(":&nbsp;<input type=\"text\" name=\"stepName\" id=\"stepName\" dojoType=\"dijit.form.ValidationTextBox\"  required=\"true\" value=\"\" maxlength=\"255\">&nbsp;<button dojoType=\"dijit.form.Button\" onClick=\"stepAdmin.addStep()\" iconClass=\"addIcon\" id=\"Save-new-step\">");
      out.print(LanguageUtil.get(pageContext, "Add"));
      out.write("</button></div>',\n");
      out.write("\t\t\t\tid\t\t\t:\t\"addNewStepDia\",\n");
      out.write("\t\t\t\ttitle\t\t: \t\"");
      out.print(LanguageUtil.get(pageContext, "Add-Step"));
      out.write("\",\n");
      out.write("\t\t\t\tonKeyPress:function(e){\n");
      out.write("\t\t\t\tif(e.keyCode==13){\n");
      out.write("\t\t\t\t\tstepAdmin.addStep();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\n");
      out.write("\n");
      out.write("\t\tdia.show();\n");
      out.write("\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\taddSuccess : function (data){\n");
      out.write("\t\tmainAdmin.refresh();\n");
      out.write("\t\tshowDotCMSSystemMessage(\"Added\");\n");
      out.write("\t\tvar dia = dijit.byId(\"addNewStepDia\");\n");
      out.write("\t\t\t\tif(dia){\n");
      out.write("\t\t\tdia.destroyRecursive();\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tdeleteStep : function (stepId){\n");
      out.write("\n");
      out.write("\t\tif(!confirm(\"");
      out.print(LanguageUtil.get(pageContext, "Confirm-Delete-Step"));
      out.write("\")){\n");
      out.write("\t\t\treturn;\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvar xhrArgs = {\n");
      out.write("\t\t\turl: \"/DotAjaxDirector/com.dotmarketing.portlets.workflows.ajax.WfStepAjax?cmd=delete&stepId=\" + stepId,\n");
      out.write("\t\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\t\t\t\tif (dojo.isString(dataOrError)) {\n");
      out.write("\t\t\t\t\tif (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("\t\t\t\t\t\t\tdataOrError = '<div class=\"warningText\">' + dataOrError + '</div>';\n");
      out.write("\t\t\t\t\t\t\tvar thisdialog = new dijit.Dialog({ title: \"Delete Step\", content: dataOrError });\n");
      out.write("\t\t\t\t\t\t\tdojo.body().appendChild(thisdialog.domNode);\n");
      out.write("\t\t\t\t\t\t\tthisdialog.startup();\n");
      out.write("\t\t\t\t\t\t\tthisdialog.show();\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tstepAdmin.deleteSuccess(dataOrError);\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-delete-Step"));
      out.write("\", true);\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\t\tdojo.xhrPut(xhrArgs);\n");
      out.write("\n");
      out.write("\t\treturn;\n");
      out.write("\t},\n");
      out.write("\treorderStep : function (stepId, order){\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tvar xhrArgs = {\n");
      out.write("\t\t\turl: \"/api/v1/workflow/reorder/step/\" + stepId+ \"/order/\" + order,\n");
      out.write("\t\t\tasync:true,\n");
      out.write("\t\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\t\t\t\tif (dojo.isString(dataOrError)) {\n");
      out.write("\t\t\t\t\tif (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("\t\t\t\t\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-reorder-Step"));
      out.write("\", true);\n");
      out.write("\t\t\t\t\t\treturn false;\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\treturn false;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-reorder-Step"));
      out.write("\", true);\n");
      out.write("\t\t\t\t\treturn false;\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\t\tdojo.xhrPut(xhrArgs);\n");
      out.write("\n");
      out.write("\t\treturn;\n");
      out.write("\t},\n");
      out.write("\tdeleteSuccess : function (data){\n");
      out.write("\t\tmainAdmin.refresh();\n");
      out.write("\t\tshowDotCMSSystemMessage(\"deleted\");\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\n");
      out.write("\tshowStepEdit : function(stepId){\n");
      out.write("\t\tvar dia = dijit.byId(\"stepEditDia\");\n");
      out.write("\t\tif(dia){\n");
      out.write("\t\t\tdia.destroyRecursive();\n");
      out.write("\t\t}\n");
      out.write("\t\tdia = new dijit.Dialog({\n");
      out.write("\t\t\tid\t\t\t:\t\"stepEditDia\",\n");
      out.write("\t\t\ttitle\t\t: \t\"");
      out.print(LanguageUtil.get(pageContext, "Edit-Step"));
      out.write("\",\n");
      out.write("\t\t\tdraggable\t:\tfalse\n");
      out.write("\t\t});\n");
      out.write("\n");
      out.write("\t\tvar myCp = dijit.byId(\"stepEditCp\");\n");
      out.write("\t\tif (myCp) {\n");
      out.write("\t\t\tmyCp.destroyRecursive(true);\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tmyCp = new dojox.layout.ContentPane({\n");
      out.write("\t\t\tid : \"stepEditCp\"\n");
      out.write("\t\t})\n");
      out.write("\n");
      out.write("\t\tmyCp.placeAt(\"stepEditDia\");\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tdia.show();\n");
      out.write("\t\tsetTimeout(function() {\n");
      out.write("\t\t\tdia.domNode.style.top = \"50%\"\n");
      out.write("\t\t\tdia.domNode.style.marginTop = '-' + (parseInt(dia.domNode.offsetHeight / 2, 10) + 'px');\n");
      out.write("\t\t\tdia.domNode.style.left = \"50%\"\n");
      out.write("\t\t\tdia.domNode.style.marginLeft = '-' + (parseInt(dia.domNode.offsetWidth / 2, 10) + 'px');\n");
      out.write("\t\t}, 100)\n");
      out.write("\n");
      out.write("\t\tmyCp.attr(\"href\",\"/html/portlet/ext/workflows/schemes/edit_step.jsp?stepId=\" + stepId);\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\thideEdit: function(){\n");
      out.write("\t\tvar dia = dijit.byId(\"stepEditDia\");\n");
      out.write("\t\tif(dia){\n");
      out.write("\t\t\tdia.destroyRecursive();\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\teditStep: function(){\n");
      out.write("\t\tvar myForm = dijit.byId(\"addEditStepForm\");\n");
      out.write("\n");
      out.write("\t\tif (myForm.validate()) {\n");
      out.write("\n");
      out.write("\t\t\tdojo.xhrPost({\n");
      out.write("\t\t\t\tform : \"addEditStepForm\",\n");
      out.write("\t\t\t\ttimeout : 30000,\n");
      out.write("\t\t\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\t\t\t\t\tif (dojo.isString(dataOrError)) {\n");
      out.write("\t\t\t\t\t\tif (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\tshowDotCMSSystemMessage(dataOrError, true);\n");
      out.write("\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Saved"));
      out.write("\");\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\tvar dia = dijit.byId(\"stepEditDia\");\n");
      out.write("\t\t\t\t\t\t\tdia.hide();\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\tmainAdmin.refresh();\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tthis.saveError(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-save-Scheme"));
      out.write("\");\n");
      out.write("\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\n");
      out.write("\n");
      out.write("\t\t\tvar x = dijit.byId(\"addEditStepDia\");\n");
      out.write("\t\t\tif(typeof x != \"undefined\"){\n");
      out.write("\t\t\t\tx.hide();\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("    filterSteps:function(schemeId, roleId, contentType){\n");
      out.write("\n");
      out.write("        var targetNode = dojo.byId(\"wfStepInDragContainer\");\n");
      out.write("\n");
      out.write("\t\tvar xhrArgs = {\n");
      out.write("\t\t   url: \"/html/portlet/ext/workflows/schemes/view_steps_filtered.jsp?schemeId=\"+schemeId+\"&roleId=\"+roleId+\"&contentTypeId=\"+contentType,\n");
      out.write("\t\t   async:true,\n");
      out.write("\t\t   load: function(markup){\n");
      out.write("               targetNode.innerHTML = markup;\n");
      out.write("\t\t   },\n");
      out.write("\t\t   error: function(error){\n");
      out.write("                console.log(error);\n");
      out.write("                showDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-load-Scheme"));
      out.write("\", true);\n");
      out.write("\t\t   }\n");
      out.write("\t\t};\n");
      out.write("\t\t// Call the asynchronous xhrGet\n");
      out.write("\t\tvar deferred = dojo.xhrGet(xhrArgs);\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("});\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("//\n");
      out.write("//\n");
      out.write("//\n");
      out.write("//\n");
      out.write("// -------------------- ActionAdmin --------------------\n");
      out.write("//\n");
      out.write("//\n");
      out.write("//\n");
      out.write("//\n");
      out.write("dojo.declare(\"dotcms.dijit.workflows.ActionAdmin\", null, {\n");
      out.write("\n");
      out.write("\tbaseJsp : \"/html/portlet/ext/workflows/schemes/view_action.jsp\",\n");
      out.write("\tcrumbTitle:\"");
      out.print(LanguageUtil.get(pageContext, "Actions"));
      out.write("\",\n");
      out.write("\twhoCanUse:new Array(),\n");
      out.write("\treorderAction : function (nodes){\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tvar movedId = dojo.attr(nodes[0],\"id\");\n");
      out.write("\t\tvar stepId = movedId.split(\"_\")[2];\n");
      out.write("\t\tvar actionId = movedId.split(\"_\")[1];\n");
      out.write("\t\tvar i=0;\n");
      out.write("\t\tdojo.query(\"#jsNode\" + stepId + \" tr\").forEach(function(node){\n");
      out.write("\t\t\tif(node.id == movedId ){\n");
      out.write("\t\t\t\tvar xhrArgs = {\n");
      out.write("\t\t\t\t\turl: \"/DotAjaxDirector/com.dotmarketing.portlets.workflows.ajax.WfActionAjax?cmd=reorder&actionId=\" + actionId + \"&order=\" + i + \"&stepId=\" + stepId,\n");
      out.write("\t\t\t\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\t\t\t\t\t\tif (dojo.isString(dataOrError)) {\n");
      out.write("\t\t\t\t\t\t\tif (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t<!--// schemeAdmin.saveError(dataOrError); -->\n");
      out.write("\t\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\t\t<!--// schemeAdmin.saveSuccess(dataOrError); -->\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\t<!--//this.saveError(\"");
      out.print(LanguageUtil.get(pageContext, "unable-to-save-action"));
      out.write("\"); -->\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t};\n");
      out.write("\t\t\t\tdojo.xhrPut(xhrArgs);\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\ti++;\n");
      out.write("\n");
      out.write("\t\t})\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tfindStepDiv : function (ele){\n");
      out.write("\t\tvar parent = ele;\n");
      out.write("\t\twhile (true) {\n");
      out.write("\t\t\tif(parent.dataset.wfstepId){\n");
      out.write("\t\t\t\treturn parent;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tparent = parent.parentNode;\n");
      out.write("\t\t\tif(parent == document.body){\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\treturn ;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tfindStepId : function (ele){\n");
      out.write("\t\tvar parent = ele;\n");
      out.write("\t\twhile (true) {\n");
      out.write("\t\t\tif(parent.dataset.wfstepId){\n");
      out.write("\t\t\t\treturn parent.dataset.wfstepId;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tparent = parent.parentNode;\n");
      out.write("\t\t\tif(parent == document.body){\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\treturn ;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tfindActionId : function (ele){\n");
      out.write("\t\tvar parent = ele;\n");
      out.write("\t\twhile (true) {\n");
      out.write("\t\t\tif(parent.dataset.wfactionId){\n");
      out.write("\t\t\t\treturn parent.dataset.wfactionId;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tparent = parent.parentNode;\n");
      out.write("\t\t\tif(parent == document.body){\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\treturn ;\n");
      out.write("\t},\n");
      out.write("\tfindActionDiv : function (ele){\n");
      out.write("\t\tvar parent = ele;\n");
      out.write("\t\twhile (true) {\n");
      out.write("\t\t\tif(parent.classList.contains(\"wf-action-wrapper\")){\n");
      out.write("\t\t\t\treturn parent;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tparent = parent.parentNode;\n");
      out.write("\t\t\tif(parent == document.body){\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\treturn ;\n");
      out.write("\t},\n");
      out.write("\tconfirmDeleteAction : function(stepId, actionId, ele) {\n");
      out.write("\n");
      out.write("        let matches = document.querySelectorAll('.x' + actionId );\n");
      out.write("\t\t// we only confirm if this is the last instance of the action\n");
      out.write("\t\tvar deleteUrl = \"/DotAjaxDirector/com.dotmarketing.portlets.workflows.ajax.WfActionAjax?cmd=deleteActionForStep&actionId=\" + actionId + \"&stepId=\" + stepId ;\n");
      out.write("\t\tif(matches.length == 1) {\n");
      out.write("\t\t\tif(!confirm(\"");
      out.print(LanguageUtil.get(pageContext, "Confirm-Delete-Action"));
      out.write("\")) {\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tdeleteUrl = \"/DotAjaxDirector/com.dotmarketing.portlets.workflows.ajax.WfActionAjax?cmd=delete&actionId=\" + actionId + \"&stepId=\" + stepId ;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvar xhrArgs = {\n");
      out.write("\t\t\turl: deleteUrl ,\n");
      out.write("\t\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\t\t\t\tif (dojo.isString(dataOrError)) {\n");
      out.write("\n");
      out.write("\t\t\t\t\tif (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("\t\t\t\t\t\tshowDotCMSSystemMessage(dataOrError, true);\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tvar die = actionAdmin.findActionDiv(ele);\n");
      out.write("\t\t\t\t\t\tdie.parentNode.removeChild(die);\n");
      out.write("\t\t\t\t\t\tactionAdmin.deleteSuccess(dataOrError);\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tthis.saveError(\"");
      out.print(LanguageUtil.get(pageContext, "unable-to-save-scheme"));
      out.write("\");\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("\t\t};\n");
      out.write("\n");
      out.write("\t\tdojo.xhrPut(xhrArgs);\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tdeleteActionForStep : function (ele, stepIndex){\n");
      out.write("\n");
      out.write("\t\tvar stepId   = this.findStepId(ele);\n");
      out.write("\t\tvar actionId = this.findActionId(ele);\n");
      out.write("\n");
      out.write("\t\tif (0 == stepIndex) { // if trying to remove an action on the first step, check if the method is a default one\n");
      out.write("\n");
      out.write("\t\t\tvar xhrArgs = {\n");
      out.write("\n");
      out.write("\t\t\t\turl: \"/api/v1/workflow/system/actions/\" + actionId,\n");
      out.write("\t\t\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\n");
      out.write("\t\t\t\t\tconsole.log(\"dataOrError\", dataOrError);\n");
      out.write("\t\t\t\t\tif (dojo.isString(dataOrError)) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\tvar response = JSON.parse(dataOrError);\n");
      out.write("\t\t\t\t\t\tif (response.errors.length > 0) {\n");
      out.write("\t\t\t\t\t\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "unable-to-save-action"));
      out.write("\", true);\n");
      out.write("\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\tif (response.entity.length > 0) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\tvar owners = \"\";\n");
      out.write("\t\t\t\t\t\t\t\tfor(var i=0; i < response.entity.length; i++) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\towners += response.entity[i].owner.name + \" \";\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\tif(!confirm(`");
      out.print(LanguageUtil.get(pageContext, "Confirm-Delete-Default-Action", "${owners}"));
      out.write("`)) {\n");
      out.write("\t\t\t\t\t\t\t\t\treturn;\n");
      out.write("\t\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\tactionAdmin.confirmDeleteAction(stepId, actionId, ele);\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "unable-to-save-action"));
      out.write("\", true);\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t};\n");
      out.write("\t\t\tdojo.xhrGet(xhrArgs);\n");
      out.write("\n");
      out.write("\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\tactionAdmin.confirmDeleteAction(stepId, actionId, ele);\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\treturn;\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\n");
      out.write("\tdeleteSuccess : function(message) {\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Deleted"));
      out.write("\");\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tdeleteSuccess : function(message) {\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Deleted"));
      out.write("\");\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tviewAction : function(schemeId, actionId) {\n");
      out.write("\t\tmainAdmin.show(this.baseJsp + \"?schemeId=\" + schemeId + \"&actionId=\" + actionId + \"&\" + Math.random());\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("    addOrAssociatedAction : function(schemeId, stepId, actionsDropDownOptionsId) {\n");
      out.write("\n");
      out.write("\t\tlet actionsDropDownOptions = document.getElementById (actionsDropDownOptionsId);\n");
      out.write("\t\tlet actionId               = \"new\";\n");
      out.write("\n");
      out.write("\t\tif(actionsDropDownOptions !=null   ){\n");
      out.write("\t\t\tactionId               = actionsDropDownOptions.options[actionsDropDownOptions.selectedIndex].value;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tif ('new' === actionId) {\n");
      out.write("\t\t\tmainAdmin.show(this.baseJsp + \"?schemeId=\" + schemeId +  \"&stepId=\" + stepId + \"&actionId=\" + actionId + \"&\" + Math.random());\n");
      out.write("\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\tvar xhrArgs = {\n");
      out.write("\t\t\t\turl: \"/DotAjaxDirector/com.dotmarketing.portlets.workflows.ajax.WfStepAjax?cmd=addActionToStep&stepId=\" + stepId + \"&actionId=\" + actionId ,\n");
      out.write("\t\t\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\t\t\t\t\tif (dojo.isString(dataOrError)) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\tif (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("\t\t\t\t\t\t\tshowDotCMSSystemMessage(dataOrError, true);\n");
      out.write("\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\tmainAdmin.refresh();\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tthis.saveError(\"");
      out.print(LanguageUtil.get(pageContext, "unable-to-save-action"));
      out.write("\");\n");
      out.write("\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t};\n");
      out.write("\n");
      out.write("\t\t\tdojo.xhrPost(xhrArgs);\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\t},\n");
      out.write("\tcopyOrReorderAction : function(ele) {\n");
      out.write("\n");
      out.write("\t\tlet stepId = this.findStepId(ele);\n");
      out.write("\t\tlet stepDiv = this.findStepDiv(ele);\n");
      out.write("\t\tlet actionDiv = this.findActionDiv(ele);\n");
      out.write("\t\tlet actionId = this.findActionId(ele);\n");
      out.write("\t\tlet order=0;\n");
      out.write("\t\tlet actions = stepDiv.querySelectorAll(\".wf-action-wrapper\");\n");
      out.write("\n");
      out.write("\t\tfor(i=0;i<actions.length;i++){\n");
      out.write("\t\t\tif(actions[i] == actionDiv && order==0){\n");
      out.write("\t\t\t\torder = i;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tif(actions[i] != actionDiv && actions[i].dataset.wfactionId == ele .dataset.wfactionId){\n");
      out.write("\t\t\t\tactions[i].parentNode.removeChild(actions[i]);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvar xhrArgs = {\n");
      out.write("\t\turl: \"/DotAjaxDirector/com.dotmarketing.portlets.workflows.ajax.WfStepAjax?cmd=addActionToStep&stepId=\" + stepId + \"&actionId=\" + actionId + \"&order=\" + order,\n");
      out.write("\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\t\t\tif (dojo.isString(dataOrError)) {\n");
      out.write("\n");
      out.write("\t\t\t\tif (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("\t\t\t\t\tshowDotCMSSystemMessage(dataOrError, true);\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t//mainAdmin.refresh();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tthis.saveError(\"");
      out.print(LanguageUtil.get(pageContext, "unable-to-save-action"));
      out.write("\");\n");
      out.write("\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t};\n");
      out.write("\n");
      out.write("\tdojo.xhrPost(xhrArgs);\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\tsaveAction : function(schemeId) {\n");
      out.write("\n");
      out.write("\t\tvar myForm = dijit.byId(\"addEditAction\");\n");
      out.write("\n");
      out.write("\t\tif (myForm.validate()) {\n");
      out.write("\t\t\tdojo.xhrPost({\n");
      out.write("\t\t\t\tform : \"addEditAction\",\n");
      out.write("\t\t\t\tpreventCache:true,\n");
      out.write("\n");
      out.write("\t\t\t\ttimeout : 30000,\n");
      out.write("\t\t\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\t\t\t\t\tif (dojo.isString(dataOrError) && dataOrError) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\tif (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\tactionAdmin.saveError(dataOrError);\n");
      out.write("\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\tvar actionId  = dataOrError.split(\":\")[1];\n");
      out.write("\t\t\t\t\t\t\tactionAdmin.viewAction(schemeId, actionId);\n");
      out.write("\t\t\t\t\t\t\tshowDotCMSSystemMessage(\"Saved\");\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\tactionAdmin.saveError(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-save-action"));
      out.write("\");\n");
      out.write("\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\tsaveSuccess : function(message) {\n");
      out.write("\n");
      out.write("\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Saved"));
      out.write("\");\n");
      out.write("\t\tvar actionId  = message.split(\":\")[1];\n");
      out.write("\t\tmainAdmin.show(this.baseJsp + \"?stepId=\" + stepId + \"&actionId=\" + actionId);\n");
      out.write("\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\tsaveError : function(message) {\n");
      out.write("\t\tshowDotCMSSystemMessage(message, true);\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\n");
      out.write("\taddSelectedToWhoCanUse : function(){\n");
      out.write("\t\tvar selectWho = dijit.byId(\"whoCanUseSelect\");\n");
      out.write("\n");
      out.write("\t\tvar user = selectWho.getValue();\n");
      out.write("\t\tvar userName = selectWho.attr('displayedValue');\n");
      out.write("\n");
      out.write("        if (actionAdmin.isSet(user) && actionAdmin.isSet(userName)) {\n");
      out.write("            actionAdmin.addToWhoCanUse(user, userName);\n");
      out.write("            actionAdmin.refreshWhoCanUse();\n");
      out.write("            actionAdmin.doChange();\n");
      out.write("\n");
      out.write("        }\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\taddToWhoCanUse : function ( myId, myName){\n");
      out.write("\t\tfor(i=0;i < this.whoCanUse.length;i++){\n");
      out.write("\t\t\tif(myId == this.whoCanUse[i].id  ||  myId == \"user-\" + this.whoCanUse[i].id || myId == \"role-\" + this.whoCanUse[i].id){\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\tvar entry = {name:myName,id:myId };\n");
      out.write("\t\tthis.whoCanUse[this.whoCanUse.length] =entry;\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tremoveFromWhoCanUse: function (myId){\n");
      out.write("\n");
      out.write("\t\tvar x=0;\n");
      out.write("\t\tvar newCanUse = new Array();\n");
      out.write("\t\tfor(i=0;i < this.whoCanUse.length;i++){\n");
      out.write("\t\t\tif(myId != this.whoCanUse[i].id){\n");
      out.write("\t\t\t\tnewCanUse[x] = this.whoCanUse[i];\n");
      out.write("\t\t\t\tx++;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\t\tthis.whoCanUse= newCanUse;\n");
      out.write("\t\tactionAdmin.doChange();\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\trefreshWhoCanUse : function (){\n");
      out.write("\t\tdojo.empty(\"whoCanUseTbl\");\n");
      out.write("\t\tvar table = dojo.byId(\"whoCanUseTbl\");\n");
      out.write("\t\tvar x = \"\";\n");
      out.write("\n");
      out.write("\t\tthis.whoCanUse = this.whoCanUse.sort(function(a,b){\n");
      out.write("\t\t\tvar x = a.name.toLowerCase();\n");
      out.write("\t\t    var y = b.name.toLowerCase();\n");
      out.write("\t\t    return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n");
      out.write("\t\t});\n");
      out.write("\t\tfor(i=0; i< this.whoCanUse.length ; i++){\n");
      out.write("\t\t\tvar what = (this.whoCanUse[i].id.indexOf(\"user\") > -1) ? \" (");
      out.print(LanguageUtil.get(pageContext, "User"));
      out.write(")\" : \"\";\n");
      out.write("\t\t\tx = x + this.whoCanUse[i].id + \",\";\n");
      out.write("\t\t\tvar tr = dojo.create(\"tr\", null, table);\n");
      out.write("\t\t\tdojo.create(\"td\", { innerHTML: \"<span class='deleteIcon'></span>\",className:\"wfXBox\", onClick:\"actionAdmin.removeFromWhoCanUse('\" + this.whoCanUse[i].id +\"');actionAdmin.refreshWhoCanUse()\" }, tr);\n");
      out.write("\t\t\tdojo.create(\"td\", { innerHTML: this.whoCanUse[i].name + what}, tr);\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\t\tdojo.query('#whoCanUse').val(x);\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\tdoChange: function(){\n");
      out.write("\t\tdojo.attr(\"saveButtonDiv\",\"className\", \"saveButtonDivShow\");\n");
      out.write("\t\tvar x = dijit.byId(\"actionAssignToSelect\");\n");
      out.write("\t\tif(!x || x == undefined || !x.displayedValue || x.displayedValue==undefined){\n");
      out.write("\t\t\treturn;\n");
      out.write("\t\t}\n");
      out.write("\t\tif(dijit.byId(\"actionAssignable\").getValue()){\n");
      out.write("\t\t\tif(x.displayedValue.indexOf(\"(");
      out.print(LanguageUtil.get(pageContext, "User"));
      out.write(")\") > -1 || x.displayedValue.indexOf(\"");
      out.print(LanguageUtil.get(pageContext, "current-user"));
      out.write("\") >-1){\n");
      out.write("          \t\tif(dijit.byId(\"actionRoleHierarchyForAssign\")){\n");
      out.write("          \t\t\tdijit.byId(\"actionRoleHierarchyForAssign\").setValue(false);\n");
      out.write("          \t\t}\n");
      out.write("          \t\tdojo.style(\"divRoleHierarchyForAssign\", \"display\", \"none\");\n");
      out.write("\t\t\t}\n");
      out.write("        \telse{\n");
      out.write("          \t\tdojo.style(\"divRoleHierarchyForAssign\", \"display\", \"block\");\n");
      out.write("      \t\t}\n");
      out.write("      \t}else{\n");
      out.write("       \t\tdojo.style(\"divRoleHierarchyForAssign\", \"display\", \"none\");\n");
      out.write("      \t}\n");
      out.write("\t},\n");
      out.write("    isSet: function (toValidate) {\n");
      out.write("        if (toValidate == null || toValidate == undefined || toValidate == \"\") {\n");
      out.write("            return false;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        return true;\n");
      out.write("    }\n");
      out.write("});\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("//\n");
      out.write("//\n");
      out.write("//\n");
      out.write("//\n");
      out.write("// -------------------- ActionClass And Parameters Admin --------------------\n");
      out.write("//\n");
      out.write("//\n");
      out.write("//\n");
      out.write("//\n");
      out.write("\n");
      out.write("dojo.declare(\"dotcms.dijit.workflows.ActionClassAdmin\", null, {\n");
      out.write("\n");
      out.write("\tmyDnD : null,\n");
      out.write("\tinitDnD : function () {\n");
      out.write("\n");
      out.write("\t\t// Clean up existing and not longer valid dnd source instances\n");
      out.write("\t\tif (null !== actionClassAdmin.myDnD) {\n");
      out.write("\t\t\tactionClassAdmin.myDnD.destroy();\n");
      out.write("\t\t\tactionClassAdmin.myDnD = null;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t// Creating a new dnd source instance\n");
      out.write("\t\tactionClassAdmin.myDnD = new dojo.dnd.Source(\"actionletsTblBody\", {autoSync : true});\n");
      out.write("\t\tactionClassAdmin.myDnD.on(\"DndDrop\", actionClassAdmin.reorderActionClasses);\n");
      out.write("\t},\n");
      out.write("\n");
      out.write("\tactionClasses : [],\n");
      out.write("\taddSelectedToActionClasses : function(){\n");
      out.write("\t\tvar select = dijit.byId(\"wfActionlets\");\n");
      out.write("\n");
      out.write("\t\tvar clazz = select.getValue();\n");
      out.write("\t\tvar name = select.attr('displayedValue');\n");
      out.write("        if(clazz.length>0){\n");
      out.write("\t\t   this.addActionClass(clazz, name);\n");
      out.write("\t\t   select.setValue(\"\");\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("    /**\n");
      out.write("     * Add subaction into the system (using ajax) and table\n");
      out.write("     */\n");
      out.write("    addActionClass : function (clazz, myName){\n");
      out.write("        var actionId = dojo.byId(\"actionId\").value;\n");
      out.write("\n");
      out.write("        var xhrArgs = {\n");
      out.write("                url: \"/DotAjaxDirector/com.dotmarketing.portlets.workflows.ajax.WfActionClassAjax\",\n");
      out.write("                content: {\n");
      out.write("                  cmd: \"add\",\n");
      out.write("                  actionId: actionId,\n");
      out.write("                  actionletClass: clazz,\n");
      out.write("                  actionletName: myName\n");
      out.write("                },\n");
      out.write("                handle : function(dataOrError, ioArgs) {\n");
      out.write("                    if (dojo.isString(dataOrError)) {\n");
      out.write("                        if (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("                            showDotCMSSystemMessage(dataOrError, true);\n");
      out.write("                        } else {\n");
      out.write("                            var x = dataOrError.split(\":\");\n");
      out.write("                            var entry = {id:x[0], name:x[1]};\n");
      out.write("                            actionClassAdmin.actionClasses.push(entry);\n");
      out.write("\n");
      out.write("                            actionClassAdmin.refreshActionClasses();\n");
      out.write("                            //showDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Added"));
      out.write("\", false);\n");
      out.write("                        }\n");
      out.write("                    } else {\n");
      out.write("                        showDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-save-subaction"));
      out.write("\", true);\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            };\n");
      out.write("            dojo.xhrPost(xhrArgs);\n");
      out.write("    },\n");
      out.write("    /**\n");
      out.write("     * Delete subaction from the system (using ajax) and table\n");
      out.write("     */\n");
      out.write("    deleteActionClass : function (actionClassId){\n");
      out.write("        if(!confirm(\"");
      out.print(LanguageUtil.get(pageContext, "Confirm-Delete-Subaction"));
      out.write("\")){\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var xhrArgs = {\n");
      out.write("             url: \"/DotAjaxDirector/com.dotmarketing.portlets.workflows.ajax.WfActionClassAjax?cmd=delete&actionClassId=\" + actionClassId ,\n");
      out.write("            handle : function(dataOrError, ioArgs) {\n");
      out.write("                if (dojo.isString(dataOrError)) {\n");
      out.write("                    if (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("                        showDotCMSSystemMessage(dataOrError, true);\n");
      out.write("                    } else {\n");
      out.write("                        actionClassAdmin.removeFromActionClasses(actionClassId);\n");
      out.write("\n");
      out.write("                        // Refresh table\n");
      out.write("                        actionClassAdmin.refreshActionClasses();\n");
      out.write("                        showDotCMSSystemMessage(\"Deleted\");\n");
      out.write("                    }\n");
      out.write("                } else {\n");
      out.write("                    showDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-delete-subaction"));
      out.write("\", true);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        };\n");
      out.write("        dojo.xhrPut(xhrArgs);\n");
      out.write("\n");
      out.write("        return;\n");
      out.write("    },\n");
      out.write("    /**\n");
      out.write("     * Delete action class using id.\n");
      out.write("     *\n");
      out.write("     * @returns null if action class not found, otherwise the action class object\n");
      out.write("     */\n");
      out.write("    removeFromActionClasses: function (actionClassId) {\n");
      out.write("        var deletedActionClass = null;\n");
      out.write("\n");
      out.write("        // Find action class with id in actions array\n");
      out.write("        var actionClassPosition = -1;\n");
      out.write("        dojo.forEach(actionClassAdmin.actionClasses, function(entry, i){\n");
      out.write("            if(actionClassId == entry.id){\n");
      out.write("                deletedActionClass = entry;\n");
      out.write("                actionClassPosition = i;\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        // Delete action class with position\n");
      out.write("        if(actionClassPosition != -1) {\n");
      out.write("            actionClassAdmin.actionClasses.splice(actionClassPosition, 1);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        return deletedActionClass;\n");
      out.write("\t},\n");
      out.write("\t/**\n");
      out.write("\t * Method to reorder the action classes array\n");
      out.write("\t */\n");
      out.write("    moveFromActionClasses: function (actionClassId, newOrder) {\n");
      out.write("        if(actionClassAdmin.actionClasses.length > 1) {\n");
      out.write("            var deletedActionClass = actionClassAdmin.removeFromActionClasses(actionClassId);\n");
      out.write("            actionClassAdmin.actionClasses.splice(newOrder, 0, deletedActionClass);\n");
      out.write("        }\n");
      out.write("    },\n");
      out.write("    /**\n");
      out.write("     * Method that recreates table from action class array. Also add drag and drop events to the table\n");
      out.write("     */\n");
      out.write("    refreshActionClasses : function (){\n");
      out.write("        if(!dojo.byId(\"actionletsTbl\")){\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var tbody = dojo.byId(\"actionletsTblBody\");\n");
      out.write("        dojo.empty(tbody);\n");
      out.write("\n");
      out.write("        dojo.forEach(actionClassAdmin.actionClasses, function(entry, i){\n");
      out.write("            var tr = dojo.create(\"tr\", {className:\"dojoDndItem dndMyActionClasses\", id:\"myRow\" + entry.id}, tbody);\n");
      out.write("\n");
      out.write("            dojo.create(\"td\", { innerHTML: \"<span class='deleteIcon'></span>\",className:\"wfXBox\", onClick:\"actionClassAdmin.deleteActionClass('\" + entry.id +\"');\" }, tr);\n");
      out.write("            dojo.create(\"td\", { innerHTML: entry.name, onClick:\"actionClassAdmin.manageParams('\" + entry.id + \"');\", className:\"showPointer\" }, tr);\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        if(actionClassAdmin.actionClasses.length == 0){\n");
      out.write("            var tr = dojo.create(\"tr\", null, tbody);\n");
      out.write("            dojo.create(\"td\", { colSpan: 2, className:\"wfnoSubActions\", innerHTML:\"");
      out.print(LanguageUtil.get(pageContext, "No-Sub-Actions-Configured"));
      out.write("\" }, tr);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        actionClassAdmin.initDnD();\n");
      out.write("    },\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     * Update order into the system\n");
      out.write("     */\n");
      out.write("\treorderActionClasses : function(source, nodes, copy){\n");
      out.write("\t\tvar actionClassId=source.anchor.id.replace(\"myRow\", \"\");\n");
      out.write("\t\tvar order=0;\n");
      out.write("\t\tvar i = 0;\n");
      out.write("\t\tvar x = dojo.query(\"#actionletsTbl tbody tr\").forEach(function(node){\n");
      out.write("\t\t\tif(node.id == nodes[0].id){\n");
      out.write("\t\t\t\torder=i;\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\ti++;\n");
      out.write("\n");
      out.write("\t\t})\n");
      out.write("\n");
      out.write("\t\tvar xhrArgs = {\n");
      out.write("\t\t\t\t url: \"/DotAjaxDirector/com.dotmarketing.portlets.workflows.ajax.WfActionClassAjax?cmd=reorder&actionClassId=\" + actionClassId + \"&order=\" + order,\n");
      out.write("\t\t\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\n");
      out.write("\t\t\t\t\tif (dojo.isString(dataOrError)) {\n");
      out.write("\t\t\t\t\t\tif (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("\t\t\t\t\t\t\tshowDotCMSSystemMessage(dataOrError, true);\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\telse{\n");
      out.write("\t\t\t\t\t\t\t// We need to reorder the \"Action Classes\" array when an element is moved to a\n");
      out.write("\t\t\t\t\t\t\t// different position\n");
      out.write("\t\t\t\t\t\t\tactionClassAdmin.moveFromActionClasses(nodes[0].id.replace(\"myRow\", \"\"), order);\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Unable-to-reorder"));
      out.write("\", true);\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t};\n");
      out.write("\t\t\tdojo.xhrGet(xhrArgs);\n");
      out.write("\n");
      out.write("\t\t\treturn;\n");
      out.write("\t},\n");
      out.write("\tmanageParams : function (actionClassId){\n");
      out.write("\n");
      out.write("\t\tvar dia = dijit.byId(\"actionClassParamsDia\");\n");
      out.write("\t\tif(dia){\n");
      out.write("\t\t\tdia.destroyRecursive();\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\t\tdia = new dijit.Dialog({\n");
      out.write("\t\t\tid\t\t\t:\t\"actionClassParamsDia\",\n");
      out.write("\t\t\ttitle\t\t: \t\"");
      out.print(LanguageUtil.get(pageContext, "Sub-Action-Parameters"));
      out.write("\",\n");
      out.write("\t\t\thref \t\t: \"/html/portlet/ext/workflows/schemes/view_action_class_params.jsp?actionClassId=\" + actionClassId\n");
      out.write("\t\t});\n");
      out.write("\n");
      out.write("\t\tdojo.body().appendChild(dia.domNode);\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tdia.show();\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t},\n");
      out.write("\tsaveActionParameters : function() {\n");
      out.write("\n");
      out.write("\t\tvar myForm = dijit.byId(\"ActionClassParamsFrm\");\n");
      out.write("\n");
      out.write("\t\tif (myForm.validate()) {\n");
      out.write("\n");
      out.write("\t\t\tdojo.xhrPost({\n");
      out.write("\t\t\t\tform : \"ActionClassParamsFrm\",\n");
      out.write("\t\t\t\ttimeout : 30000,\n");
      out.write("\t\t\t\thandle : function(dataOrError, ioArgs) {\n");
      out.write("\t\t\t\t\tif (dojo.isString(dataOrError)) {\n");
      out.write("\t\t\t\t\t\tif (dataOrError.indexOf(\"FAILURE\") == 0) {\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\tshowDotCMSSystemMessage(dataOrError, true);\n");
      out.write("\t\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t\tshowDotCMSSystemMessage(\"");
      out.print(LanguageUtil.get(pageContext, "Saved"));
      out.write("\", false);\n");
      out.write("\t\t\t\t\t\t\tdijit.byId(\"actionClassParamsDia\").destroyRecursive();\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\tshowDotCMSSystemMessage(dataOrError, true);\n");
      out.write("\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\n");
      out.write("\n");
      out.write("\t\t};\n");
      out.write("\t}\n");
      out.write("});\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("var myRoleReadStore = new dotcms.dojo.data.RoleReadStore({nodeId: \"actionAssignToSelect\"});\n");
      out.write("var myRoleReadStore2 = new dotcms.dojo.data.RoleReadStore({nodeId: \"whoCanUseSelect\",includeWfRoles: \"true\"});\n");
      out.write("var myRoleReadStoreFilter = new dotcms.dojo.data.RoleReadStore({nodeId: \"whoCanUseSelect\", includeWfRoles: \"true\", includeLabelAll:true});\n");
      out.write("\n");
      out.write("var myIconStore = new dojo.data.ItemFileReadStore({data:\n");
      out.write("\t");
      out.write("{\n");
      out.write("\t\"identifier\":\"value\", \n");
      out.write("\t\"label\":\"label\",\n");
      out.write("\t\"items\":[\n");
      out.write("\t\t\t{\"value\":\"plusIcon\",\"label\":\"<span class='iconSelect plusIcon'></span>plus\"},\n");
      out.write("\t\t\t{\"value\":\"addIcon\",\"label\":\"<span class='iconSelect addIcon'></span>add\"},\n");
      out.write("\t\t\t{\"value\":\"minusIcon\",\"label\":\"<span class='iconSelect minusIcon'></span>minus\"},\n");
      out.write("\t\t\t{\"value\":\"searchIcon\",\"label\":\"<span class='iconSelect searchIcon'></span>search\"},\n");
      out.write("\t\t\t{\"value\":\"deleteIcon\",\"label\":\"<span class='iconSelect deleteIcon'></span>delete\"},\n");
      out.write("\t\t\t{\"value\":\"editIcon\",\"label\":\"<span class='iconSelect editIcon'></span>edit\"},\n");
      out.write("\t\t\t{\"value\":\"resetIcon\",\"label\":\"<span class='iconSelect resetIcon'></span>reset\"},\n");
      out.write("\t\t\t{\"value\":\"cancelIcon\",\"label\":\"<span class='iconSelect cancelIcon'></span>cancel\"},\n");
      out.write("\t\t\t{\"value\":\"repeatIcon\",\"label\":\"<span class='iconSelect repeatIcon'></span>repeat\"},\n");
      out.write("\t\t\t{\"value\":\"reorderIcon\",\"label\":\"<span class='iconSelect reorderIcon'></span>reorder\"},\n");
      out.write("\t\t\t{\"value\":\"saveIcon\",\"label\":\"<span class='iconSelect saveIcon'></span>save\"},\n");
      out.write("\t\t\t{\"value\":\"copyIcon\",\"label\":\"<span class='iconSelect copyIcon'></span>copy\"},\n");
      out.write("\t\t\t{\"value\":\"browseIcon\",\"label\":\"<span class='iconSelect browseIcon'></span>browse\"},\n");
      out.write("\t\t\t{\"value\":\"mailListIcon\",\"label\":\"<span class='iconSelect mailListIcon'></span>mailList\"},\n");
      out.write("\t\t\t{\"value\":\"spellIcon\",\"label\":\"<span class='iconSelect spellIcon'></span>spell\"},\n");
      out.write("\t\t\t{\"value\":\"editScriptIcon\",\"label\":\"<span class='iconSelect editScriptIcon'></span>editScript\"},\n");
      out.write("\t\t\t{\"value\":\"lockIcon\",\"label\":\" <span class='iconSelect lockIcon'></span>lock\"},\n");
      out.write("\t\t\t{\"value\":\"unlockIcon\",\"label\":\"<span class='iconSelect unlockIcon'></span>unlock\"},\n");
      out.write("\t\t\t{\"value\":\"uploadIcon\",\"label\":\"<span class='iconSelect uploadIcon'></span>upload\"},\n");
      out.write("\t\t\t{\"value\":\"downloadIcon\",\"label\":\"<span class='iconSelect downloadIcon'></span>download\"},\n");
      out.write("\t\t\t{\"value\":\"closeIcon\",\"label\":\"<span class='iconSelect closeIcon'></span>close\"},\n");
      out.write("\t\t\t{\"value\":\"stopIcon\",\"label\":\"<span class='iconSelect stopIcon'></span>stop\"},\n");
      out.write("\t\t\t{\"value\":\"previewIcon\",\"label\":\"<span class='iconSelect previewIcon'></span>preview\"},\n");
      out.write("\t\t\t{\"value\":\"hideIcon\",\"label\":\"<span class='iconSelect hideIcon'></span>hide\"},\n");
      out.write("\t\t\t{\"value\":\"keyIcon\",\"label\":\"<span class='iconSelect keyIcon'></span>key\"},\n");
      out.write("\t\t\t{\"value\":\"infoIcon\",\"label\":\"<span class='iconSelect infoIcon'></span>info\"},\n");
      out.write("\t\t\t{\"value\":\"publishIcon\",\"label\":\"<span class='iconSelect publishIcon'></span>publish\"},\n");
      out.write("\t\t\t{\"value\":\"hostStoppedIcon\",\"label\":\"<span class='iconSelect hostStoppedIcon'></span>hostStopped\"},\n");
      out.write("\t\t\t{\"value\":\"republishIcon\",\"label\":\"<span class='iconSelect republishIcon'></span>republish\"},\n");
      out.write("\t\t\t{\"value\":\"unpublishIcon\",\"label\":\"<span class='iconSelect unpublishIcon'></span>unpublish\"},\n");
      out.write("\t\t\t{\"value\":\"hostDefaultIcon\",\"label\":\"<span class='iconSelect hostDefaultIcon'></span>hostDefault\"},\n");
      out.write("\t\t\t{\"value\":\"hostArchivedIcon\",\"label\":\"<span class='iconSelect hostArchivedIcon'></span>hostArchived\"},\n");
      out.write("\t\t\t{\"value\":\"helpIcon\",\"label\":\"<span class='iconSelect helpIcon'></span>help\"},\n");
      out.write("\t\t\t{\"value\":\"bugIcon\",\"label\":\"<span class='iconSelect bugIcon'></span>bug\"},\n");
      out.write("\t\t\t{\"value\":\"pageIcon\",\"label\":\"<span class='iconSelect pageIcon'></span>page\"},\n");
      out.write("\t\t\t{\"value\":\"newPageIcon\",\"label\":\"<span class='iconSelect newPageIcon'></span>newPage\"},\n");
      out.write("\t\t\t{\"value\":\"movePageIcon\",\"label\":\"<span class='iconSelect movePageIcon'></span>movePage\"},\n");
      out.write("\t\t\t{\"value\":\"pushIcon\",\"label\":\"<span class='iconSelect pushIcon'></span>push\"},\n");
      out.write("\t\t\t{\"value\":\"bundleIcon\",\"label\":\"<span class='iconSelect bundleIcon'></span>bundle\"},\n");
      out.write("\t\t\t{\"value\":\"cutIcon\",\"label\":\"<span class='iconSelect cutIcon'></span>cut\"},\n");
      out.write("\t\t\t{\"value\":\"userIcon\",\"label\":\"<span class='iconSelect userIcon'></span>user\"},\n");
      out.write("\t\t\t{\"value\":\"loginAsIcon\",\"label\":\"<span class='iconSelect loginAsIcon'></span>loginAs\"},\n");
      out.write("\t\t\t{\"value\":\"femaleIcon\",\"label\":\"<span class='iconSelect femaleIcon'></span>female\"},\n");
      out.write("\t\t\t{\"value\":\"archiveIcon\",\"label\":\"<span class='iconSelect archiveIcon'></span>archive\"},\n");
      out.write("\t\t\t{\"value\":\"unarchiveIcon\",\"label\":\"<span class='iconSelect unarchiveIcon'></span>unarchive\"},\n");
      out.write("\t\t\t{\"value\":\"workflowIcon\",\"label\":\"<span class='iconSelect workflowIcon'></span>workflow\"},\n");
      out.write("\t\t\t{\"value\":\"resolveWorkflowIcon\",\"label\":\"<span class='iconSelect resolveWorkflowIcon'></span>resolveWorkflow\"},\n");
      out.write("\t\t\t{\"value\":\"newWorkflowIcon\",\"label\":\"<span class='iconSelect newWorkflowIcon'></span>newWorkflow\"},\n");
      out.write("\t\t\t{\"value\":\"newTaskIcon\",\"label\":\"<span class='iconSelect newTaskIcon'></span>newTask\"},\n");
      out.write("\t\t\t{\"value\":\"deleteWorkflowIcon\",\"label\":\"<span class='iconSelect deleteWorkflowIcon'></span>deleteWorkflow\"},\n");
      out.write("\t\t\t{\"value\":\"cancelWorkflowIcon\",\"label\":\"<span class='iconSelect cancelWorkflowIcon'></span>cancelWorkflow\"},\n");
      out.write("\t\t\t{\"value\":\"reopenWorkflowIcon\",\"label\":\"<span class='iconSelect reopenWorkflowIcon'></span>reopenWorkflow\"},\n");
      out.write("\t\t\t{\"value\":\"assignWorkflowIcon\",\"label\":\"<span class='iconSelect assignWorkflowIcon'></span>assignWorkflow\"},\n");
      out.write("\t\t\t{\"value\":\"saveAssignIcon\",\"label\":\"<span class='iconSelect saveAssignIcon'></span>saveAssign\"},\n");
      out.write("\t\t\t{\"value\":\"calMonthIcon\",\"label\":\"<span class='iconSelect calMonthIcon'></span>calMonth\"},\n");
      out.write("\t\t\t{\"value\":\"calDayIcon\",\"label\":\"<span class='iconSelect calDayIcon'></span>calDay\"},\n");
      out.write("\t\t\t{\"value\":\"calWeekIcon\",\"label\":\"<span class='iconSelect calWeekIcon'></span>calWeek\"},\n");
      out.write("\t\t\t{\"value\":\"calClockIcon\",\"label\":\"<span class='iconSelect calClockIcon'></span>calClock\"},\n");
      out.write("\t\t\t{\"value\":\"calListIcon\",\"label\":\"<span class='iconSelect calListIcon'></span>calList\"},\n");
      out.write("\t\t\t{\"value\":\"chevronIcon\",\"label\":\"<span class='iconSelect chevronIcon'></span>chevron\"},\n");
      out.write("\t\t\t{\"value\":\"chevronExpandIcon\",\"label\":\"<span class='iconSelect chevronExpandIcon'></span>chevronExpand\"},\n");
      out.write("\t\t\t{\"value\":\"linkIcon\",\"label\":\"<span class='iconSelect linkIcon'></span>link\"},\n");
      out.write("\t\t\t{\"value\":\"resolveIcon\",\"label\":\"<span class='iconSelect resolveIcon'></span>resolve\"},\n");
      out.write("\t\t\t{\"value\":\"exclamation\",\"label\":\"<span class='iconSelect exclamation'></span>exclamation\"},\n");
      out.write("\t\t\t{\"value\":\"exclamation-red\",\"label\":\"<span class='iconSelect exclamation-red'></span>exclamation-red\"},\n");
      out.write("\t\t\t{\"value\":\"imageNewIcon\",\"label\":\"<span class='iconSelect imageNewIcon'></span>imageNew\"},\n");
      out.write("\t\t\t{\"value\":\"trashIcon\",\"label\":\"<span class='iconSelect trashIcon'></span>trash\"},\n");
      out.write("\t\t\t{\"value\":\"statisticsIcon\",\"label\":\"<span class='iconSelect statisticsIcon'></span>statistics\"},\n");
      out.write("\t\t\t{\"value\":\"linkAddIcon\",\"label\":\"<span class='iconSelect linkAddIcon'></span>linkAdd\"},\n");
      out.write("\t\t\t{\"value\":\"fileNewIcon\",\"label\":\"<span class='iconSelect fileNewIcon'></span>fileNew\"},\n");
      out.write("\t\t\t{\"value\":\"fileMultiIcon\",\"label\":\"<span class='iconSelect fileMultiIcon'></span>fileMulti\"},\n");
      out.write("\t\t\t{\"value\":\"nextIcon\",\"label\":\"<span class='iconSelect nextIcon'></span>next\"},\n");
      out.write("\t\t\t{\"value\":\"previousIcon\",\"label\":\"<span class='iconSelect previousIcon'></span>previous\"},\n");
      out.write("\t\t\t{\"value\":\"folderIcon\",\"label\":\"<span class='iconSelect folderIcon'></span>folder\"},\n");
      out.write("\t\t\t{\"value\":\"folderAddIcon\",\"label\":\"<span class='iconSelect folderAddIcon'></span>folderAdd\"},\n");
      out.write("\t\t\t{\"value\":\"folderEditIcon\",\"label\":\"<span class='iconSelect folderEditIcon'></span>folderEdit\"},\n");
      out.write("\t\t\t{\"value\":\"folderDeleteIcon\",\"label\":\"<span class='iconSelect folderDeleteIcon'></span>folderDelete\"},\n");
      out.write("\t\t\t{\"value\":\"folderFilesIcon\",\"label\":\"<span class='iconSelect folderFilesIcon'></span>folderFiles\"},\n");
      out.write("\t\t\t{\"value\":\"folderGlobeIcon\",\"label\":\"<span class='iconSelect folderGlobeIcon'></span>folderGlobe\"},\n");
      out.write("\t\t\t{\"value\":\"folderCopyIcon\",\"label\":\"<span class='iconSelect folderCopyIcon'></span>folderCopy\"},\n");
      out.write("\t\t\t{\"value\":\"pasteIcon\",\"label\":\"<span class='iconSelect pasteIcon'></span>paste\"},\n");
      out.write("\t\t\t{\"value\":\"folderSelectedIcon\",\"label\":\"<span class='iconSelect folderSelectedIcon'></span>folderSelected\"},\n");
      out.write("\t\t\t{\"value\":\"folderOpenIcon\",\"label\":\"<span class='iconSelect folderOpenIcon'></span>folderOpen\"},\n");
      out.write("\t\t\t{\"value\":\"pagePropIcon\",\"label\":\"<span class='iconSelect pagePropIcon'></span>pageProp\"},\n");
      out.write("\t\t\t{\"value\":\"arrowLeftIcon\",\"label\":\"<span class='iconSelect arrowLeftIcon'></span>arrowLeft\"},\n");
      out.write("\t\t\t{\"value\":\"arrowRightIcon\",\"label\":\"<span class='iconSelect arrowRightIcon'></span>arrowRight\"},\n");
      out.write("\t\t\t{\"value\":\"toggleOpenIcon\",\"label\":\"<span class='iconSelect toggleOpenIcon'></span>toggleOpen\"},\n");
      out.write("\t\t\t{\"value\":\"toggleCloseIcon\",\"label\":\"<span class='iconSelect toggleCloseIcon'></span>toggleClose\"},\n");
      out.write("\t\t\t{\"value\":\"formNewIcon\",\"label\":\"<span class='iconSelect formNewIcon'></span>formNew\"},\n");
      out.write("\t\t\t{\"value\":\"hourGlassIcon\",\"label\":\"<span class='iconSelect hourGlassIcon'></span>hourGlass\"},\n");
      out.write("\t\t\t{\"value\":\"docCopyIcon\",\"label\":\"<span class='iconSelect docCopyIcon'></span>docCopy\"},\n");
      out.write("\t\t\t{\"value\":\"documentIcon\",\"label\":\"<span class='iconSelect documentIcon'></span>document\"},\n");
      out.write("\t\t\t{\"value\":\"cartIcon\",\"label\":\"<span class='iconSelect cartIcon'></span>cart\"},\n");
      out.write("\t\t\t{\"value\":\"fixIcon\",\"label\":\"<span class='iconSelect fixIcon'></span>fix\"},\n");
      out.write("\t\t\t{\"value\":\"dropIcon\",\"label\":\"<span class='iconSelect dropIcon'></span>drop\"},\n");
      out.write("\t\t\t{\"value\":\"backupIcon\",\"label\":\"<span class='iconSelect backupIcon'></span>backup\"},\n");
      out.write("\t\t\t{\"value\":\"shrinkIcon\",\"label\":\"<span class='iconSelect shrinkIcon'></span>shrink\"},\n");
      out.write("\t\t\t{\"value\":\"reindexIcon\",\"label\":\"<span class='iconSelect reindexIcon'></span>reindex\"},\n");
      out.write("\t\t\t{\"value\":\"liveIcon\",\"label\":\"<span class='iconSelect liveIcon'></span>live\"},\n");
      out.write("\t\t\t{\"value\":\"workingIcon\",\"label\":\"<span class='iconSelect workingIcon'></span>working\"},\n");
      out.write("\t\t\t{\"value\":\"archivedIcon\",\"label\":\"<span class='iconSelect archivedIcon'></span>archived\"},\n");
      out.write("\t\t\t{\"value\":\"greyDotIcon\",\"label\":\"<span class='iconSelect greyDotIcon'></span>greyDot\"},\n");
      out.write("\t\t\t{\"value\":\"gearIcon\",\"label\":\"<span class='iconSelect gearIcon'></span>gear\"},\n");
      out.write("\t\t\t{\"value\":\"gearPlusIcon\",\"label\":\"<span class='iconSelect gearPlusIcon'></span>gearPlus\"},\n");
      out.write("\t\t\t{\"value\":\"gearMinusIcon\",\"label\":\"<span class='iconSelect gearMinusIcon'></span>gearMinus\"},\n");
      out.write("\t\t\t{\"value\":\"gearPencilIcon\",\"label\":\"<span class='iconSelect gearPencilIcon'></span>gearPencil\"},\n");
      out.write("\t\t\t{\"value\":\"required\",\"label\":\"<span class='iconSelect required'></span>required\"},\n");
      out.write("\t\t\t{\"value\":\"queryIcon\",\"label\":\"<span class='iconSelect queryIcon'></span>query\"},\n");
      out.write("\t\t\t{\"value\":\"thumbnailViewIcon\",\"label\":\"<span class='iconSelect thumbnailViewIcon'></span>thumbnailView\"},\n");
      out.write("\t\t\t{\"value\":\"detailViewIcon\",\"label\":\"<span class='iconSelect detailViewIcon'></span>detailView\"},\n");
      out.write("\t\t\t{\"value\":\"listViewIcon\",\"label\":\"<span class='iconSelect listViewIcon'></span>listView\"},\n");
      out.write("\t\t\t{\"value\":\"docConvertIcon\",\"label\":\"<span class='iconSelect docConvertIcon'></span>docConvert\"},\n");
      out.write("\t\t\t{\"value\":\"tagIcon\",\"label\":\"<span class='iconSelect tagIcon'></span>tag\"},\n");
      out.write("\t\t\t{\"value\":\"mapPinIcon\",\"label\":\"<span class='iconSelect mapPinIcon'></span>mapPin\"},\n");
      out.write("\t\t\t{\"value\":\"docNumIcon\",\"label\":\"<span class='iconSelect docNumIcon'></span>docNum\"},\n");
      out.write("\t\t\t{\"value\":\"tabIcon\",\"label\":\"<span class='iconSelect tabIcon'></span>tab\"},\n");
      out.write("\t\t\t{\"value\":\"checkBoxIcon\",\"label\":\"<span class='iconSelect checkBoxIcon'></span>checkBox\"},\n");
      out.write("\t\t\t{\"value\":\"textFieldIcon\",\"label\":\"<span class='iconSelect textFieldIcon'></span>textField\"},\n");
      out.write("\t\t\t{\"value\":\"propertyIcon\",\"label\":\"<span class='iconSelect propertyIcon'></span>property\"},\n");
      out.write("\t\t\t{\"value\":\"scrollPaneIcon\",\"label\":\"<span class='iconSelect scrollPaneIcon'></span>scrollPane\"},\n");
      out.write("\t\t\t{\"value\":\"wysiwygIcon\",\"label\":\"<span class='iconSelect wysiwygIcon'></span>wysiwyg\"},\n");
      out.write("\t\t\t{\"value\":\"docTextIcon\",\"label\":\"<span class='iconSelect docTextIcon'></span>docText\"},\n");
      out.write("\t\t\t{\"value\":\"splitterIcon\",\"label\":\"<span class='iconSelect splitterIcon'></span>splitter\"},\n");
      out.write("\t\t\t{\"value\":\"radioIcon\",\"label\":\"<span class='iconSelect radioIcon'></span>radio\"},\n");
      out.write("\t\t\t{\"value\":\"multiSelectIcon\",\"label\":\"<span class='iconSelect multiSelectIcon'></span>multiSelect\"},\n");
      out.write("\t\t\t{\"value\":\"selectIcon\",\"label\":\"<span class='iconSelect selectIcon'></span>select\"},\n");
      out.write("\t\t\t{\"value\":\"appMonitorIcon\",\"label\":\"<span class='iconSelect appMonitorIcon'></span>appMonitor\"},\n");
      out.write("\t\t\t{\"value\":\"workStreamIcon\",\"label\":\"<span class='iconSelect workStreamIcon'></span>workStream\"},\n");
      out.write("\t\t\t{\"value\":\"rememberIcon\",\"label\":\"<span class='iconSelect rememberIcon'></span>remember\"},\n");
      out.write("\t\t\t{\"value\":\"uknIcon\",\"label\":\"<span class='iconSelect uknIcon'></span>ukn\"},\n");
      out.write("\t\t\t{\"value\":\"exclamationIcon\",\"label\":\"<span class='iconSelect exclamationIcon'></span>exclamation\"},\n");
      out.write("\t\t\t{\"value\":\"twitterIcon\",\"label\":\"<span class='iconSelect twitterIcon'></span>twitter\"},\n");
      out.write("\t\t\t{\"value\":\"keyvalueIcon\",\"label\":\"<span class='iconSelect keyvalueIcon'></span>keyvalue\"}\n");
      out.write("\t]\n");
      out.write("}");
      out.write("\n");
      out.write("});\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("var mainAdmin = new dotcms.dijit.workflows.MainAdmin({});\n");
      out.write("var schemeAdmin = new dotcms.dijit.workflows.SchemeAdmin({});\n");
      out.write("var stepAdmin = new dotcms.dijit.workflows.StepAdmin({});\n");
      out.write("var actionAdmin = new dotcms.dijit.workflows.ActionAdmin({});\n");
      out.write("var actionClassAdmin = new dotcms.dijit.workflows.ActionClassAdmin({});\n");
      out.write("dojo.ready(function() {\n");
      out.write("\tvar myHash = decodeURIComponent(dojo.hash());\n");
      out.write("\tif(myHash && myHash.length > 0){\n");
      out.write("\t\tmainAdmin.show(myHash);\n");
      out.write("\t}else{\n");
      out.write("\t\tschemeAdmin.show();\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("});\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
