/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2019-11-28 18:43:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.es_002dsearch;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.dotmarketing.portlets.contentlet.business.ContentletAPI;
import com.liferay.util.Validator;
import com.dotcms.content.elasticsearch.business.ESSearchResults;
import org.elasticsearch.search.suggest.term.TermSuggestion.*;
import org.elasticsearch.search.suggest.term.TermSuggestion;
import org.elasticsearch.search.suggest.Suggest;
import org.elasticsearch.search.suggest.Suggest.*;
import com.dotcms.content.elasticsearch.business.ESContentletAPIImpl;
import java.util.List;
import com.dotmarketing.business.APILocator;
import com.dotmarketing.common.model.ContentletSearch;
import com.dotmarketing.util.PortletURLUtil;
import com.dotmarketing.portlets.contentlet.model.Contentlet;
import com.dotmarketing.business.web.WebAPILocator;
import com.liferay.portal.model.User;
import com.dotmarketing.util.UtilMethods;
import java.util.Calendar;
import java.util.Iterator;
import com.dotmarketing.util.DateUtil;
import com.liferay.util.cal.CalendarUtil;
import java.util.ArrayList;
import com.dotcms.repackage.javax.portlet.WindowState;
import com.dotmarketing.business.Layout;
import com.liferay.portal.util.WebKeys;
import com.dotmarketing.util.URLEncoder;
import com.liferay.portal.language.LanguageUtil;
import com.dotcms.enterprise.LicenseUtil;
import com.dotcms.enterprise.license.LicenseLevel;
import com.dotmarketing.portlets.contentlet.util.ContentletUtil;
import org.elasticsearch.search.aggregations.Aggregation;
import org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation;
import org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation.Bucket;

public final class render_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("org.elasticsearch.search.suggest.Suggest");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("org.elasticsearch.search.suggest.term.TermSuggestion");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.dotmarketing.util.UtilMethods");
    _jspx_imports_classes.add("org.elasticsearch.search.suggest.Suggest");
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageUtil");
    _jspx_imports_classes.add("com.dotmarketing.portlets.contentlet.business.ContentletAPI");
    _jspx_imports_classes.add("com.liferay.portal.util.WebKeys");
    _jspx_imports_classes.add("com.dotmarketing.business.APILocator");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("com.dotmarketing.business.Layout");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.dotcms.content.elasticsearch.business.ESSearchResults");
    _jspx_imports_classes.add("com.dotcms.enterprise.LicenseUtil");
    _jspx_imports_classes.add("org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation.Bucket");
    _jspx_imports_classes.add("com.dotmarketing.portlets.contentlet.model.Contentlet");
    _jspx_imports_classes.add("com.dotmarketing.util.PortletURLUtil");
    _jspx_imports_classes.add("com.liferay.portal.model.User");
    _jspx_imports_classes.add("com.dotmarketing.util.URLEncoder");
    _jspx_imports_classes.add("org.elasticsearch.search.aggregations.Aggregation");
    _jspx_imports_classes.add("com.dotmarketing.business.web.WebAPILocator");
    _jspx_imports_classes.add("com.liferay.util.Validator");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.WindowState");
    _jspx_imports_classes.add("org.elasticsearch.search.suggest.term.TermSuggestion");
    _jspx_imports_classes.add("com.dotmarketing.portlets.contentlet.util.ContentletUtil");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.dotmarketing.common.model.ContentletSearch");
    _jspx_imports_classes.add("com.dotmarketing.util.DateUtil");
    _jspx_imports_classes.add("com.liferay.util.cal.CalendarUtil");
    _jspx_imports_classes.add("org.elasticsearch.search.aggregations.bucket.MultiBucketsAggregation");
    _jspx_imports_classes.add("com.dotcms.content.elasticsearch.business.ESContentletAPIImpl");
    _jspx_imports_classes.add("com.dotcms.enterprise.license.LicenseLevel");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
if( LicenseUtil.getLevel() < LicenseLevel.STANDARD.level){ 
      out.write("\n");
      out.write("\t<div class=\"portlet-wrapper\">\n");
      out.write("\t\t<div class=\"subNavCrumbTrail\">\n");
      out.write("\t\t\t<ul id=\"subNavCrumbUl\">\n");
      out.write("\t\t\t\t<li class=\"lastCrumb\">\n");
      out.write("\t\t\t\t\t<a href=\"#\" >");
      out.print(LanguageUtil.get(pageContext, "com.dotcms.repackage.javax.portlet.title.es-search"));
      out.write("</a>\n");
      out.write("\t\t\t\t</li>\n");
      out.write("\n");
      out.write("\t\t\t</ul>\n");
      out.write("\t\t\t<div class=\"clear\"></div>\n");
      out.write("\t\t</div>\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/jsp/es-search/not_licensed.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("\t</div>\n");
return;}
      out.write('\n');
      out.write('\n');

User user = WebAPILocator.getUserWebAPI().getLoggedInUser(request);

String query = request.getParameter("query");
if(!UtilMethods.isSet(query)){
	query = "";
}

boolean live = request.getParameter("live")!= null && request.getParameter("live").equals("true");


String userToPullID = request.getParameter("userid");

int counter = 1;
boolean userIsAdmin = false;
User userForPull = user;


String nastyError = null;



if(APILocator.getRoleAPI().doesUserHaveRole(user, APILocator.getRoleAPI().loadCMSAdminRole())){
	userIsAdmin = true;
	if(UtilMethods.isSet(userToPullID)){
		try{
			if(Validator.isEmailAddress(userToPullID)){
				userForPull = APILocator.getUserAPI().loadByUserByEmail(userToPullID,APILocator.getUserAPI().getSystemUser(),true);
			}
			else{
				userForPull = APILocator.getUserAPI().loadUserById(userToPullID,APILocator.getUserAPI().getSystemUser(),true);

			}
		}
		catch(Exception e){
			userForPull = APILocator.getUserAPI().getAnonymousUser();
		}
	}
}
else{
	userForPull= user;
}
ESSearchResults cons =null;

if(query == null){
	query = "";
}else{




	try{


		ContentletAPI es = APILocator.getContentletAPI();
		if (UtilMethods.isSet(query)) {


				cons = es.esSearch(query, live,userForPull,true);


		}




	}
	catch(Exception pe){

		nastyError = pe.toString();
	}
}




      out.write("\n");
      out.write("\n");
      out.write("<script src=\"/html/js/ace-builds-1.2.3/src-noconflict/ace.js\" type=\"text/javascript\"></script>\n");
      out.write("<script>\n");
      out.write("    var editor;\n");
      out.write("    function aceArea() {\n");
      out.write("        ace.config.set('basePath', '/html/js/ace-builds-1.2.3/src-noconflict/');\n");
      out.write("        editor = ace.edit('esEditor');\n");
      out.write("        editor.setTheme(\"ace/theme/textmate\");\n");
      out.write("        editor.getSession().setMode(\"ace/mode/json\");\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function refreshPane(){\n");
      out.write("        var data = {\n");
      out.write("            \"query\": editor.getValue(),\n");
      out.write("            \"userid\": dijit.byId(\"userid\").getValue(),\n");
      out.write("            \"live\": dijit.byId(\"live\").getValue()\n");
      out.write("        };\n");
      out.write("\n");
      out.write("        dojo.xhrPost({\n");
      out.write("            url: \"/api/portlet/es-search/render\",\n");
      out.write("            handleAs: \"text\",\n");
      out.write("            postData: data,\n");
      out.write("            load: function(code) {\n");
      out.write("                dotAjaxNav.refreshHTML(code);\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function showEsHelpDialog() {\n");
      out.write("        var esSearch = dijit.byId(\"esSearchHelpDia\");\n");
      out.write("        esSearch.show();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function handleWrapMode(e) {\n");
      out.write("        editor.getSession().setUseWrapMode(e);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    dojo.addOnLoad(aceArea);\n");
      out.write("</script>\n");
      out.write("<style type=\"text/css\" media=\"screen\">\n");
      out.write("    #esEditor {\n");
      out.write("        position: absolute;\n");
      out.write("        top: 0;\n");
      out.write("        right: 0;\n");
      out.write("        bottom: 0;\n");
      out.write("        left: 0;\n");
      out.write("    }\n");
      out.write("    .ace_print-margin {display: none;}\n");
      out.write("    .esEditorWrapper {\n");
      out.write("        position: relative;\n");
      out.write("        height: 400px;\n");
      out.write("        border: solid 1px #C0C0C0\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .dmundra .helpButton {\n");
      out.write("        margin: 5px 0 0 0;\n");
      out.write("    }\n");
      out.write("    .wrap-editor {\n");
      out.write("        margin-top: 5px;\n");
      out.write("    }\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("<div class=\"portlet-main\">\n");
      out.write("\t\n");
      out.write("\t<!-- START Toolbar -->\n");
      out.write("\t<div class=\"portlet-toolbar\">\n");
      out.write("\t\t<div class=\"portlet-toolbar__actions-primary\">\n");
      out.write("\t\t\t\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<div class=\"portlet-toolbar__info\">\n");
      out.write("\t\t\t\n");
      out.write("\t\t</div>\n");
      out.write("    \t<div class=\"portlet-toolbar__actions-secondary\">\n");
      out.write("    \t\t<button type=\"button\" class=\"helpButton\" iconClass=\"helpIcon\" onClick=\"showEsHelpDialog()\" dojoType=\"dijit.form.Button\" value=\"Help\">");
      out.print( LanguageUtil.get(pageContext, "Help") );
      out.write("</button>\n");
      out.write("    \t</div>\n");
      out.write("   </div>\n");
      out.write("   <!-- END Toolbar -->\n");
      out.write("\n");
      out.write("\n");
      out.write("\t<table class=\"listingTable\" style=\"width:90%;\">\n");
      out.write("        <tr>\n");
      out.write("            <th width=\"170\" valign=\"top\">\n");
      out.write("                <strong>");
      out.print( LanguageUtil.get(pageContext, "ES Query") );
      out.write(":</strong>\n");
      out.write("            </th>\n");
      out.write("            <td>\n");
      out.write("                <div class=\"esEditorWrapper\">\n");
      out.write("                    <div id=\"esEditor\">");
      out.print(UtilMethods.htmlifyString(query));
      out.write("</div>\n");
      out.write("                </div>\n");
      out.write("                <div class=\"wrap-editor\">\n");
      out.write("                    <input id=\"wrapEditor\" name=\"wrapEditor\" data-dojo-type=\"dijit/form/CheckBox\" value=\"true\" onChange=\"handleWrapMode\" /> <label for=\"wrapEditor\">");
      out.print( LanguageUtil.get(pageContext, "Wrap-Code") );
      out.write("</label>\n");
      out.write("                </div>\n");
      out.write("            </td>\n");
      out.write("        </tr>\n");
      out.write("\t\t<tr>\n");
      out.write("\t\t\t<th><strong>");
      out.print( LanguageUtil.get(pageContext, "Live") );
      out.write(":</strong></th>\n");
      out.write("\t\t\t<td nowrap=\"nowrap\">\n");
      out.write("\t\t\t\t<input dojoType=\"dijit.form.CheckBox\" name=\"live\"  id=\"live\" type=\"checkbox\" value=\"true\" ");
      out.print(live ? "checked=true" : "");
      out.write("\n");
      out.write("\t\t\t</td>\n");
      out.write("\t\t</tr>\n");
      out.write("\n");
      out.write("\t\t<tr>\n");
      out.write("\t\t\t<th><strong>");
      out.print( LanguageUtil.get(pageContext, "User ID or Email") );
      out.write(":</strong></th>\n");
      out.write("\t\t\t<td nowrap=\"nowrap\">\n");
      out.write("\n");
      out.write("\t\t\t\t<input name=\"userid\" id=\"userid\"  type=\"text\" value=\"");
      out.print(UtilMethods.webifyString(userToPullID));
      out.write("\" size=\"40\"   dojoType=\"dijit.form.TextBox\"  />\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t</td>\n");
      out.write("\t\t</tr>\n");
      out.write("\t</table>\n");
      out.write("\n");
      out.write("\n");
      out.write("\t<div style='text-align:center;padding:20px;'>\n");
      out.write("\t\t<button type=\"button\" id=\"submitButton\"  iconClass=\"queryIcon\" onClick=\"refreshPane()\" dojoType=\"dijit.form.Button\" value=\"Submit\">");
      out.print( LanguageUtil.get(pageContext, "Query") );
      out.write("</button>\n");
      out.write("\t</div>\n");
      out.write("\n");
      out.write("\t");
if(UtilMethods.isSet(cons)){ 
      out.write("\n");
      out.write("\t\t<table class=\"listingTable\" style=\"width:90%;\">\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<th nowrap=\"nowrap\"><strong>");
      out.print( LanguageUtil.get(pageContext, "Showing Hits") );
      out.write(" :</strong></th>\n");
      out.write("\t\t\t\t<td>");
      out.print(cons.getCount() );
      out.write(" of ");
      out.print(cons.getTotalResults());
      out.write("</td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<th><strong>");
      out.print( LanguageUtil.get(pageContext, "Took") );
      out.write(" :</strong></th>\n");
      out.write("\t\t\t\t<td style=\"width:100%\">\n");
      out.write("\t\t\t\t\t");
      out.print(cons.getQueryTook());
      out.write(" ms ");
      out.print( LanguageUtil.get(pageContext, "query") );
      out.write("<br>\n");
      out.write("\t\t\t\t\t");
      out.print(cons.getPopulationTook());
      out.write(" ms ");
      out.print( LanguageUtil.get(pageContext, "population") );
      out.write("<br>\n");
      out.write("\n");
      out.write("\t\t\t\t</td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\n");
      out.write("\t\t\t<!-- <tr>\n");
      out.write("\t\t\t\t<th nowrap=\"nowrap\"><strong>");
      out.print( LanguageUtil.get(pageContext, "Query-is") );
      out.write(" :</strong></th>\n");
      out.write("\t\t\t\t<td>");
      out.print(cons.getQuery());
      out.write("</td>\n");
      out.write("\t\t\t</tr> -->\n");
      out.write("\t\t\t\n");
      out.write("\t\t</table>\n");
      out.write("\t\t<div style='text-align:center;padding:20px;'>\n");
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\t");
} 
      out.write('\n');
      out.write('\n');
      out.write('	');
if(cons!= null && cons.getAggregations() !=null){ 
      out.write("\n");
      out.write("\t\t<table class=\"listingTable\" style=\"width:90%;\">\n");
      out.write("\t\t\t<tr><th colspan=\"3\">\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t\t<h2>Aggregations</h2>\n");
      out.write("\t\t\t\t</th></tr>\n");
      out.write("\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t<td>\n");
      out.write("\t\t\t\t\t");
for(Aggregation agg : cons.getAggregations()){ 
      out.write("\n");
      out.write("\t\t\t\t\t");
MultiBucketsAggregation multiBuckets = (MultiBucketsAggregation) agg; 
      out.write("\n");
      out.write("\t\t\t\t\t");
int ii=1; 
      out.write("\n");
      out.write("\t\t\t\t\t\t");
for (Bucket entry : multiBuckets.getBuckets()) {
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t");
      out.print(ii++);
      out.write('.');
      out.write(' ');
      out.print(entry.getKey());
      out.write(" =\n");
      out.write("\t\t\t\t\t\t\t");
      out.print( entry.getDocCount());
      out.write("<br>\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t");
 } 
      out.write("\n");
      out.write("\t\t\t\t\t");
} 
      out.write("\n");
      out.write("\t\t\t\t</td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t</table>\n");
      out.write("\t\t<div style='text-align:center;padding:20px;'>\n");
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\t");
} 
      out.write('\n');
      out.write('	');
if(cons != null && cons.getSuggestions() !=null){ 
      out.write("\n");
      out.write("\t\t<table class=\"listingTable\" style=\"width:90%;\">\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<th colspan=\"3\">\n");
      out.write("\t\t\t\t\t<h3>Suggestions</h3>\n");
      out.write("\t\t\t\t</th>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t\t<tr>\n");
      out.write("\t\t\t\t<td>");
int ii=1; 
      out.write("\n");
      out.write("\t\t\t\t    ");
Iterator iterator = cons.getSuggestions().iterator();
      out.write("\n");
      out.write("\t\t\t\t\t");
while(iterator.hasNext() ){ 
      out.write("\n");
      out.write("                        ");
Suggest.Suggestion s = (Suggest.Suggestion)iterator.next();
      out.write("\n");
      out.write("\t\t\t\t\t\t");
for (Object entry : s.getEntries()) {
      out.write("\n");
      out.write("\t\t\t\t\t\t\t");
      out.print(ii++);
      out.write('.');
      out.write(' ');
      out.print(((TermSuggestion.Entry) entry).getText() );
      out.write(" |\n");
      out.write("\t\t\t\t\t\t\t");
for(TermSuggestion.Entry.Option opt : ((TermSuggestion.Entry) entry).getOptions() ){ 
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t");
      out.print(opt.getText());
      out.write("\n");
      out.write("\t\t\t\t\t\t\t");
} 
      out.write("\n");
      out.write("\t\t\t\t\t\t\t<br>\n");
      out.write("\t\t\t\t\t\t");
} 
      out.write("\n");
      out.write("\t\t\t\t\t");
} 
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t</td>\n");
      out.write("\t\t\t</tr>\n");
      out.write("\t\t</table>\n");
      out.write("\t\t<div style='text-align:center;padding:20px;'>\n");
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\t");
} 
      out.write('\n');
      out.write('	');
if(cons!=null && cons.size() >0){ 
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t<table class=\"listingTable\" style=\"width:90%;\">\n");
      out.write("\t\t\t\t<tr><th colspan=\"3\">\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t\t<h2>Results</h2>\n");
      out.write("\t\t\t\t</th></tr>\n");
      out.write("\n");
      out.write("\t\t\t\t");
 for (Object x : cons){
      out.write("\n");
      out.write("\t\t\t\t\t");

						Contentlet c =(Contentlet) x;
						String mapStr = ContentletUtil.getContentPrintableMap(user, c).toString();
					
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t\t\t<td><strong>");
      out.print( counter );
      out.write(".</td>\n");
      out.write("\t\t\t\t\t\t\t<td width=\"100\"><strong>");
      out.print( LanguageUtil.get(pageContext, "Title") );
      out.write(":</strong></td>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t<td>\n");
      out.write("\t\t\t\t\t\t\t\t\t");
      out.print(c.getTitle() );
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t</td>\n");
      out.write("\t\t\t\t\t\t</tr>\n");
      out.write("\t\t\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t\t\t<td>&nbsp;</td>\n");
      out.write("\t\t\t\t\t\t\t<td><strong>");
      out.print( LanguageUtil.get(pageContext, "Inode") );
      out.write(":</strong></td>\n");
      out.write("\t\t\t\t\t\t\t<td width=\"90%\">");
      out.print(c.getInode() );
      out.write("</td>\n");
      out.write("\t\t\t\t\t\t</tr>\n");
      out.write("\t\t\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t\t\t<td>&nbsp;</td>\n");
      out.write("\t\t\t\t\t\t\t<td><strong>");
      out.print( LanguageUtil.get(pageContext, "Identifier") );
      out.write(":</strong></td>\n");
      out.write("\t\t\t\t\t\t\t<td>");
      out.print( c.getIdentifier() );
      out.write("</td>\n");
      out.write("\t\t\t\t\t\t</tr>\n");
      out.write("\t\t\t\t\t\t<tr >\n");
      out.write("\t\t\t\t\t\t\t<td>&nbsp;</td>\n");
      out.write("\t\t\t\t\t\t\t<td colspan=2>\n");
      out.write("\t\t\t\t\t\t\t\t<div style=\"padding:20px;\">");
      out.print( UtilMethods.makeHtmlSafe(mapStr) );
      out.write("</div>\n");
      out.write("\t\t\t\t\t\t\t</td>\n");
      out.write("\t\t\t\t\t\t</tr>\n");
      out.write("\t\t\t\t\t\t");
	counter++;
      out.write("\n");
      out.write("\t\t\t\t\t");
}
      out.write("\n");
      out.write("\t\t\t</table>\n");
      out.write("\t\t<div style='text-align:center;padding:20px;'>\n");
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\n");
      out.write("\t");
} 
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t");
if(cons != null){ 
      out.write("\n");
      out.write("\t\t\t<table \tclass=\"listingTable\" style=\"width:90%;\">\n");
      out.write("\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t<th colspan=\"3\">\n");
      out.write("\t\t\t\t\t\t<h3>Raw</h3>\n");
      out.write("\t\t\t\t\t</th>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t<td colspan=\"3\">\n");
      out.write("\t\t\t\t\t\t<pre>");
if(cons.getResponse() !=null){ 
      out.print(cons.getResponse());
} 
      out.write("\n");
      out.write("\t\t\t\t\t\t</pre>\n");
      out.write("\t\t\t\t\t</td>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t</table>\n");
      out.write("\t\t\t<div style='text-align:center;padding:20px;'>\n");
      out.write("\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t");
} 
      out.write('\n');
      out.write('	');
if(UtilMethods.isSet(nastyError)){
      out.write("\n");
      out.write("\n");
      out.write("\t\t<div style='color:red;width:90%;margin:auto;padding:20px;'>\n");
      out.write("\t\t\t");
      out.print(nastyError );
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\n");
      out.write("\t");
}
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("<div id=\"esSearchHelpDia\" title=\"ElasticSearch Help\" dojoType=\"dijit.Dialog\">\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/jsp/es-search/es-search-help.jsp", out, false);
      out.write("\n");
      out.write("</div>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
