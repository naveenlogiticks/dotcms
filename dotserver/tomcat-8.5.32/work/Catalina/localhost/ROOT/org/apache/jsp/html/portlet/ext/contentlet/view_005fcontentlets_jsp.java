/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2019-11-28 18:51:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.html.portlet.ext.contentlet;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.dotcms.contenttype.transform.contenttype.StructureTransformer;
import com.dotcms.contenttype.model.type.ContentType;
import com.dotcms.content.elasticsearch.constants.ESMappingConstants;
import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;
import com.dotcms.publisher.endpoint.business.PublishingEndPointAPI;
import com.dotmarketing.util.UtilMethods;
import com.dotmarketing.business.Layout;
import com.liferay.portal.NoSuchUserException;
import com.liferay.portal.auth.PrincipalException;
import com.liferay.portal.ejb.AddressManagerUtil;
import com.liferay.portal.ejb.CompanyLocalManagerUtil;
import com.liferay.portal.ejb.PortletManagerUtil;
import com.liferay.portal.ejb.PortletPreferencesManagerUtil;
import com.liferay.portal.ejb.UserLocalManagerUtil;
import com.liferay.portal.model.*;
import com.liferay.portal.util.Constants;
import com.liferay.portal.util.CookieKeys;
import com.liferay.portal.util.ImageKey;
import com.liferay.portal.util.OmniadminUtil;
import com.liferay.portal.util.PortalUtil;
import com.liferay.portal.util.PortletKeys;
import com.liferay.portal.util.Recipient;
import com.liferay.portal.util.RecipientComparator;
import com.liferay.portal.util.ReleaseInfo;
import com.liferay.portal.util.Resolution;
import com.liferay.portal.util.ShutdownUtil;
import com.liferay.portal.util.WebAppPool;
import com.liferay.portlet.ConcretePortletWrapper;
import com.liferay.portlet.LiferayWindowState;
import com.liferay.portlet.PortletURLImpl;
import com.liferay.portlet.RenderParametersPool;
import com.liferay.portlet.RenderRequestImpl;
import com.liferay.portlet.RenderResponseImpl;
import com.liferay.portlet.admin.ejb.AdminConfigManagerUtil;
import com.liferay.portlet.admin.model.EmailConfig;
import com.liferay.portlet.admin.model.JournalConfig;
import com.liferay.portlet.admin.model.ShoppingConfig;
import com.liferay.portlet.admin.model.UserConfig;
import com.liferay.util.BrowserSniffer;
import com.liferay.util.CollectionFactory;
import com.liferay.util.CookieUtil;
import com.liferay.util.CreditCard;
import com.liferay.util.FileUtil;
import com.liferay.util.Html;
import com.liferay.util.Http;
import com.liferay.util.JS;
import com.liferay.util.KeyValuePair;
import com.liferay.util.KeyValuePairComparator;
import com.liferay.util.MathUtil;
import com.liferay.util.ObjectValuePair;
import com.liferay.util.OrderedProperties;
import com.liferay.util.ParamUtil;
import com.liferay.util.PhoneNumber;
import com.liferay.util.PropertiesUtil;
import com.liferay.util.ServerDetector;
import com.liferay.util.SimpleCachePool;
import com.liferay.util.SortedProperties;
import com.liferay.util.State;
import com.liferay.util.StateUtil;
import com.liferay.util.StringComparator;
import com.liferay.util.StringPool;
import com.liferay.util.TextFormatter;
import com.liferay.util.Time;
import com.liferay.util.UnicodeFormatter;
import com.liferay.util.Validator;
import com.liferay.util.Xss;
import com.liferay.util.cal.CalendarUtil;
import com.liferay.util.cal.Recurrence;
import com.liferay.util.lang.BooleanWrapper;
import com.liferay.util.lang.IntegerWrapper;
import com.liferay.util.log4j.Levels;
import com.liferay.util.servlet.DynamicServletRequest;
import com.liferay.util.servlet.SessionParameters;
import com.liferay.util.servlet.StringServletResponse;
import com.liferay.util.servlet.UploadException;
import java.io.ByteArrayInputStream;
import java.io.StringReader;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Currency;
import java.util.Date;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import com.dotcms.repackage.javax.portlet.PortletConfig;
import com.dotcms.repackage.javax.portlet.PortletContext;
import com.dotcms.repackage.javax.portlet.PortletException;
import com.dotcms.repackage.javax.portlet.PortletMode;
import com.dotcms.repackage.javax.portlet.PortletPreferences;
import com.dotcms.repackage.javax.portlet.PortletURL;
import com.dotcms.repackage.javax.portlet.UnavailableException;
import com.dotcms.repackage.javax.portlet.ValidatorException;
import com.dotcms.repackage.javax.portlet.WindowState;
import com.dotmarketing.portlets.common.bean.CrumbTrailEntry;
import java.util.HashMap;
import com.liferay.portal.language.LanguageUtil;
import com.liferay.portal.language.LanguageWrapper;
import com.liferay.portal.language.UnicodeLanguageUtil;
import com.liferay.portal.util.PropsUtil;
import com.liferay.portal.util.WebKeys;
import com.liferay.util.GetterUtil;
import com.liferay.util.StringUtil;
import com.liferay.util.servlet.SessionErrors;
import com.liferay.util.servlet.SessionMessages;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.dotcms.publisher.environment.bean.Environment;
import com.dotcms.publisher.bundle.bean.Bundle;
import com.dotcms.publisher.environment.bean.Environment;
import java.util.List;
import com.dotmarketing.util.UtilMethods;
import com.dotmarketing.business.CacheLocator;
import com.dotmarketing.cache.FieldsCache;
import com.dotmarketing.portlets.languagesmanager.model.Language;
import com.dotmarketing.portlets.structure.factories.StructureFactory;
import com.dotmarketing.portlets.structure.model.Field;
import com.dotmarketing.util.Config;
import com.dotmarketing.util.InodeUtils;
import com.dotmarketing.util.Logger;
import com.dotmarketing.util.PortletID;
import com.dotcms.contenttype.exception.NotFoundInDbException;
import com.dotcms.enterprise.LicenseUtil;
import com.dotcms.enterprise.license.LicenseLevel;
import com.dotcms.repackage.javax.portlet.WindowState;
import com.dotmarketing.business.APILocator;
import com.dotmarketing.business.PermissionAPI;
import com.dotmarketing.business.Role;
import com.dotmarketing.portlets.structure.model.Structure;
import com.dotmarketing.util.UtilMethods;
import com.liferay.portal.language.LanguageUtil;
import java.util.List;
import com.liferay.portal.language.LanguageUtil;
import com.dotmarketing.util.UtilMethods;

public final class view_005fcontentlets_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(9);
    _jspx_dependants.put("/html/portlet/ext/contentlet/view_bulk_actions_inc.jsp", Long.valueOf(1570476693000L));
    _jspx_dependants.put("/html/portlet/ext/contentlet/view_contentlets_js_inc.jsp", Long.valueOf(1570476693000L));
    _jspx_dependants.put("/WEB-INF/tld/struts-html.tld", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/html/portlet/ext/remotepublish/init.jsp", Long.valueOf(1570476693000L));
    _jspx_dependants.put("/html/portlet/ext/contentlet/init.jsp", Long.valueOf(1570476693000L));
    _jspx_dependants.put("/html/common/init.jsp", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/html/portlet/ext/contentlet/languages_select_inc.jsp", Long.valueOf(1570476693000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-portlet.tld", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-util.tld", Long.valueOf(1570476689000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.liferay.portal.model");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.liferay.portal.util.ImageKey");
    _jspx_imports_classes.add("com.dotmarketing.util.Logger");
    _jspx_imports_classes.add("com.liferay.util.cal.Recurrence");
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("com.liferay.util.KeyValuePair");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.liferay.portal.ejb.AddressManagerUtil");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.ValidatorException");
    _jspx_imports_classes.add("com.dotmarketing.util.Config");
    _jspx_imports_classes.add("com.dotmarketing.util.InodeUtils");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.EmailConfig");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletURL");
    _jspx_imports_classes.add("com.liferay.portal.ejb.CompanyLocalManagerUtil");
    _jspx_imports_classes.add("com.dotmarketing.portlets.structure.model.Structure");
    _jspx_imports_classes.add("com.dotmarketing.portlets.common.bean.CrumbTrailEntry");
    _jspx_imports_classes.add("com.dotmarketing.business.CacheLocator");
    _jspx_imports_classes.add("com.dotmarketing.business.Layout");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.UnavailableException");
    _jspx_imports_classes.add("com.liferay.portal.ejb.PortletManagerUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.Resolution");
    _jspx_imports_classes.add("com.dotmarketing.portlets.structure.factories.StructureFactory");
    _jspx_imports_classes.add("com.liferay.portal.util.PropsUtil");
    _jspx_imports_classes.add("com.liferay.util.State");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletConfig");
    _jspx_imports_classes.add("com.dotcms.contenttype.exception.NotFoundInDbException");
    _jspx_imports_classes.add("com.liferay.util.Validator");
    _jspx_imports_classes.add("java.util.GregorianCalendar");
    _jspx_imports_classes.add("com.liferay.util.PhoneNumber");
    _jspx_imports_classes.add("com.liferay.util.BrowserSniffer");
    _jspx_imports_classes.add("com.liferay.util.JS");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("com.liferay.util.servlet.UploadException");
    _jspx_imports_classes.add("com.liferay.portal.language.UnicodeLanguageUtil");
    _jspx_imports_classes.add("com.liferay.util.Xss");
    _jspx_imports_classes.add("com.liferay.util.cal.CalendarUtil");
    _jspx_imports_classes.add("com.dotmarketing.portlets.languagesmanager.model.Language");
    _jspx_imports_classes.add("com.liferay.portlet.PortletURLImpl");
    _jspx_imports_classes.add("com.liferay.util.SortedProperties");
    _jspx_imports_classes.add("com.liferay.util.GetterUtil");
    _jspx_imports_classes.add("com.dotcms.enterprise.license.LicenseLevel");
    _jspx_imports_classes.add("org.apache.commons.logging.LogFactory");
    _jspx_imports_classes.add("com.liferay.util.ParamUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.PortletKeys");
    _jspx_imports_classes.add("com.liferay.portal.NoSuchUserException");
    _jspx_imports_classes.add("com.liferay.util.log4j.Levels");
    _jspx_imports_classes.add("com.dotcms.content.elasticsearch.constants.ESMappingConstants");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.JournalConfig");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletException");
    _jspx_imports_classes.add("com.liferay.portal.auth.PrincipalException");
    _jspx_imports_classes.add("java.util.Currency");
    _jspx_imports_classes.add("java.text.NumberFormat");
    _jspx_imports_classes.add("java.util.TreeSet");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("com.dotcms.publisher.endpoint.business.PublishingEndPointAPI");
    _jspx_imports_classes.add("java.util.LinkedHashMap");
    _jspx_imports_classes.add("com.liferay.portlet.RenderRequestImpl");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.dotcms.enterprise.LicenseUtil");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionErrors");
    _jspx_imports_classes.add("com.dotmarketing.business.PermissionAPI");
    _jspx_imports_classes.add("com.liferay.util.MathUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.OmniadminUtil");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.ShoppingConfig");
    _jspx_imports_classes.add("com.liferay.portlet.RenderParametersPool");
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("com.dotcms.publisher.bundle.bean.Bundle");
    _jspx_imports_classes.add("com.liferay.portal.util.Constants");
    _jspx_imports_classes.add("com.liferay.portal.util.Recipient");
    _jspx_imports_classes.add("com.dotmarketing.cache.FieldsCache");
    _jspx_imports_classes.add("com.dotcms.publisher.endpoint.bean.PublishingEndPoint");
    _jspx_imports_classes.add("com.liferay.util.OrderedProperties");
    _jspx_imports_classes.add("com.liferay.portal.ejb.UserLocalManagerUtil");
    _jspx_imports_classes.add("java.io.StringReader");
    _jspx_imports_classes.add("java.util.TreeMap");
    _jspx_imports_classes.add("com.liferay.util.servlet.DynamicServletRequest");
    _jspx_imports_classes.add("com.dotmarketing.util.UtilMethods");
    _jspx_imports_classes.add("com.liferay.util.Http");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.UserConfig");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.util.Random");
    _jspx_imports_classes.add("com.liferay.portal.util.WebKeys");
    _jspx_imports_classes.add("com.dotcms.contenttype.transform.contenttype.StructureTransformer");
    _jspx_imports_classes.add("com.liferay.util.CollectionFactory");
    _jspx_imports_classes.add("com.liferay.portal.util.ShutdownUtil");
    _jspx_imports_classes.add("com.liferay.portal.ejb.PortletPreferencesManagerUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.PortalUtil");
    _jspx_imports_classes.add("com.liferay.util.StringPool");
    _jspx_imports_classes.add("java.io.ByteArrayInputStream");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionParameters");
    _jspx_imports_classes.add("com.liferay.portlet.RenderResponseImpl");
    _jspx_imports_classes.add("java.text.DateFormat");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletPreferences");
    _jspx_imports_classes.add("com.liferay.util.StringComparator");
    _jspx_imports_classes.add("com.liferay.portlet.ConcretePortletWrapper");
    _jspx_imports_classes.add("java.util.TimeZone");
    _jspx_imports_classes.add("java.util.Collection");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.WindowState");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionMessages");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.liferay.util.SimpleCachePool");
    _jspx_imports_classes.add("com.liferay.portlet.LiferayWindowState");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletContext");
    _jspx_imports_classes.add("com.dotmarketing.util.PortletID");
    _jspx_imports_classes.add("com.liferay.util.CookieUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.ReleaseInfo");
    _jspx_imports_classes.add("com.liferay.util.Time");
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageUtil");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("com.liferay.util.servlet.StringServletResponse");
    _jspx_imports_classes.add("com.dotcms.publisher.environment.bean.Environment");
    _jspx_imports_classes.add("com.dotmarketing.business.APILocator");
    _jspx_imports_classes.add("com.dotmarketing.business.Role");
    _jspx_imports_classes.add("java.util.Stack");
    _jspx_imports_classes.add("java.text.MessageFormat");
    _jspx_imports_classes.add("java.util.HashSet");
    _jspx_imports_classes.add("com.liferay.util.StringUtil");
    _jspx_imports_classes.add("com.liferay.util.PropertiesUtil");
    _jspx_imports_classes.add("com.liferay.util.CreditCard");
    _jspx_imports_classes.add("com.liferay.util.UnicodeFormatter");
    _jspx_imports_classes.add("com.liferay.util.lang.IntegerWrapper");
    _jspx_imports_classes.add("com.dotcms.contenttype.model.type.ContentType");
    _jspx_imports_classes.add("com.liferay.util.ServerDetector");
    _jspx_imports_classes.add("com.liferay.portlet.admin.ejb.AdminConfigManagerUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.RecipientComparator");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.text.DecimalFormat");
    _jspx_imports_classes.add("com.liferay.portal.util.WebAppPool");
    _jspx_imports_classes.add("com.liferay.util.Html");
    _jspx_imports_classes.add("com.liferay.util.FileUtil");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletMode");
    _jspx_imports_classes.add("com.liferay.portal.util.CookieKeys");
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageWrapper");
    _jspx_imports_classes.add("com.liferay.util.TextFormatter");
    _jspx_imports_classes.add("com.liferay.util.StateUtil");
    _jspx_imports_classes.add("com.liferay.util.lang.BooleanWrapper");
    _jspx_imports_classes.add("com.liferay.util.KeyValuePairComparator");
    _jspx_imports_classes.add("org.apache.commons.logging.Log");
    _jspx_imports_classes.add("com.dotmarketing.portlets.structure.model.Field");
    _jspx_imports_classes.add("java.util.Collections");
    _jspx_imports_classes.add("com.liferay.util.ObjectValuePair");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fportlet_005factionURL_0026_005fwindowState;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fportlet_005factionURL;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fportlet_005fnamespace_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fportlet_005factionURL_0026_005fwindowState = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fportlet_005factionURL = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fportlet_005fnamespace_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fportlet_005factionURL_0026_005fwindowState.release();
    _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.release();
    _005fjspx_005ftagPool_005fportlet_005factionURL.release();
    _005fjspx_005ftagPool_005fportlet_005fnamespace_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/html/common/auth_backend_check.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	String CTX_PATH = (String) application
			.getAttribute(WebKeys.CTX_PATH);
	String CAPTCHA_PATH = (String) application
			.getAttribute(WebKeys.CAPTCHA_PATH);
	String IMAGE_PATH = (String) application
			.getAttribute(WebKeys.IMAGE_PATH);

	String contextPath = PropsUtil.get(PropsUtil.PORTAL_CTX);
	if (contextPath.equals("/")) {
		contextPath = "";
	}

	String COMMON_IMG = null;

	Company company = PortalUtil.getCompany(request);

	User user = PortalUtil.getUser(request);

	boolean signedIn = false;

	if (user == null) {
		user = company.getDefaultUser();
	} else {
		signedIn = true;
	}

	Locale locale = (Locale) session
			.getAttribute(com.dotcms.repackage.org.apache.struts.Globals.LOCALE_KEY);
	if (locale == null) {

		// Locale should never be null except when the TCK tests invalidate the session

		locale = user.getLocale();
	}
	if(UtilMethods.isSet(request.getParameter("switchLocale"))){
		Locale[] locales = LanguageUtil.getAvailableLocales();
		for (int i = 0; i < locales.length; i++) { 
			String test = locales[i].getLanguage() + "_" + locales[i].getCountry();
			if(test.equals(request.getParameter("switchLocale"))){
				locale = locales[i];
				session.setAttribute(com.dotcms.repackage.org.apache.struts.Globals.LOCALE_KEY, locale);
				break;
			}
		}
		
	}else{//DOTCMS-5013
		session.setAttribute(com.dotcms.repackage.org.apache.struts.Globals.LOCALE_KEY, locale);
	}

	TimeZone timeZone = user.getTimeZone();
	if (timeZone == null) {
		timeZone = company.getTimeZone();
	}

	Layout layout = (Layout) request.getAttribute(WebKeys.LAYOUT);
	Layout[] layouts = (Layout[]) request.getAttribute(WebKeys.LAYOUTS);

	String layoutId = null;
	if (layout != null) {
		layoutId = layout.getId();
	}

	//String portletGroupId = PortalUtil.getPortletGroupId(layoutId);

	int RES_NARROW = 0;
	int RES_TOTAL = 0;
	int RES_WIDE = 0;


//	Skin skin = user.getSkin();

	String SKIN_CSS_IMG = null;


	String SKIN_COMMON_IMG =null;
	String SKIN_IMG =null;

      out.write('\n');
      out.write('\n');

	try {
		String hostId = (String) session.getAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID);

		com.dotmarketing.business.web.HostWebAPI hostApi = com.dotmarketing.business.web.WebAPILocator.getHostWebAPI();
		com.dotmarketing.beans.Host currentHost = hostApi.find(hostId, user, false);
		if (currentHost.isArchived()) {
			List<com.dotmarketing.beans.Host> hosts = hostApi.findAll(user, false);
			for (com.dotmarketing.beans.Host host : hosts) {
				if (!host.isSystemHost() && !host.isArchived()) {
					session.setAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID, host
							.getIdentifier());
					break;
				}
			}
		}
	} catch (Exception e) {

	}

      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

    //Verify if we have set environments on session
    String selectedEnvKey = com.dotmarketing.util.WebKeys.SELECTED_ENVIRONMENTS + request.getSession().getAttribute("USER_ID");
	String selectedBundleKey = com.dotmarketing.util.WebKeys.SELECTED_BUNDLE + request.getSession().getAttribute("USER_ID");

    List<Environment> lastSelectedEnvironments = null;
    if ( request.getSession().getAttribute(selectedEnvKey) != null ) {
        lastSelectedEnvironments = (List<Environment>) request.getSession().getAttribute(selectedEnvKey);
    }

    //Verify if we have set a bundle on session
    com.dotcms.publisher.bundle.bean.Bundle lastSelectedBundle = null;
    if ( request.getSession().getAttribute( selectedBundleKey ) != null ) {
        lastSelectedBundle = (com.dotcms.publisher.bundle.bean.Bundle) request.getSession().getAttribute( selectedBundleKey );
    }

      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("    var lastSelectedEnvironments = [];\n");
      out.write("    ");
if (lastSelectedEnvironments != null) {

        int i = 0;
        for (Environment environment: lastSelectedEnvironments) {
            String id = environment.getId();
            String name = environment.getName();
    
      out.write("\n");
      out.write("\n");
      out.write("            var entry = {name:'");
      out.print(name);
      out.write("',id:'");
      out.print(id);
      out.write("'};\n");
      out.write("            lastSelectedEnvironments[");
      out.print(i++);
      out.write("] = entry;\n");
      out.write("    ");
}
      out.write("\n");
      out.write("\n");
      out.write("    ");
}
      out.write("\n");
      out.write("\n");
      out.write("    var lastSelectedBundle = {};\n");
      out.write("    ");
if (lastSelectedBundle != null) {

        String id = lastSelectedBundle.getId();
        String name = lastSelectedBundle.getName();
      out.write("\n");
      out.write("\n");
      out.write("        lastSelectedBundle = {name: '");
      out.print(UtilMethods.escapeSingleQuotes(name));
      out.write("', id: '");
      out.print(id);
      out.write("'};\n");
      out.write("    ");
}
      out.write("\n");
      out.write("\n");
      out.write("    sessionStorage.setItem(\"lastSelectedEnvironments\",JSON.stringify(lastSelectedEnvironments));\n");
      out.write("    sessionStorage.setItem(\"lastSelectedBundle\",JSON.stringify(lastSelectedBundle));\n");
      out.write("\n");
      out.write("</script>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<iframe id=\"AjaxActionJackson\" name=\"AjaxActionJackson\" style=\"border:0; width:0; height:0;\"></iframe>\r\n");









    List<ContentType> contentTypes = (List<ContentType>)request.getAttribute ("contentSearchContentTypes");

    List<Structure> structures = new StructureTransformer(contentTypes).asStructureList();

    List<Language> languages = (List<Language>)request.getAttribute (com.dotmarketing.util.WebKeys.LANGUAGES);

    java.util.Map params = new java.util.HashMap();
    params.put("struts_action",new String[] {"/ext/contentlet/view_contentlets"});

    String referer = com.dotmarketing.util.PortletURLUtil.getActionURL(request,WindowState.MAXIMIZED.toString(),params);

    Map lastSearch = (Map)session.getAttribute(com.dotmarketing.util.WebKeys.CONTENTLET_LAST_SEARCH);
    Structure structure = StructureFactory.getDefaultStructure();

    Map<String, String> fieldsSearch = new HashMap<String,String>();
    Language selectedLanguage = new Language();
    List<String> categories = new ArrayList();
    boolean showDeleted = false;
    boolean filterSystemHost = false;
    boolean filterLocked = false;
    boolean filterUnpublish = false;
    int currpage = 1;
    String orderBy = "score,modDate desc";
    Language defaultLang = APILocator.getLanguageAPI().getDefaultLanguage();
    String languageId = String.valueOf(defaultLang.getId());
    if(session.getAttribute(com.dotmarketing.util.WebKeys.LANGUAGE_SEARCHED)!= null){
        languageId = (String)session.getAttribute(com.dotmarketing.util.WebKeys.LANGUAGE_SEARCHED);
    }

    String structureSelected = null;
    final String variableName = (String) request.getParameter("filter");

    if(UtilMethods.isSet(variableName)){
        if (com.dotmarketing.beans.Host.HOST_VELOCITY_VAR_NAME.equals(variableName)){
            structureSelected = null;
        }else{
            try {
                ContentType filterContentType = APILocator.getContentTypeAPI(user).find(variableName);
                structureSelected = filterContentType != null ? filterContentType.id() : null;
            } catch (NotFoundInDbException e) {
                structureSelected = null;
            }
        }
    }else{
        structureSelected = (String) request.getAttribute("selectedStructure");
        if (structureSelected != null){
            try {
                ContentType contentType = APILocator.getContentTypeAPI(user).find(structureSelected);
                if (contentType != null && com.dotmarketing.beans.Host.HOST_VELOCITY_VAR_NAME.equals(contentType.variable()) ){
                    structureSelected = null;
                }
            } catch (NotFoundInDbException e) {
                structureSelected = null;
            }
        }
    }

    String schemeSelected = "catchall";
    if(UtilMethods.isSet(session.getAttribute(ESMappingConstants.WORKFLOW_SCHEME))){
        schemeSelected = (String)session.getAttribute(ESMappingConstants.WORKFLOW_SCHEME);
    }

    String stepsSelected = "catchall";
    if(UtilMethods.isSet(session.getAttribute(ESMappingConstants.WORKFLOW_STEP))){
        stepsSelected = (String)session.getAttribute(ESMappingConstants.WORKFLOW_STEP);
    }


    if (lastSearch != null && !UtilMethods.isSet(structureSelected)) {
        if(lastSearch.get("fieldsSearch") != null){
            fieldsSearch = (Map<String, String>) lastSearch.get("fieldsSearch");
        }
        if(lastSearch.get("categories") != null){
            categories = (List<String>) lastSearch.get("categories");
        }
        if(UtilMethods.isSet(lastSearch.get("showDeleted"))){
            showDeleted = (Boolean) lastSearch.get("showDeleted");
        }
        if(UtilMethods.isSet(lastSearch.get("filterSystemHost"))){
            filterSystemHost = (Boolean) lastSearch.get("filterSystemHost");
        }
        if(UtilMethods.isSet(lastSearch.get("filterLocked"))){
            filterLocked = (Boolean) lastSearch.get("filterLocked");
        }
        if(lastSearch.get("filterUnpublish")!=null)
            filterUnpublish = (Boolean) lastSearch.get("filterUnpublish");
        if(UtilMethods.isSet(lastSearch.get("page"))){
            currpage = (Integer) lastSearch.get("page");
        }
        if(UtilMethods.isSet(lastSearch.get("orderBy"))){
            orderBy = (String) lastSearch.get("orderBy");
        }

    }


    if (!InodeUtils.isSet(structureSelected)) {

        structureSelected = "catchall";

    }


    List<Field> fields = new ArrayList<Field>();
    try{
        fields = FieldsCache.getFieldsByStructureInode(structureSelected);
    }
    catch(Exception e){
        Logger.debug(this.getClass(), e.getMessage());
    }
    boolean hasNoSearcheableHostFolderField = false;
    boolean hasHostFolderField = false;
    for (Field field: fields) {
        if (field.getFieldType().equals(Field.FieldType.HOST_OR_FOLDER.toString())) {
            if(APILocator.getPermissionAPI().doesUserHavePermission(APILocator.getHostAPI().findSystemHost(), PermissionAPI.PERMISSION_READ, user, true)){
                hasHostFolderField = true;
            }
            if(!field.isSearchable()){
                hasNoSearcheableHostFolderField = true;
            }
            break;
        }
    }

    if (fieldsSearch == null ||  !UtilMethods.isSet(fieldsSearch.get("conHost")) || hasNoSearcheableHostFolderField) {
        fieldsSearch.put("conHost", (String) session.getAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID));
    }

    String crumbtrailSelectedHostId = (String) session.getAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID);
    if ((crumbtrailSelectedHostId == null) || crumbtrailSelectedHostId.equals("allHosts"))
        crumbtrailSelectedHostId = "";

    String structureInodesList="";
    String structureVelocityVarNames="";

    for (Structure st : structures) {

        if(structureInodesList!=""){
            structureInodesList+=";"+st.getInode();
        }
        else
            structureInodesList+=st.getInode();

        if(structureVelocityVarNames!=""){
            structureVelocityVarNames+=";"+st.getVelocityVarName();
        }
        else
            structureVelocityVarNames+=st.getVelocityVarName();

    }



    String _allValue = (UtilMethods.webifyString(fieldsSearch.get("catchall")).endsWith("*")) ? UtilMethods.webifyString(fieldsSearch.get("catchall")).substring(0,UtilMethods.webifyString(fieldsSearch.get("catchall")).length()-1) : UtilMethods.webifyString(fieldsSearch.get("catchall"));

    String[] strTypeNames = new String[]{"",LanguageUtil.get(pageContext, "Content"),
            LanguageUtil.get(pageContext, "Widget"),
            LanguageUtil.get(pageContext, "Form"),
            LanguageUtil.get(pageContext, "File"),
            LanguageUtil.get(pageContext, "HTMLPage"),
            LanguageUtil.get(pageContext, "Persona"),
            LanguageUtil.get(pageContext, "VanityURL"),
            LanguageUtil.get(pageContext, "KeyValue")
            ,
    };

    final boolean enterprise = (LicenseUtil.getLevel() >= LicenseLevel.STANDARD.level);
    final PublishingEndPointAPI pepAPI = APILocator.getPublisherEndPointAPI();
    final List<PublishingEndPoint> sendingEndpointsList = pepAPI.getReceivingEndPoints();
    final boolean sendingEndpoints = UtilMethods.isSet(sendingEndpointsList) && !sendingEndpointsList.isEmpty();
    final boolean canReindexContentlets = APILocator.getRoleAPI().doesUserHaveRole(user,APILocator.getRoleAPI().loadRoleByKey(Role.CMS_POWER_USER))|| com.dotmarketing.business.APILocator.getRoleAPI().doesUserHaveRole(user,com.dotmarketing.business.APILocator.getRoleAPI().loadCMSAdminRole());

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/html/portlet/ext/folders/context_menus_js.jsp", out, false);
      out.write("\r\n");
      out.write("<script type='text/javascript' src='/html/js/scriptaculous/prototype.js'></script>\r\n");
      out.write("<script type='text/javascript' src='/dwr/interface/StructureAjax.js'></script>\r\n");
      out.write("<script type='text/javascript' src='/dwr/interface/CategoryAjax.js'></script>\r\n");
      out.write("<script type='text/javascript' src='/dwr/interface/ContentletAjax.js'></script>\r\n");
      out.write("<script type='text/javascript' src='/dwr/interface/TagAjax.js'></script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/html/portlet/ext/folders/menu_actions_js.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\r\n");
      out.write("    var pushHandler = new dotcms.dojo.push.PushHandler('");
      out.print(LanguageUtil.get(pageContext, "Remote-Publish"));
      out.write("');\r\n");
      out.write("\r\n");
      out.write("    var dataItems = {\r\n");
      out.write("        identifier: \"name\",\r\n");
      out.write("        label: \"label\",\r\n");
      out.write("        items: [\r\n");
      out.write("            ");
if(request.getAttribute("DONT_SHOW_ALL") == null){
      out.write("\r\n");
      out.write("            {\r\n");
      out.write("                name: \"catchall\",\r\n");
      out.write("                label: \"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "All" )) );
      out.write("\",\r\n");
      out.write("                textLabel: \"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "All" )) );
      out.write("\"\r\n");
      out.write("            },\r\n");
      out.write("            ");
}
      out.write("\r\n");
      out.write("\r\n");
      out.write("            ");
	boolean started = false;
                int baseType=0;
                for(final Structure contentType : structures){

                    //Ignore the Host structure in the content search
                    if (contentType.isHost()) {
                        continue;
                    }

                    String labelAndIcon = (contentType.getStructureType()==1)
                          ? "<span class='contentIcon'></span>"
                              : (contentType.getStructureType()==2)
                                  ? "<span class='gearIcon'></span>"
                                      : (contentType.getStructureType()==3)
                                          ? "<span class='fa-columns'></span>"
                                              : (contentType.getStructureType()==4)
                                              ? "<span class='fileIcon'></span>"
                                                  : (contentType.getStructureType()==5)
                                                  ? "<span class='pageIcon'></span> "
                                                      : (contentType.getStructureType()==6)
                                                      ? "<span class='personaIcon'></span>"
                                                        : (contentType.getStructureType()==7)
                                                        ? "<span class='vanityIcon'></span>"
                                                            : (contentType.getStructureType()==8)
                                                            ? "<span class='languageVarIcon'></span>"
                                                                :"<span class='blankIcon'></span>";

                    String contentTypeName= UtilMethods.javaScriptify(contentType.getName());
                    labelAndIcon+="&nbsp; &nbsp;" + contentTypeName;
                    if(contentType.getStructureType() != baseType){
                      labelAndIcon = "<div style='height:1px;margin:-1px -10px 0px -10px;background:silver;'></div>" + labelAndIcon;
                      baseType = contentType.getStructureType();
                    }
            
      out.write("\r\n");
      out.write("            ");
      out.print((started) ? "," :"");
      out.write("\r\n");
      out.write("                {\r\n");
      out.write("                    name: \"");
      out.print(contentType.getInode());
      out.write("\",\r\n");
      out.write("                    label: \"");
      out.print(labelAndIcon );
      out.write("\",\r\n");
      out.write("                    textLabel: \"");
      out.print(contentTypeName );
      out.write("\"\r\n");
      out.write("                }\r\n");
      out.write("            ");
started = true;
      out.write("\r\n");
      out.write("            ");
}
      out.write("\r\n");
      out.write("\r\n");
      out.write("        ]\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    var dojoStore = new dojo.data.ItemFileReadStore({\r\n");
      out.write("        data: dataItems\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    var  dojoRelationshipsStore = new dojo.data.ItemFileReadStore({\r\n");
      out.write("        data:  {\r\n");
      out.write("            identifier  : \"id\",\r\n");
      out.write("            label: \"label\", \r\n");
      out.write("            items: []\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    function reloadRelationshipBox(box, relatedType){\r\n");
      out.write("    \tvar search = box.attr(\"displayedValue\");\r\n");
      out.write("\r\n");
      out.write("        //whitespaces are escaped\r\n");
      out.write("        var boxValue = search == \"\" ? \"*\" : \"*\" +search.trim().replace(/\\s/g, \"\\\\\\\\\\\\\\\\ \") + \"*\";\r\n");
      out.write("        var limit=box.pageSize;\r\n");
      out.write("        if (relatedType.indexOf(\".\") != -1){\r\n");
      out.write("            relatedType = relatedType.split('.')[0];\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("    \tvar tmpl = `\r\n");
      out.write("    \t\t{ \"query\" : \r\n");
      out.write("\t    \t    { \r\n");
      out.write("\t    \t        \"query_string\" : \r\n");
      out.write("\t    \t        {\r\n");
      out.write("\t    \t            \"query\" : \"+contentType:${relatedType}  +(inode:${boxValue} title:${boxValue} identifier:${boxValue})\"\r\n");
      out.write("\t    \t        } \r\n");
      out.write("\t    \t    },\r\n");
      out.write("\t    \t    \"sort\" : {\"moddate\":\"desc\"},\r\n");
      out.write("\t    \t    \"size\":${limit},\r\n");
      out.write("\t    \t    \"from\":0\r\n");
      out.write("\t    \t}`;\r\n");
      out.write("\r\n");
      out.write("         var url = \"/api/es/search\";\r\n");
      out.write("\r\n");
      out.write("         var xhrArgs = {\r\n");
      out.write("             url: url,\r\n");
      out.write("             postData: tmpl,\r\n");
      out.write("             headers: {\r\n");
      out.write("                 \"Accept\" : \"application/json\",\r\n");
      out.write("                 \"Content-Type\" : \"application/json\"\r\n");
      out.write("              },\r\n");
      out.write("             handleAs : \"json\",\r\n");
      out.write("             load: function(data) {\r\n");
      out.write("     \r\n");
      out.write("                 let dataItems = {\r\n");
      out.write("                     identifier  : \"id\",\r\n");
      out.write("                     label: \"label\", \r\n");
      out.write("                     items: []\r\n");
      out.write("                 };\r\n");
      out.write("\r\n");
      out.write("                 for (let i=0; i<data.contentlets.length;++i) {\r\n");
      out.write("                     let entity = data.contentlets[i];\r\n");
      out.write("                     dataItems.items[i] = { label: entity.title, id: entity.identifier, searchMe : entity.title + \" \" + entity.identifier + \" \" + entity.inode };\r\n");
      out.write("                 }\r\n");
      out.write("                 \r\n");
      out.write("                 dojoRelationshipsStore = new dojo.data.ItemFileReadStore({\r\n");
      out.write("                     data: dataItems\r\n");
      out.write("                 });\r\n");
      out.write("                 \r\n");
      out.write("                 box.store=dojoRelationshipsStore;\r\n");
      out.write("                 box.set( 'store',dojoRelationshipsStore);\r\n");
      out.write("                 box.startup();\r\n");
      out.write("             }\r\n");
      out.write("         }\r\n");
      out.write("         dojo.xhrPost(xhrArgs);\r\n");
      out.write("     }\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("    // Workflow Schemes\r\n");
      out.write("    var dojoSchemeStore = null;\r\n");
      out.write("\r\n");
      out.write("    function reloadSchemeStore (aFilteringSelect, structureInode) {\r\n");
      out.write("\r\n");
      out.write("        var xhrArgs = {\r\n");
      out.write("            url: \"/api/v1/workflow/schemes?showArchive=false\" + ((null != structureInode && structureInode && \"catchall\"!=structureInode)?\"&contentTypeId=\"+structureInode:\"\"),\r\n");
      out.write("            handleAs: \"json\",\r\n");
      out.write("            load: function(data) {\r\n");
      out.write("\r\n");
      out.write("                let dataItems = {\r\n");
      out.write("                    identifier: \"name\",\r\n");
      out.write("                    label: \"label\",\r\n");
      out.write("                    items: [ { name: \"catchall\", label: \"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "All" )) );
      out.write("\",\r\n");
      out.write("                        textLabel: \"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "All" )) );
      out.write("\" }]\r\n");
      out.write("                };\r\n");
      out.write("\r\n");
      out.write("                for (let i=0; i<data.entity.length;++i) {\r\n");
      out.write("\r\n");
      out.write("                    let schemeEntity = data.entity[i];\r\n");
      out.write("                    dataItems.items[dataItems.items.length] = { name: schemeEntity.id, label: schemeEntity.name, textLabel: schemeEntity.name };\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                dojoSchemeStore = new dojo.data.ItemFileReadStore({\r\n");
      out.write("                    data: dataItems\r\n");
      out.write("                });\r\n");
      out.write("\r\n");
      out.write("                if (null != aFilteringSelect) {\r\n");
      out.write("\r\n");
      out.write("                    aFilteringSelect.set('store', dojoSchemeStore);\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        dojo.xhrGet(xhrArgs);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function reloadSchemeStoreFromStructureInode (aFilteringSelect) {\r\n");
      out.write("\r\n");
      out.write("        reloadSchemeStore(aFilteringSelect, dijit.byId(\"structure_inode\")?dijit.byId(\"structure_inode\").getValue():null);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    reloadSchemeStore(null, \"");
      out.print(structureSelected);
      out.write("\");\r\n");
      out.write("\r\n");
      out.write("    // Workflow Steps\r\n");
      out.write("    var dojoStepsStore = null;\r\n");
      out.write("\r\n");
      out.write("    function reloadStepStore (aFilteringSelect, schemeId) {\r\n");
      out.write("\r\n");
      out.write("        if (\"catchall\" == schemeId) {\r\n");
      out.write("\r\n");
      out.write("            dojoStepsStore = new dojo.data.ItemFileReadStore({\r\n");
      out.write("                data: {\r\n");
      out.write("                    identifier: \"name\",\r\n");
      out.write("                    label: \"label\",\r\n");
      out.write("                    items: [ { name: \"catchall\", label: \"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "All" )) );
      out.write("\",\r\n");
      out.write("                        textLabel: \"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "All" )) );
      out.write("\" }]\r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            if (null != aFilteringSelect) {\r\n");
      out.write("\r\n");
      out.write("                aFilteringSelect.set('store', dojoStepsStore);\r\n");
      out.write("            }\r\n");
      out.write("        } else {\r\n");
      out.write("\r\n");
      out.write("            var xhrArgs = {\r\n");
      out.write("                url: \"/api/v1/workflow/schemes/\" + schemeId + \"/steps\",\r\n");
      out.write("                handleAs: \"json\",\r\n");
      out.write("                load: function(data) {\r\n");
      out.write("\r\n");
      out.write("                    let dataItems = {\r\n");
      out.write("                        identifier: \"name\",\r\n");
      out.write("                        label: \"label\",\r\n");
      out.write("                        items: [ { name: \"catchall\", label: \"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "All" )) );
      out.write("\",\r\n");
      out.write("                            textLabel: \"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "All" )) );
      out.write("\" }]\r\n");
      out.write("                    };\r\n");
      out.write("\r\n");
      out.write("                    dataItems.items[dataItems.items.length] = {\r\n");
      out.write("                            name: \"");
      out.print(ESMappingConstants.WORKFLOW_CURRENT_STEP_NOT_ASSIGNED_VALUE);
      out.write("\",\r\n");
      out.write("                            label: \"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "workflow.notassigned" )) );
      out.write("\",\r\n");
      out.write("                            textLabel: \"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "workflow.notassigned" )) );
      out.write("\"\r\n");
      out.write("                        };\r\n");
      out.write("\r\n");
      out.write("                    for (let i=0; i<data.entity.length;++i) {\r\n");
      out.write("\r\n");
      out.write("                        let stepEntity = data.entity[i];\r\n");
      out.write("                        dataItems.items[dataItems.items.length] = { name: stepEntity.id, label: stepEntity.name, textLabel: stepEntity.name };\r\n");
      out.write("                    }\r\n");
      out.write("\r\n");
      out.write("                    dojoStepsStore = new dojo.data.ItemFileReadStore({\r\n");
      out.write("                        data: dataItems\r\n");
      out.write("                    });\r\n");
      out.write("\r\n");
      out.write("                    if (null != aFilteringSelect) {\r\n");
      out.write("\r\n");
      out.write("                        aFilteringSelect.set('store', dojoStepsStore);\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            dojo.xhrGet(xhrArgs);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function reloadStepStoreFromSchemeId (aFilteringSelect) {\r\n");
      out.write("\r\n");
      out.write("        reloadStepStore(aFilteringSelect, dijit.byId(\"scheme_id\")?dijit.byId(\"scheme_id\").getValue():null);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    reloadStepStore(null, \"");
      out.print(schemeSelected);
      out.write("\");\r\n");
      out.write("\r\n");
      out.write("    dojo.addOnLoad(function() {\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        function myLabelFunc(item) {\r\n");
      out.write("            return item.textLabel + \"\";\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // content type select box\r\n");
      out.write("        var fs = new dijit.form.FilteringSelect({\r\n");
      out.write("                id: \"structure_inode\",\r\n");
      out.write("                name: \"structure_inode_select\",\r\n");
      out.write("                value: \"");
      out.print(structureSelected);
      out.write("\",\r\n");
      out.write("                store: dojoStore,\r\n");
      out.write("                searchAttr: \"textLabel\",\r\n");
      out.write("                labelAttr: \"label\",\r\n");
      out.write("                labelType: \"html\",\r\n");
      out.write("\r\n");
      out.write("                onChange: function(){\r\n");
      out.write("\r\n");
      out.write("                    fsSchemes.set('value', 'catchall');\r\n");
      out.write("                    fsSteps.set('value', 'catchall');\r\n");
      out.write("                    reloadSchemeStoreFromStructureInode(fsSchemes);\r\n");
      out.write("                    structureChanged(true);\r\n");
      out.write("                    doSearch(null, \"");
      out.print(orderBy);
      out.write("\");\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            dojo.byId(\"structSelectBox\"));\r\n");
      out.write("\r\n");
      out.write("        // scheme select box\r\n");
      out.write("        var fsSchemes = new dijit.form.FilteringSelect({\r\n");
      out.write("                id: \"scheme_id\",\r\n");
      out.write("                name: \"scheme_id_select\",\r\n");
      out.write("                value: \"");
      out.print(schemeSelected);
      out.write("\",\r\n");
      out.write("                store: dojoSchemeStore,\r\n");
      out.write("                searchAttr: \"textLabel\",\r\n");
      out.write("                labelAttr: \"label\",\r\n");
      out.write("                labelType: \"html\",\r\n");
      out.write("\r\n");
      out.write("                onChange: function(){\r\n");
      out.write("\r\n");
      out.write("                    fsSteps.set('value', 'catchall');\r\n");
      out.write("                    reloadStepStoreFromSchemeId (fsSteps)\r\n");
      out.write("                    structureChanged(true);\r\n");
      out.write("                    doSearch(null, \"");
      out.print(orderBy);
      out.write("\");\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            dojo.byId(\"schemeSelectBox\"));\r\n");
      out.write("\r\n");
      out.write("        // step select box\r\n");
      out.write("        var fsSteps = new dijit.form.FilteringSelect({\r\n");
      out.write("                id: \"step_id\",\r\n");
      out.write("                name: \"step_id_select\",\r\n");
      out.write("                value: \"");
      out.print(stepsSelected);
      out.write("\",\r\n");
      out.write("                store: dojoStepsStore,\r\n");
      out.write("                searchAttr: \"textLabel\",\r\n");
      out.write("                labelAttr: \"label\",\r\n");
      out.write("                labelType: \"html\",\r\n");
      out.write("\r\n");
      out.write("                onChange: function(){\r\n");
      out.write("\r\n");
      out.write("                    // todo: recargar con step_id\r\n");
      out.write("                    structureChanged(true);\r\n");
      out.write("                    doSearch(null, \"");
      out.print(orderBy);
      out.write("\");\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            dojo.byId(\"stepSelectBox\"));\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("    function initialLoad() {\r\n");
      out.write("        doSearch(");
      out.print( currpage );
      out.write(',');
      out.write(' ');
      out.write('"');
      out.print(orderBy);
      out.write("\");\r\n");
      out.write("        dijit.byId(\"searchButton\").attr(\"disabled\", false);\r\n");
      out.write("        dijit.byId(\"clearButton\").setAttribute(\"disabled\", false);\r\n");
      out.write("\r\n");
      out.write("        togglePublish();\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script language=\"JavaScript\"><!--\n");
      out.write("\n");
boolean canReindex= APILocator.getRoleAPI().doesUserHaveRole(user,APILocator.getRoleAPI().loadRoleByKey(Role.CMS_POWER_USER))|| com.dotmarketing.business.APILocator.getRoleAPI().doesUserHaveRole(user,com.dotmarketing.business.APILocator.getRoleAPI().loadCMSAdminRole());
      out.write('\n');
      out.write('\n');
Structure calendarEventSt = APILocator.getStructureAPI().findByVarName("calendarEvent", APILocator.getUserAPI().getSystemUser());
      out.write("\n");
      out.write("\n");
      out.write("        dojo.require(\"dojox.dtl.filter.strings\");\n");
      out.write("        dojo.require(\"dijit.form.FilteringSelect\");\n");
      out.write("        dojo.require(\"dijit.form.MultiSelect\");\n");
      out.write("        dojo.require(\"dotcms.dijit.form.HostFolderFilteringSelect\");\n");
      out.write("        dojo.require(\"dojo.aspect\");\n");
      out.write("\n");
      out.write("        var radiobuttonsIds = new Array();\n");
      out.write("        var checkboxesIds = new Array();\n");
      out.write("        var counter_radio = 0;\n");
      out.write("        var counter_checkbox = 0;\n");
      out.write("        var userId = '");
      out.print( user.getUserId() );
      out.write("';\n");
      out.write("        var crumbtrailSelectedHostId = '");
      out.print( crumbtrailSelectedHostId );
      out.write("';\n");
      out.write("        var hasHostFolderField = false;\n");
      out.write("        var conHostFolderValue = '';\n");
      out.write("        var loadingSearchFields = true;\n");
      out.write("        var categoriesLastSearched = new Array();\n");
      out.write("\n");
      out.write("        var queryRaw;\n");
      out.write("        var structureInode;\n");
      out.write("        var currentStructureFields;\n");
      out.write("        var currentPage = 1;\n");
      out.write("        var currentSortBy = \"score,modDate desc\";\n");
      out.write("        var setDotFieldTypeStr = \"\";\n");
      out.write("        var DOT_FIELD_TYPE = \"dotFieldType\";\n");
      out.write("        var cbContentInodeList = new Array();\n");
      out.write("        var totalContents = 0;\n");
      out.write("        var perPage = ");
      out.print( com.dotmarketing.util.Config.getIntProperty("PER_PAGE") );
      out.write(";\n");
      out.write("        var headerLength = 0;\n");
      out.write("        var headers;\n");
      out.write("        var userRolesIds = new Array ();\n");
      out.write("        var selectedStructureVarName = '';\n");
      out.write("        var bindTagFieldEvent;\n");
      out.write("\n");
      out.write("        var enterprise = ");
      out.print(LicenseUtil.getLevel() >= LicenseLevel.STANDARD.level);
      out.write(";\n");
      out.write("        var formNum=100;\n");
      out.write("\t\tvar sendingEndpoints = ");
      out.print(UtilMethods.isSet(sendingEndpointsList) && !sendingEndpointsList.isEmpty());
      out.write(";\n");
      out.write("\n");
      out.write("        ");

                List<Role> roles = com.dotmarketing.business.APILocator.getRoleAPI().loadRolesForUser (user.getUserId());
                for (Role role : roles) {
        
      out.write("\n");
      out.write("        userRolesIds[userRolesIds.length] = '");
      out.print( role.getId() );
      out.write("';\n");
      out.write("        ");

                }
        
      out.write("\n");
      out.write("\n");
      out.write("        var languages = new Array();\n");
      out.write("        var language;\n");
      out.write("\n");
      out.write("        ");
for (Language language: languages) {
      out.write("\n");
      out.write("                language = new Array(");
      out.print( language.getId() );
      out.write(',');
      out.write(' ');
      out.write('"');
      out.print( language.getLanguageCode() );
      out.write("\", \"");
      out.print( language.getCountryCode() );
      out.write("\", \"");
      out.print( language.getLanguage() );
      out.write("\", \"");
      out.print( language.getCountry() );
      out.write("\", \"");
      out.print( LanguageUtil.getLiteralLocale(language.getLanguageCode(), language.getCountryCode()) );
      out.write("\");\n");
      out.write("                languages[languages.length] = language;\n");
      out.write("        ");
      } 
      out.write("\n");
      out.write("\n");
      out.write("        ");
for(String category: categories) { 
      out.write("\n");
      out.write("                categoriesLastSearched[categoriesLastSearched.length] = '");
      out.print( category );
      out.write("';\n");
      out.write("        ");
      } 
      out.write("\n");
      out.write("\n");
      out.write("        var unCheckedInodes = \"\";\n");
      out.write("        function updateUnCheckedList(inode,checkId){\n");
      out.write("\n");
      out.write("\t        if(document.getElementById(\"fullCommand\").value == \"true\"){\n");
      out.write("\n");
      out.write("\t            if(!document.getElementById(checkId).checked){\n");
      out.write("\n");
      out.write("\t                    unCheckedInodes = document.getElementById('allUncheckedContentsInodes').value;\n");
      out.write("\n");
      out.write("\t                    if(unCheckedInodes == \"\")\n");
      out.write("\t                            unCheckedInodes = inode;\n");
      out.write("\t                    else\n");
      out.write("\t                            unCheckedInodes = unCheckedInodes + \",\"+ inode;\n");
      out.write("\n");
      out.write("\t            }else{\n");
      out.write("\t                    unCheckedInodes = unCheckedInodes.replace(inode,\"-\");\n");
      out.write("\t            }\n");
      out.write("\n");
      out.write("\t            document.getElementById('allUncheckedContentsInodes').value = unCheckedInodes;\n");
      out.write("\t        }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tfunction initAdvancedSearch(){\n");
      out.write("\t\t\tvar x = dojo.cookie(\"ShAdDi\");\n");
      out.write("\t\t\tif(x !=null && x != undefined && x != 0){\n");
      out.write("\t\t\t\tsetTimeout(resizeAdvancedSearch, 500);\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tfunction resizeAdvancedSearch(){\n");
      out.write("\t\t\tvar start = dojo.getStyle(dojo.byId('advancedSearchOptions'),'height');\n");
      out.write("\t\t\t// how tall should we be\n");
      out.write("\t\t\tvar end=dojo.position(dojo.byId(\"measureTheHeightOfSearchTools\")).y - dojo.position(dojo.byId(\"advancedSearchOptions\")).y;\n");
      out.write("\n");
      out.write("\t\t\t// resize\n");
      out.write("\n");
      out.write("\t\t\tdojo.setStyle(dojo.byId('advancedSearchOptions'),'height', '0px');\n");
      out.write("\n");
      out.write("\t\t\tdojo.animateProperty({\n");
      out.write("\t\t        node: dojo.byId(\"advancedSearchOptions\"),\n");
      out.write("\t\t        properties: {\n");
      out.write("\t\t            height: {start: start, end: end, unit: \"px\"},\n");
      out.write("\t\t        },\n");
      out.write("\t\t        duration: 500\n");
      out.write("\t\t    }).play();\n");
      out.write("\t\t\tdojo.byId(\"toggleDivText\").innerHTML=\"");
      out.print( LanguageUtil.get(pageContext, "Hide") );
      out.write("\";\n");
      out.write("\t\t\tdojo.cookie(\"ShAdDi\", end, { });\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tfunction toggleAdvancedSearchDiv(){\n");
      out.write("\t\t\t// how tall are we\n");
      out.write("\t\t\tvar showing = dojo.getStyle(dojo.byId('advancedSearchOptions'),'height');\n");
      out.write("\n");
      out.write("\t\t\t// resize\n");
      out.write("\t\t\tif(\"0px\" == showing || 0 ==showing){\n");
      out.write("\t\t\t\tdojo.cookie(\"ShAdDi\", \"0\", { });\n");
      out.write("\t\t\t\tdojo.byId(\"toggleDivText\").innerHTML=\"");
      out.print( LanguageUtil.get(pageContext, "Hide") );
      out.write("\";\n");
      out.write("\t\t\t\tresizeAdvancedSearch();\n");
      out.write("\t\t\t// hide\n");
      out.write("\t\t\t}else{\n");
      out.write("\n");
      out.write("\t\t\t\tdojo.animateProperty({\n");
      out.write("\t\t\t        node: dojo.byId(\"advancedSearchOptions\"),\n");
      out.write("\t\t\t        properties: {\n");
      out.write("\t\t\t            height: {start: showing, end: 0, unit: \"px\"},\n");
      out.write("\t\t\t        },\n");
      out.write("\t\t\t        duration: 500\n");
      out.write("\t\t\t    }).play();\n");
      out.write("\t\t\t\tdojo.cookie(\"ShAdDi\", 0, { });\n");
      out.write("\t\t\t\tdojo.byId(\"toggleDivText\").innerHTML=\"");
      out.print( LanguageUtil.get(pageContext, "Advanced") );
      out.write("\";\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t/**\n");
      out.write("\t\t\tfocus on search box\n");
      out.write("\t\t**/\n");
      out.write("\t\trequire([ \"dijit/focus\", \"dojo/dom\", \"dojo/domReady!\" ], function(focusUtil, dom){\n");
      out.write("\t\t\tdojo.require('dojox.timing');\n");
      out.write("\t\t\tt = new dojox.timing.Timer(500);\n");
      out.write("\t\t\tt.onTick = function(){\n");
      out.write("\t\t\t  focusUtil.focus(dom.byId(\"allFieldTB\"));\n");
      out.write("\t\t\t  t.stop();\n");
      out.write("\t\t\t}\n");
      out.write("\t\t\tt.start();\n");
      out.write("\t\t});\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("        function fillResults(data) {\n");
      out.write("\n");
      out.write("\n");
      out.write("            var counters = data[0];\n");
      out.write("            var hasNext = counters[\"hasNext\"];\n");
      out.write("            var hasPrevious = counters[\"hasPrevious\"];\n");
      out.write("            var total = counters[\"total\"];\n");
      out.write("            var begin = counters[\"begin\"];\n");
      out.write("            var end = counters[\"end\"];\n");
      out.write("    \t\tvar totalPages = counters[\"totalPages\"];\n");
      out.write("\n");
      out.write("            headers = data[1];\n");
      out.write("\n");
      out.write("            for (var i = 3; i < data.length; i++) {\n");
      out.write("                    data[i - 3] = data[i];\n");
      out.write("            }\n");
      out.write("            data.length = data.length - 3;\n");
      out.write("\n");
      out.write("            dwr.util.removeAllRows(\"results_table\");\n");
      out.write("\n");
      out.write("            var funcs = new Array ();\n");
      out.write("            if (data.length <= 0) {\n");
      out.write("                    if (1 < totalPages) {\n");
      out.write("                            doSearch(totalPages, counters[\"sortByUF\"]);\n");
      out.write("                    } else {\n");
      out.write("                            funcs[0] = noResults;\n");
      out.write("                            dwr.util.addRows(\"results_table\", [ headers ] , funcs, { escapeHtml: false });\n");
      out.write("                            document.getElementById(\"nextDiv\").style.display = \"none\";\n");
      out.write("                            document.getElementById(\"previousDiv\").style.display = \"none\";\n");
      out.write("                            showMatchingResults (0,0,0,0);\n");
      out.write("                            fillQuery (counters);\n");
      out.write("                            dijit.byId(\"searchButton\").attr(\"disabled\", false);\n");
      out.write("                            //dijit.byId(\"clearButton\").setAttribute(\"disabled\", false);\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            fillResultsTable (headers, data);\n");
      out.write("            showMatchingResults (total,begin,end,totalPages);\n");
      out.write("            fillQuery (counters);\n");
      out.write("\n");
      out.write("\n");
      out.write("            var popupsiframe = document.getElementById(\"popups\");\n");
      out.write("            for (var j = 0; j < data.length; j++) {\n");
      out.write("\t\t\t\tvar contentlet = data[j];\n");
      out.write("\t\t\t\tvar inode = contentlet[\"inode\"];\n");
      out.write("\t\t\t\tvar live = contentlet[\"live\"] == \"true\"?\"1\":\"0\";\n");
      out.write("\t\t\t\tvar working = contentlet[\"working\"] == \"true\"?\"1\":\"0\";\n");
      out.write("\t\t\t\tvar deleted = contentlet[\"deleted\"] == \"true\"?\"1\":\"0\";\n");
      out.write("\t\t\t\tvar locked = contentlet[\"locked\"] == \"true\"?\"1\":\"0\";\n");
      out.write("\t\t\t\tvar permissions = contentlet[\"permissions\"];\n");
      out.write("\t\t\t\tvar read = userHasReadPermission (contentlet, userId)?\"1\":\"0\";\n");
      out.write("\t\t\t\tvar write = userHasWritePermission (contentlet, userId)?\"1\":\"0\";\n");
      out.write("\t\t\t\tvar publish = userHasPublishPermission (contentlet, userId)?\"1\":\"0\";\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (hasNext) {\n");
      out.write("                    document.getElementById(\"nextDiv\").style.display = \"\";\n");
      out.write("            } else {\n");
      out.write("                    document.getElementById(\"nextDiv\").style.display = \"none\";\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (hasPrevious) {\n");
      out.write("                    document.getElementById(\"previousDiv\").style.display = \"\";\n");
      out.write("            } else {\n");
      out.write("                    document.getElementById(\"previousDiv\").style.display = \"none\";\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            dijit.byId(\"searchButton\").attr(\"disabled\", false);\n");
      out.write("    \t\tdijit.byId(\"clearButton\").setAttribute(\"disabled\", false);\n");
      out.write("            togglePublish();\n");
      out.write("\n");
      out.write("            //SelectAll functionality\n");
      out.write("            if(document.getElementById(\"fullCommand\").value == \"true\"){\n");
      out.write("                    dijit.byId('checkAll').attr('checked',true);\n");
      out.write("                    selectAllContents();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("        function titleCell (data,text, x) {\n");
      out.write("\n");
      out.write("                text = shortenString(text, 100);\n");
      out.write("\n");
      out.write("                var inode = data[\"inode\"];\n");
      out.write("                var checkId = \"checkbox\" + x;\n");
      out.write("                var live = data[\"live\"] == \"true\"?true:false;\n");
      out.write("                var working = data[\"working\"] == \"true\"?true:false;\n");
      out.write("                var deleted = data[\"deleted\"] == \"true\"?true:false;\n");
      out.write("                var locked = data[\"locked\"] == \"true\"?true:false;\n");
      out.write("                var liveSt = live?\"1\":\"0\";\n");
      out.write("                var workingSt = working?\"1\":\"0\";\n");
      out.write("                var permissions = data[\"permissions\"];\n");
      out.write("                var write = userHasWritePermission (data, userId)?\"1\":\"0\";\n");
      out.write("                var publish = userHasPublishPermission (data, userId)?\"1\":\"0\";\n");
      out.write("                var structure_id = data[\"structureInode\"];\n");
      out.write("\n");
      out.write("                var editRef ='';\n");
      out.write("\n");
      out.write("                if(structure_id == '");
      out.print(calendarEventSt.getInode() );
      out.write("'){\n");
      out.write("              editRef = \" editEvent('\" + inode + \"','");
      out.print(user.getUserId());
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print( referer );
      out.write("',\" + liveSt + \",\" + workingSt + \",\" + write + \") \";\n");
      out.write("            }else{\n");
      out.write("              editRef = \" editContentlet('\" + inode + \"','");
      out.print(user.getUserId());
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print( referer );
      out.write("',\" + liveSt + \",\" + workingSt + \",\" + write + \") \";\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            var ref = \"<div class='content-search__result-item'><tr>\";\n");
      out.write("                if(publish == \"1\") {\n");
      out.write("\n");
      out.write("\t                if(dijit.byId(checkId)){\n");
      out.write("\t                \tdijit.byId(checkId).destroy();\n");
      out.write("\t                }\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t\tref+=  \"<td style='width:25px;' valign='top'>\";\n");
      out.write("\t\t\t\t\tref+=  \"<input dojoType=\\\"dijit.form.CheckBox\\\" type=\\\"checkbox\\\" name=\\\"publishInode\\\" id=\\\"\";\n");
      out.write("\t\t\t\t\tref+=  checkId + \"\\\" value=\\\"\" + inode + \"\\\" onClick=\\\"togglePublish();updateUnCheckedList(\";\n");
      out.write("\t\t\t\t\tref+=  \"'\" + inode + \"'\" + \",\" + \"'\" +  checkId + \"'\" +  \");\\\" \";\n");
      out.write("\n");
      out.write("\t\t\t\t\tif((document.getElementById(\"fullCommand\").value == \"true\")\n");
      out.write("\t\t\t\t\t\t\t&& (unCheckedInodes.indexOf(inode) == -1)){\n");
      out.write("\t\t\t\t\t\tref+=  \"checked = \\\"checked\\\" \";\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t\tref+=  \">\";\n");
      out.write("\t\t\t\t\tref+=  \"</td>\";\n");
      out.write("                }else{\n");
      out.write("\t                ref+=  \"<td style='width:25px;' valign='top'>\";\n");
      out.write("\t                ref+=  \"<span class='newTaskIcon'></span>\";\n");
      out.write("\t                ref+=  \"</td>\";\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                ref+=  \"<td valign='top'>\"\n");
      out.write("                ref+=   \"<a  href=\\\"javascript: \" + editRef + \"\\\">\";\n");
      out.write("                ref+=   text;\n");
      out.write("                ref+=   \"</a>\";\n");
      out.write("                ref+=   \"</td>\";\n");
      out.write("                ref+=   \"</tr></div>\";\n");
      out.write("                return ref;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function statusDataCell (data, i) {\n");
      out.write("                var inode = data[\"inode\"];\n");
      out.write("\n");
      out.write("                var live = data[\"live\"] == \"true\"?true:false;\n");
      out.write("                var working = data[\"working\"] == \"true\"?true:false;\n");
      out.write("                var deleted = data[\"deleted\"] == \"true\"?true:false;\n");
      out.write("                var locked = data[\"locked\"] == \"true\"?true:false;\n");
      out.write("                var hasLive = data[\"hasLive\"] == \"true\"?true:false;\n");
      out.write("                var liveSt = live?\"1\":\"0\";\n");
      out.write("                var workingSt = working?\"1\":\"0\";\n");
      out.write("                var permissions = data[\"permissions\"];\n");
      out.write("                var write = userHasWritePermission (data, userId)?\"1\":\"0\";\n");
      out.write("                var structure_id = data[\"structureInode\"];\n");
      out.write("\n");
      out.write("                var editRef = '';\n");
      out.write("\n");
      out.write("            if(structure_id == '");
      out.print(calendarEventSt.getInode() );
      out.write("'){\n");
      out.write("              editRef = \" editEvent('\" + inode + \"','");
      out.print(user.getUserId());
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print( referer );
      out.write("',\" + liveSt + \",\" + workingSt + \",\" + write + \") \";\n");
      out.write("            }else{\n");
      out.write("              editRef = \" editContentlet('\" + inode + \"','");
      out.print(user.getUserId());
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print( referer );
      out.write("',\" + liveSt + \",\" + workingSt + \",\" + write + \") \";\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            var ref = \"<a onMouseOver=\\\"style.cursor='pointer'\\\" href=\\\"javascript: \" + editRef + \"\\\">\";\n");
      out.write("                //ref = ref + '<span class=\"editIcon\"></span>';\n");
      out.write("                ref = ref + \"</a>\";\n");
      out.write("                ref = ref + data[\"statusIcons\"] ;\n");
      out.write("\n");
      out.write("                eval(\"cbContentInodeList[i] = '\" + inode + \"';++i;\");\n");
      out.write("\n");
      out.write("                return ref;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function fillCategoryOptions (selectId, data) {\n");
      out.write("                var select = document.getElementById(selectId);\n");
      out.write("                if (select != null) {\n");
      out.write("                        for (var i = 0; i < data.length; i++) {\n");
      out.write("                                var option = new Option ();\n");
      out.write("                                option.text = data[i]['categoryName'];\n");
      out.write("                                option.value = data[i]['inode'];\n");
      out.write("                                for (var j = 0; j < categoriesLastSearched.length; j++) {\n");
      out.write("                                        if(categoriesLastSearched[j] == data[i]['inode'])\n");
      out.write("                                                option.selected = true;\n");
      out.write("                                }\n");
      out.write("                                option.style.marginLeft = (data[i]['categoryLevel']*10)+\"px\";\n");
      out.write("                        ");

                            if(categories!=null){
                                        for (String cat : categories) {
                        
      out.write("\n");
      out.write("                                        if (option.value == '");
      out.print(cat);
      out.write("')\n");
      out.write("                                                option.selected = true;\n");
      out.write("                        ");

                                        }
                                }
                        
      out.write("\n");
      out.write("                                select.options[i]=option;\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function renderSearchField (field) {\n");
      out.write("\n");
      out.write("                var structureVelraw=dojo.byId(\"structureVelocityVarNames\").value;\n");
      out.write("                var structInoderaw=dojo.byId(\"structureInodesList\").value;\n");
      out.write("                var structureVel=structureVelraw.split(\";\");\n");
      out.write("                var structInode=structInoderaw.split(\";\");\n");
      out.write("                var fieldStructureInode = field[\"fieldStructureInode\"];\n");
      out.write("                var fieldContentlet = field[\"fieldVelocityVarName\"];\n");
      out.write("                var fieldContentlet2 = field[\"fieldContentlet\"];\n");
      out.write("                var value = \"\";\n");
      out.write("        \t\tvar selectedStruct=\"\";\n");
      out.write("                for(var m=0; m <= structInode.length ; m++ ){\n");
      out.write("             \t\tif(fieldStructureInode==structInode[m]){\n");
      out.write("                 \t\tselectedStruct=structureVel[m];\n");
      out.write("                 \t}\n");
      out.write("                }\n");
      out.write("                selectedStructureVarName = selectedStruct;\n");
      out.write("\n");
      out.write("        ");

                String conHostValue = fieldsSearch.get("conHost");
                String conFolderValue = fieldsSearch.get("conFolder");
                String conHostFolderValue;
                if (conHostValue != null && !conHostValue.equalsIgnoreCase("allHosts")) {
                        conHostFolderValue = conHostValue;
                        conFolderValue = "";
                } else if (conFolderValue != null) {
                        conHostValue = "";
                        conHostFolderValue = conFolderValue;
                } else {
                        conHostFolderValue = "";
                }

        Set<String> keys = fieldsSearch.keySet();
        String value;
        for (String key : keys) {
                if (UtilMethods.isSet(fieldsSearch.get(key)))
                value = fieldsSearch.get(key);
                else
                        value = "";
      out.write("\n");
      out.write("                                if (selectedStructureVarName+\".\"+fieldContentlet == '");
      out.print(key);
      out.write("')\n");
      out.write("                                        value = '");
      out.print( UtilMethods.escapeSingleQuotes(value.trim()) );
      out.write("';\n");
      out.write("                    ");
 }
      out.write("\n");
      out.write("\n");
      out.write("                var type = field[\"fieldFieldType\"];\n");
      out.write("            if(type=='checkbox'){\n");
      out.write("                   //checkboxes fields\n");
      out.write("                    var option = field[\"fieldValues\"].split(\"\\r\\n\");\n");
      out.write("                    var lastChecked = value.split(\",\");\n");
      out.write("\n");
      out.write("\n");
      out.write("                    var result=\"\";\n");
      out.write("\n");
      out.write("                    for(var i = 0; i < option.length; i++){\n");
      out.write("                       var actual_option = option[i].split(\"|\");\n");
      out.write("                       if(actual_option.length > 1 && actual_option[1] !='' && actual_option[1].length > 0){\n");
      out.write("\n");
      out.write("                                if(dijit.byId(selectedStruct+\".\"+ fieldContentlet + \"Field\"+ counter_checkbox)){\n");
      out.write("                                                dijit.byId(selectedStruct+\".\"+ fieldContentlet + \"Field\"+ counter_checkbox).destroy();\n");
      out.write("                                        }\n");
      out.write("\n");
      out.write("                                var myD= selectedStruct+\".\"+ fieldContentlet + \"Field\"+ counter_checkbox ;\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("                                result += \"<div class=\\\"checkbox\\\"><input onchange='doSearch()' type=\\\"checkbox\\\" dojoType=\\\"dijit.form.CheckBox\\\" value=\\\"\"\n");
      out.write("                                                        + actual_option[1] + \"\\\" id=\\\"\" + selectedStruct + \".\" + fieldContentlet + \"Field\"+ counter_checkbox\n");
      out.write("                                                        + \"\\\" name=\\\"\" + selectedStruct + \".\" + fieldContentlet + \"\\\"\";\n");
      out.write("                                for(var j = 0;j < lastChecked.length; j++){\n");
      out.write("                                                if(lastChecked[j] == actual_option[1]){\n");
      out.write("                                                result = result + \"checked = \\\"checked\\\"\";\n");
      out.write("                                        }\n");
      out.write("                                }\n");
      out.write("                                result = result + \"><label for='\"+myD+\"'>\" + actual_option[0] + \"</label></div>\";\n");
      out.write("                            checkboxesIds[counter_checkbox] = selectedStruct+\".\"+fieldContentlet + \"Field\" + counter_checkbox;\n");
      out.write("\n");
      out.write("                            setDotFieldTypeStr = setDotFieldTypeStr\n");
      out.write("                                                                        + \"dojo.attr(\"\n");
      out.write("                                                                        + \"'\" + selectedStruct + \".\" + fieldContentlet + \"Field\" + counter_checkbox + \"'\"\n");
      out.write("                                                                        + \",'\" + DOT_FIELD_TYPE + \"'\"\n");
      out.write("                                                                        + \",'\" + type + \"');\";\n");
      out.write("\n");
      out.write("                            counter_checkbox++;\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                    return result;\n");
      out.write("\n");
      out.write("          }else if(type=='radio'){\n");
      out.write("                    //radio buttons fields\n");
      out.write("                    var option = field[\"fieldValues\"].split(\"\\r\\n\");\n");
      out.write("                    var result=\"\";\n");
      out.write("\n");
      out.write("                    for(var i = 0; i < option.length; i++){\n");
      out.write("\n");
      out.write("                       dijit.registry.remove(selectedStruct+\".\"+ fieldContentlet +\"Field\"+ counter_radio);\n");
      out.write("\n");
      out.write("                       var myD= selectedStruct+\".\"+ fieldContentlet + \"Field\"+ counter_radio;\n");
      out.write("\n");
      out.write("\n");
      out.write("                       var actual_option = option[i].split(\"|\");\n");
      out.write("                       if(actual_option.length > 1 && actual_option[1] !='' && actual_option[1].length > 0){\n");
      out.write("                                result = result + \"<div class=\\\"radio\\\"><input onchange='doSearch()' type=\\\"radio\\\" dojoType=\\\"dijit.form.RadioButton\\\" value=\\\"\"\n");
      out.write("                                                        + actual_option[1] + \"\\\" id=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"Field\"+ counter_radio\n");
      out.write("                                                        + \"\\\" name=\\\"\" + selectedStruct+ \".\" + fieldContentlet + \"\\\"\";\n");
      out.write("                                        if(value == actual_option[1]){\n");
      out.write("                                        result = result + \"checked = \\\"checked\\\"\";\n");
      out.write("                                }\n");
      out.write("                                result = result + \"><label for='\" + myD+ \"'>\" + actual_option[0] + \"</label></div>\";\n");
      out.write("                                radiobuttonsIds[counter_radio] = selectedStruct+\".\"+fieldContentlet + \"Field\"+ counter_radio;\n");
      out.write("\n");
      out.write("                                 setDotFieldTypeStr = setDotFieldTypeStr\n");
      out.write("                                                                        + \"dojo.attr(\"\n");
      out.write("                                                                        + \"'\" + selectedStruct + \".\" + fieldContentlet + \"Field\" + counter_radio + \"'\"\n");
      out.write("                                                                        + \",'\" + DOT_FIELD_TYPE + \"'\"\n");
      out.write("                                                                        + \",'\" + type + \"');\";\n");
      out.write("\n");
      out.write("                                 counter_radio++;\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                    return result;\n");
      out.write("\n");
      out.write("          }else if(type=='select'){\n");
      out.write("                    dijit.registry.remove(selectedStruct+\".\"+ fieldContentlet +\"Field\");\n");
      out.write("                    dijit.registry.remove(selectedStruct+\".\"+ fieldContentlet +\"Field_popup\");\n");
      out.write("                    var option = field[\"fieldValues\"].split(\"\\r\\n\");\n");
      out.write("                    var result=\"\";\n");
      out.write("                    if (type=='multi_select')\n");
      out.write("                                result = result+\"<select onchange='doSearch()' dojoType='dijit.form.MultiSelect'  multiple=\\\"multiple\\\" size=\\\"4\\\" id=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"Field\\\" name=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"\\\">\\n\";\n");
      out.write("                        else\n");
      out.write("                                result = result+\"<select onchange='doSearch()' dojoType='dijit.form.FilteringSelect' id=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"Field\\\"  name=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"\\\">\\n<option value=\\\"\\\"></option>\";\n");
      out.write("\n");
      out.write("                    for(var i = 0; i < option.length; i++){\n");
      out.write("                       var actual_option = option[i].split(\"|\");\n");
      out.write("                       if(actual_option.length > 1 && actual_option[1] !='' && actual_option[1].length > 0){\n");
      out.write("                                        auxValue = actual_option[1];\n");
      out.write("                            if(fieldContentlet2.indexOf(\"bool\") != -1)\n");
      out.write("                            {\n");
      out.write("                                        if(actual_option[1] == \"true\" || actual_option[1] == \"t\" || actual_option[1] == \"1\")\n");
      out.write("                                    {\n");
      out.write("                                        auxValue = 't';\n");
      out.write("                                    }else if(actual_option[1] == \"false\" || actual_option[1] == \"f\" || actual_option[1] == \"0\")\n");
      out.write("                                    {\n");
      out.write("                                                auxValue = 'f';\n");
      out.write("                                    }\n");
      out.write("                                }\n");
      out.write("                                result = result + \"<option value=\\\"\"\n");
      out.write("                                                                + auxValue + \"\\\"\"\n");
      out.write("                                if(value == auxValue){\n");
      out.write("                                        result = result + \" selected \";\n");
      out.write("                                }\n");
      out.write("                                result = result + \" >\" + actual_option[0]+\"</option>\\n\";\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                     setDotFieldTypeStr = setDotFieldTypeStr\n");
      out.write("                                                                        + \"dojo.attr(\"\n");
      out.write("                                                                        + \"'\" + selectedStruct + \".\" + fieldContentlet + \"Field\" + \"'\"\n");
      out.write("                                                                        + \",'\" + DOT_FIELD_TYPE + \"'\"\n");
      out.write("                                                                        + \",'\" + type + \"');\";\n");
      out.write("\n");
      out.write("                    result = result +\"</select>\\n\";\n");
      out.write("                    return result;\n");
      out.write("\n");
      out.write("          }else if(type=='multi_select'){\n");
      out.write("                    var lastSelected = value.split(\",\");\n");
      out.write("                    dijit.registry.remove(selectedStruct+\".\"+ fieldContentlet +\"Field\");\n");
      out.write("                    dijit.registry.remove(selectedStruct+\".\"+ fieldContentlet +\"Field_popup\");\n");
      out.write("                    var option = field[\"fieldValues\"].split(\"\\r\\n\");\n");
      out.write("                    var result=\"\";\n");
      out.write("                    if (type=='multi_select')\n");
      out.write("                                result = result+\"<select onchange='doSearch()'  dojoType='dijit.form.MultiSelect'  multiple=\\\"multiple\\\" size=\\\"4\\\" id=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"Field\\\" name=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"\\\">\\n\";\n");
      out.write("                        else\n");
      out.write("                                result = result+\"<select onchange='doSearch()' dojoType='dijit.form.FilteringSelect' id=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"Field\\\" style=\\\"width:160px;\\\" name=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"\\\">\\n<option value=\\\"\\\">None</option>\";\n");
      out.write("\n");
      out.write("                    for(var i = 0; i < option.length; i++){\n");
      out.write("                       var actual_option = option[i].split(\"|\");\n");
      out.write("                       if(actual_option.length > 1 && actual_option[1] !='' && actual_option[1].length > 0){\n");
      out.write("                                        auxValue = actual_option[1];\n");
      out.write("                            if(fieldContentlet2.indexOf(\"bool\") != -1)\n");
      out.write("                            {\n");
      out.write("                                        if(actual_option[1] == \"true\" || actual_option[1] == \"t\" || actual_option[1] == \"1\")\n");
      out.write("                                    {\n");
      out.write("                                        auxValue = 't';\n");
      out.write("                                    }else if(actual_option[1] == \"false\" || actual_option[1] == \"f\" || actual_option[1] == \"0\")\n");
      out.write("                                    {\n");
      out.write("                                                auxValue = 'f';\n");
      out.write("                                    }\n");
      out.write("                                }\n");
      out.write("                                result = result + \"<option value=\\\"\"\n");
      out.write("                                                                + auxValue + \"\\\"\";\n");
      out.write("                                for(var j = 0;j < lastSelected.length; j++){\n");
      out.write("                                        if(lastSelected[j] == auxValue){\n");
      out.write("                                                result = result + \" selected \";\n");
      out.write("                                        }\n");
      out.write("                                }\n");
      out.write("                                result = result + \" >\" + actual_option[0]+\"</option>\\n\";\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                     setDotFieldTypeStr = setDotFieldTypeStr\n");
      out.write("                                                                        + \"dojo.attr(\"\n");
      out.write("                                                                        + \"'\" + selectedStruct + \".\" + fieldContentlet + \"Field\" + \"'\"\n");
      out.write("                                                                        + \",'\" + DOT_FIELD_TYPE + \"'\"\n");
      out.write("                                                                        + \",'\" + type + \"');\";\n");
      out.write("\n");
      out.write("                    result = result +\"</select>\\n\";\n");
      out.write("                    return result;\n");
      out.write("\n");
      out.write("          }else if(type=='tag'){\n");
      out.write("                        var fieldId = selectedStruct + fieldContentlet + \"Field\";\n");
      out.write("                        var searchFieldId = selectedStruct + \".\" + fieldContentlet + \"Field\";\n");
      out.write("\n");
      out.write("                        dijit.registry.remove(selectedStruct+\".\"+ fieldContentlet +\"Field\");\n");
      out.write("                        dijit.registry.remove(selectedStruct + fieldContentlet + \"Field\");\n");
      out.write("\n");
      out.write("                        var result = [\n");
      out.write("                            \"<div class=\\\"tagsWrapper\\\" id=\\\"\" + fieldId + \"Wrapper\" + \"\\\">\",\n");
      out.write("                            \"<input type=\\\"hidden\\\" value=\\\"\" + value + \"\\\" id=\\\"\" + searchFieldId + \"\\\" onchange=\\\"setTimeout(doSearch, 500);\\\" />\",\n");
      out.write("                            \"<input type=\\\"hidden\\\" style=\\\"border: solid 1px red\\\" id=\\\"\" + fieldId + \"Content\" + \"\\\" value=\\\"\" + value + \"\\\"  />\",\n");
      out.write("                            \"<input type=\\\"text\\\" dojoType=\\\"dijit.form.TextBox\\\" id=\\\"\" + fieldId + \"\\\" name=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"Field\\\" />\",\n");
      out.write("                            \"<span class='hint-text'>");
      out.print( LanguageUtil.get(pageContext, "Type-your-tag-You-can-enter-multiple-comma-separated-tags") );
      out.write("</span>\",\n");
      out.write("                            \"<div class=\\\"tagsOptions\\\" id=\\\"\" + fieldId.replace(\".\", \"\") + \"SuggestedTagsDiv\" + \"\\\" style=\\\"display:none;\\\"></div>\",\n");
      out.write("                            \"</div>\"\n");
      out.write("                        ].join(\"\");\n");
      out.write("\n");
      out.write("                        bindTagFieldEvent = function() {\n");
      out.write("                          var tagField = dojo.byId(fieldId);\n");
      out.write("                          dojo.connect(tagField, \"onkeyup\", function(e) {\n");
      out.write("\n");
      out.write("                            ");

                                //Search for the selected host
                                String selectedHost = (String) session.getAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID);
                                if(UtilMethods.isSet(selectedHost) && !selectedHost.equals("allHosts")) {
                            
      out.write("\n");
      out.write("                                    suggestTagsForSearch(e, searchFieldId,'");
      out.print(selectedHost);
      out.write("');\n");
      out.write("                            ");

                                } else {
                            
      out.write("\n");
      out.write("                                    suggestTagsForSearch(e, searchFieldId);\n");
      out.write("                            ");

                                }
                            
      out.write("\n");
      out.write("                          });\n");
      out.write("                          dojo.connect(tagField, \"onblur\", closeSuggetionBox);\n");
      out.write("                          if (value.length) {\n");
      out.write("                            fillExistingTags(fieldId, value, searchFieldId);\n");
      out.write("                          }\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        setDotFieldTypeStr = setDotFieldTypeStr\n");
      out.write("                                            + \"bindTagFieldEvent();\\n\"\n");
      out.write("                                            + \"dojo.attr(\"\n");
      out.write("                                            + \"'\" + selectedStruct + \".\" + fieldContentlet + \"Field\" + \"'\"\n");
      out.write("                                            + \",'\" + DOT_FIELD_TYPE + \"'\"\n");
      out.write("                                            + \",'\" + type + \"');\";\n");
      out.write("\n");
      out.write("                    return result;\n");
      out.write("          }//http://jira.dotmarketing.net/browse/DOTCMS-3232\n");
      out.write("          else if(type=='host or folder'){\n");
      out.write("                  // Below code is used to fix the \"widget already registered error\".\n");
      out.write("\n");
      out.write("                  if(dojo.byId('FolderHostSelector-hostFoldersTreeWrapper')){\n");
      out.write("                          dojo.byId('FolderHostSelector-hostFoldersTreeWrapper').remove();\n");
      out.write("                  }\n");
      out.write("                  if(dijit.byId('FolderHostSelector')){\n");
      out.write("                          dijit.byId('FolderHostSelector').destroy();\n");
      out.write("                  }\n");
      out.write("                  if(dijit.byId('FolderHostSelector-tree')){\n");
      out.write("                          dijit.byId('FolderHostSelector-tree').destroy();\n");
      out.write("                 }\n");
      out.write("\n");
      out.write("\n");
      out.write("                  var field = selectedStruct+\".\"+fieldContentlet + \"Field\";\n");
      out.write("                  var hostId = \"\";\n");
      out.write("                  ");
 if(UtilMethods.isSet(conHostValue)){
      out.write("\n");
      out.write("                        hostId = '");
      out.print( conHostValue );
      out.write("';\n");
      out.write("                  ");
}else if(UtilMethods.isSet(crumbtrailSelectedHostId)){ 
      out.write("\n");
      out.write("                        hostId = '");
      out.print( conHostValue );
      out.write("';\n");
      out.write("                  ");
} 
      out.write("\n");
      out.write("                  var fieldValue = hostId;\n");
      out.write("                  ");
 if(UtilMethods.isSet(conFolderValue)){
      out.write("\n");
      out.write("                        fieldValue = '");
      out.print( conFolderValue );
      out.write("';\n");
      out.write("                  ");
}
      out.write("\n");
      out.write("\n");
      out.write("                  var result = \"<div onchange=\\\"doSearch(null, '");
      out.print(orderBy);
      out.write("')\\\" id=\\\"FolderHostSelector\\\" style='width270px' dojoType=\\\"dotcms.dijit.form.HostFolderFilteringSelect\\\" includeAll=\\\"true\\\" onClick=\\\"resetHostValue();\\\" onChange=\\\"getHostValue();\\\" \"\n");
      out.write("                                                +\" hostId=\\\"\" + hostId + \"\\\" value = \\\"\" + fieldValue + \"\\\"\" + \"></div>\";\n");
      out.write("\n");
      out.write("          hasHostFolderField = true;\n");
      out.write("\n");
      out.write("\n");
      out.write("           return result;\n");
      out.write("          }else if(type=='category' || type=='hidden'){\n");
      out.write("\n");
      out.write("             return \"\";\n");
      out.write("\n");
      out.write("          }else if(type.indexOf(\"date\") > -1){\n");
      out.write("                        dijit.registry.remove(selectedStruct+\".\"+ fieldContentlet + \"Field\");\n");
      out.write("                        if(dijit.byId(selectedStruct+\".\"+ fieldContentlet + \"Field\")){\n");
      out.write("                                dijit.byId(selectedStruct+\".\"+ fieldContentlet + \"Field\").destroy();\n");
      out.write("                        }\n");
      out.write("                        dojo.require(\"dijit.form.DateTextBox\");\n");
      out.write("                var result = \"<input onchange='doSearch()' type=\\\"text\\\" displayedValue=\\\"\"+value+\"\\\" constraints={datePattern:'MM/dd/yyyy'} dojoType=\\\"dijit.form.DateTextBox\\\" validate='return false;' invalidMessage=\\\"\\\"  id=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"Field\\\" name=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"\\\" >\";\n");
      out.write("                return result;\n");
      out.write("          }else if(type==\"relationship\"){\n");
      out.write("\t          var relationSearchField= selectedStruct+\".\"+ fieldContentlet;\n");
      out.write("\t          var relationType = field[\"fieldRelationType\"];\n");
      out.write("\n");
      out.write("\t          var boxTmpl= `\n");
      out.write("            \t   <div id='${relationSearchField}Div'></div>\n");
      out.write("            \t   <input type=\"hidden\" id='${relationSearchField}Field' />\n");
      out.write("            \t   <span class='hint-text'>");
      out.print( LanguageUtil.get(pageContext, "Type-id-or-title-related-content") );
      out.write("</span>\n");
      out.write("            \t   <script>\n");
      out.write("            \t      dijit.registry.remove(\"${relationSearchField}Id\");\n");
      out.write("            \t      dijit.registry.remove(\"${relationSearchField}Id_popup\");\n");
      out.write("\t\t              var relationshipSearch = new dijit.form.FilteringSelect({\n");
      out.write("\t\t                  id: \"${relationSearchField}Id\",\n");
      out.write("\t\t                  name: \"${relationSearchField}Name\",\n");
      out.write("\t\t                  pageSize:30,\n");
      out.write("\t\t                  labelAttr: \"label\",\n");
      out.write("\t\t                  store:null,\n");
      out.write("\t\t                  searchAttr: \"searchMe\",\n");
      out.write("\t\t                  queryExpr: '*${0}*',\n");
      out.write("\t\t                  isValid : function(){\n");
      out.write("\t\t                \t  return true;\n");
      out.write("\t\t                  },\n");
      out.write("\t\t                  autoComplete: false,\n");
      out.write("\t                      onKeyUp:function(event){\n");
      out.write("\t                    \t  if (event.keyCode != 13 &&  event.keyCode!= 38 && event.keyCode!=40) {\n");
      out.write("\t                    \t\t  reloadRelationshipBox(this, \"${relationType}\");\n");
      out.write("\t                    \t  }\n");
      out.write("                         },\n");
      out.write("                         onChange : function(value){\n");
      out.write("                        \t document.getElementById(\"${relationSearchField}Field\").value=this.getValue();\n");
      out.write("                        \t doSearch(null, \"");
      out.print(orderBy);
      out.write("\");\n");
      out.write("                         }\n");
      out.write("                         \n");
      out.write("\t\n");
      out.write("\t\t              }, dojo.byId(\"${relationSearchField}Div\"));\n");
      out.write("\n");
      out.write("\t\t              dojo.aspect.around(relationshipSearch, '_announceOption', function(origFunction) {\n");
      out.write("                          return function(node) {\n");
      out.write("                              this.searchAttr = 'label';\n");
      out.write("                              var r = origFunction.call(this, node);\n");
      out.write("                              this.searchAttr = 'searchMe';\n");
      out.write("                              return r;\n");
      out.write("                          }\n");
      out.write("                      });\n");
      out.write("\n");
      out.write("\t\t              reloadRelationshipBox(relationshipSearch,\"${relationType}\");\n");
      out.write("\n");
      out.write("                      dojo.connect(dijit.byId(\"searchButton\"), \"onClick\", null, function() {\n");
      out.write("                            if (relationshipSearch.get('value')==\"\"){\n");
      out.write("                                relationshipSearch.set(\"displayedValue\",\"\");\n");
      out.write("                                reloadRelationshipBox(relationshipSearch,\"${relationType}\");\n");
      out.write("                            }\n");
      out.write("                      });\n");
      out.write("\n");
      out.write("                      dojo.connect(dijit.byId(\"clearButton\"), \"onClick\", null, function() {\n");
      out.write("                            dijit.byId(\"${relationSearchField}Id\").set(\"displayedValue\",\"\");\n");
      out.write("                            reloadRelationshipBox(relationshipSearch,\"${relationType}\");\n");
      out.write("                      });\n");
      out.write("                </script>\n");
      out.write("              `;\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("              return boxTmpl;\n");
      out.write("          }else{\n");
      out.write("                dijit.registry.remove(selectedStruct+\".\"+ fieldContentlet + \"Field\");\n");
      out.write("                if(dijit.byId(selectedStruct+\".\"+ fieldContentlet + \"Field\")){\n");
      out.write("                        dijit.byId(selectedStruct+\".\"+ fieldContentlet + \"Field\").destroy();\n");
      out.write("                }\n");
      out.write("        return \"<input type=\\\"text\\\" dojoType=\\\"dijit.form.TextBox\\\"  id=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"Field\\\" name=\\\"\" + selectedStruct+\".\"+ fieldContentlet + \"\\\"  onkeyup='doSearch()'  value=\\\"\" + value + \"\\\">\";\n");
      out.write("\n");
      out.write("      }\n");
      out.write("\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tfunction updateSelectedStructAux(){\n");
      out.write("\t\t\tstructureInode = dijit.byId('selectedStructAux').value;\n");
      out.write("\t\t\taddNewContentlet(structureInode);\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("        function dispatchCreateContentletEvent(url) {\n");
      out.write("            var customEvent = document.createEvent(\"CustomEvent\");\n");
      out.write("            customEvent.initCustomEvent(\"ng-event\", false, false,  {\n");
      out.write("                name: \"create-contentlet\",\n");
      out.write("                data: {\n");
      out.write("                    url: url\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("            document.dispatchEvent(customEvent);\n");
      out.write("            dijit.byId(\"selectStructureDiv\").hide();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("        function addNewContentlet(structureInode){\n");
      out.write("\t\t\tif(structureInode == undefined || structureInode==\"\"){\n");
      out.write("        \t\tstructureInode = dijit.byId('structure_inode').value;\n");
      out.write("        \t}\n");
      out.write("\t\t\tif(structureInode == undefined || structureInode==\"\" || structureInode == \"catchall\"){\n");
      out.write("\t\t\t\tdijit.byId(\"selectStructureDiv\").show();\n");
      out.write("\t\t\t\treturn;\n");
      out.write("\t\t\t}\n");
      out.write("          else if(structureInode == '");
      out.print(calendarEventSt.getInode() );
      out.write("'){\n");
      out.write("                var href = \"");
      //  portlet:actionURL
      com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag _jspx_th_portlet_005factionURL_005f0 = (com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag) _005fjspx_005ftagPool_005fportlet_005factionURL_0026_005fwindowState.get(com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag.class);
      boolean _jspx_th_portlet_005factionURL_005f0_reused = false;
      try {
        _jspx_th_portlet_005factionURL_005f0.setPageContext(_jspx_page_context);
        _jspx_th_portlet_005factionURL_005f0.setParent(null);
        // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(785,28) name = windowState type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_portlet_005factionURL_005f0.setWindowState( WindowState.MAXIMIZED.toString() );
        int _jspx_eval_portlet_005factionURL_005f0 = _jspx_th_portlet_005factionURL_005f0.doStartTag();
        if (_jspx_eval_portlet_005factionURL_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          if (_jspx_eval_portlet_005factionURL_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_portlet_005factionURL_005f0);
          }
          do {
            out.write("\";\n");
            out.write("                href += \"");
            if (_jspx_meth_portlet_005fparam_005f0(_jspx_th_portlet_005factionURL_005f0, _jspx_page_context))
              return;
            out.write("\";\n");
            out.write("                href += \"");
            if (_jspx_meth_portlet_005fparam_005f1(_jspx_th_portlet_005factionURL_005f0, _jspx_page_context))
              return;
            out.write("\";\n");
            out.write("                href += \"");
            //  portlet:param
            com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f2 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
            boolean _jspx_th_portlet_005fparam_005f2_reused = false;
            try {
              _jspx_th_portlet_005fparam_005f2.setPageContext(_jspx_page_context);
              _jspx_th_portlet_005fparam_005f2.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f0);
              // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(788,25) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_portlet_005fparam_005f2.setName("referer");
              // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(788,25) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_portlet_005fparam_005f2.setValue(java.net.URLDecoder.decode(referer, "UTF-8"));
              int _jspx_eval_portlet_005fparam_005f2 = _jspx_th_portlet_005fparam_005f2.doStartTag();
              if (_jspx_th_portlet_005fparam_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f2);
              _jspx_th_portlet_005fparam_005f2_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f2, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f2_reused);
            }
            out.write("\";\n");
            out.write("                href += \"");
            if (_jspx_meth_portlet_005fparam_005f3(_jspx_th_portlet_005factionURL_005f0, _jspx_page_context))
              return;
            out.write("\";\n");
            out.write("                href += \"");
            int evalDoAfterBody = _jspx_th_portlet_005factionURL_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
          if (_jspx_eval_portlet_005factionURL_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = _jspx_page_context.popBody();
          }
        }
        if (_jspx_th_portlet_005factionURL_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005fportlet_005factionURL_0026_005fwindowState.reuse(_jspx_th_portlet_005factionURL_005f0);
        _jspx_th_portlet_005factionURL_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005factionURL_005f0, _jsp_getInstanceManager(), _jspx_th_portlet_005factionURL_005f0_reused);
      }
      out.write("\";\n");
      out.write("                href += \"&selectedStructure=\" + structureInode ;\n");
      out.write("                href += \"&lang=\" + getSelectedLanguageId();\n");
      out.write("                dispatchCreateContentletEvent(href);\n");
      out.write("          }else{\n");
      out.write("                var href = \"");
      //  portlet:actionURL
      com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag _jspx_th_portlet_005factionURL_005f1 = (com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag) _005fjspx_005ftagPool_005fportlet_005factionURL_0026_005fwindowState.get(com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag.class);
      boolean _jspx_th_portlet_005factionURL_005f1_reused = false;
      try {
        _jspx_th_portlet_005factionURL_005f1.setPageContext(_jspx_page_context);
        _jspx_th_portlet_005factionURL_005f1.setParent(null);
        // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(795,28) name = windowState type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_portlet_005factionURL_005f1.setWindowState( WindowState.MAXIMIZED.toString() );
        int _jspx_eval_portlet_005factionURL_005f1 = _jspx_th_portlet_005factionURL_005f1.doStartTag();
        if (_jspx_eval_portlet_005factionURL_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          if (_jspx_eval_portlet_005factionURL_005f1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_portlet_005factionURL_005f1);
          }
          do {
            out.write("\";\n");
            out.write("                href += \"");
            if (_jspx_meth_portlet_005fparam_005f4(_jspx_th_portlet_005factionURL_005f1, _jspx_page_context))
              return;
            out.write("\";\n");
            out.write("                href += \"");
            if (_jspx_meth_portlet_005fparam_005f5(_jspx_th_portlet_005factionURL_005f1, _jspx_page_context))
              return;
            out.write("\";\n");
            out.write("                href += \"");
            //  portlet:param
            com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f6 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
            boolean _jspx_th_portlet_005fparam_005f6_reused = false;
            try {
              _jspx_th_portlet_005fparam_005f6.setPageContext(_jspx_page_context);
              _jspx_th_portlet_005fparam_005f6.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f1);
              // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(798,25) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_portlet_005fparam_005f6.setName("referer");
              // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(798,25) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_portlet_005fparam_005f6.setValue(java.net.URLDecoder.decode(referer, "UTF-8"));
              int _jspx_eval_portlet_005fparam_005f6 = _jspx_th_portlet_005fparam_005f6.doStartTag();
              if (_jspx_th_portlet_005fparam_005f6.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f6);
              _jspx_th_portlet_005fparam_005f6_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f6, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f6_reused);
            }
            out.write("\";\n");
            out.write("                href += \"");
            if (_jspx_meth_portlet_005fparam_005f7(_jspx_th_portlet_005factionURL_005f1, _jspx_page_context))
              return;
            out.write("\";\n");
            out.write("                href += \"");
            int evalDoAfterBody = _jspx_th_portlet_005factionURL_005f1.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
          if (_jspx_eval_portlet_005factionURL_005f1 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = _jspx_page_context.popBody();
          }
        }
        if (_jspx_th_portlet_005factionURL_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005fportlet_005factionURL_0026_005fwindowState.reuse(_jspx_th_portlet_005factionURL_005f1);
        _jspx_th_portlet_005factionURL_005f1_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005factionURL_005f1, _jsp_getInstanceManager(), _jspx_th_portlet_005factionURL_005f1_reused);
      }
      out.write("\";\n");
      out.write("                href += \"&selectedStructure=\" + structureInode ;\n");
      out.write("                href += \"&lang=\" + getSelectedLanguageId();\n");
      out.write("                dispatchCreateContentletEvent(href)\n");
      out.write("          }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function donwloadToExcel(){\n");
      out.write("                var structureInode = dijit.byId('structure_inode').value;\n");
      out.write("\n");
      out.write("                if(structureInode ==\"\"){\n");
      out.write("                        dijit.byId('structure_inode').focus() ;\n");
      out.write("                        return false;\n");
      out.write("                }\n");
      out.write("                cbContentInodeList = new Array();\n");
      out.write("                var fieldsValues = new Array ();\n");
      out.write("                if(currentStructureFields == undefined){\n");
      out.write("                        currentStructureFields = Array();\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var structureVelraw=dojo.byId(\"structureVelocityVarNames\").value;\n");
      out.write("                var structInoderaw=dojo.byId(\"structureInodesList\").value;\n");
      out.write("                var structureVel=structureVelraw.split(\";\");\n");
      out.write("                var structInode=structInoderaw.split(\";\");\n");
      out.write("                var selectedStruct=\"\";\n");
      out.write("                for(var m2=0; m2 <= structInode.length ; m2++ ){\n");
      out.write("             if(structureInode==structInode[m2]){\n");
      out.write("                 selectedStruct=structureVel[m2];\n");
      out.write("                 }\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                if (hasHostFolderField) {\n");
      out.write("                        getHostValue();\n");
      out.write("                        var hostValue = document.getElementById(\"hostField\").value;\n");
      out.write("                        var folderValue = document.getElementById(\"folderField\").value;\n");
      out.write("                        if (isInodeSet(hostValue)) {\n");
      out.write("                                fieldsValues[fieldsValues.length] = \"conHost\";\n");
      out.write("                                fieldsValues[fieldsValues.length] = hostValue;\n");
      out.write("                        }\n");
      out.write("                        if (isInodeSet(folderValue)) {\n");
      out.write("                                fieldsValues[fieldsValues.length] = \"conFolder\";\n");
      out.write("                                fieldsValues[fieldsValues.length] = folderValue;\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("\n");
      out.write("\t\t\t\tvar allField = dijit.byId(\"allFieldTB\").getValue();\n");
      out.write("\t\t\t\tif (allField != undefined && allField.length>0 ) {\n");
      out.write("\n");
      out.write("                        fieldsValues[fieldsValues.length] = \"catchall\";\n");
      out.write("                        fieldsValues[fieldsValues.length] = allField + \"*\";\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("                for (var j = 0; j < currentStructureFields.length; j++) {\n");
      out.write("                        var field = currentStructureFields[j];\n");
      out.write("            var fieldId = selectedStruct+\".\"+field[\"fieldVelocityVarName\"] + \"Field\";\n");
      out.write("                        var formField = document.getElementById(fieldId);\n");
      out.write("                        var fieldValue = \"\";\n");
      out.write("\n");
      out.write("                        if(formField != null){\n");
      out.write("                                                                if(dojo.attr(formField.id,DOT_FIELD_TYPE) == 'select'){\n");
      out.write("\n");
      out.write("                                        var tempDijitObj = dijit.byId(formField.id);\n");
      out.write("                                        fieldsValues[fieldsValues.length] = selectedStruct+\".\"+field[\"fieldVelocityVarName\"];\n");
      out.write("                                        fieldsValues[fieldsValues.length] = tempDijitObj.value;\n");
      out.write("\n");
      out.write("                                }else if(formField.type=='select-one' || formField.type=='select-multiple') {\n");
      out.write("\n");
      out.write("                                     var values = \"\";\n");
      out.write("                                     for (var i=0; i<formField.options.length; i++) {\n");
      out.write("                                            if (formField.options[i].selected) {\n");
      out.write("                                              fieldsValues[fieldsValues.length] = selectedStruct+\".\"+field[\"fieldVelocityVarName\"];\n");
      out.write("                                              fieldsValues[fieldsValues.length] = formField.options[i].value;\n");
      out.write("\n");
      out.write("                                            }\n");
      out.write("                                          }\n");
      out.write("\n");
      out.write("                                }else {\n");
      out.write("                                        fieldsValues[fieldsValues.length] = selectedStruct+\".\"+field[\"fieldVelocityVarName\"];\n");
      out.write("                                        fieldsValues[fieldsValues.length] = formField.value;\n");
      out.write("\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                }\n");
      out.write("\n");
      out.write("        for(var i=0;i < radiobuttonsIds.length ;i++ ){\n");
      out.write("                        var formField = document.getElementById(radiobuttonsIds[i]);\n");
      out.write("                        if(formField != null && formField.type=='radio') {\n");
      out.write("                            var values = \"\";\n");
      out.write("                                if (formField.checked) {\n");
      out.write("                                        values = formField.value;\n");
      out.write("                                        fieldsValues[fieldsValues.length] = formField.name;\n");
      out.write("                                        fieldsValues[fieldsValues.length] = values;\n");
      out.write("                                }\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                for(var i=0;i < checkboxesIds.length ;i++ ){\n");
      out.write("                        var formField = document.getElementById(checkboxesIds[i]);\n");
      out.write("                        if(formField != null && formField.type=='checkbox') {\n");
      out.write("                            var values = \"\";\n");
      out.write("                                if (formField.checked) {\n");
      out.write("                                        values = formField.value;\n");
      out.write("                                        fieldsValues[fieldsValues.length] = formField.name;\n");
      out.write("                                        fieldsValues[fieldsValues.length] = values;\n");
      out.write("                                }\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                if( getSelectedLanguageId() != 0 ){\n");
      out.write("                \tfieldsValues[fieldsValues.length] = \"languageId\";\n");
      out.write("                \tfieldsValues[fieldsValues.length] = getSelectedLanguageId();\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // if we have an identifier\n");
      out.write("            if(isInodeSet(document.getElementById(\"Identifier\").value)){\n");
      out.write("            var contentId = \"\";\n");
      out.write("                fieldsValues[fieldsValues.length] = \"identifier\";\n");
      out.write("                contentId = document.getElementById(\"Identifier\").value;\n");
      out.write("                    fieldsValues[fieldsValues.length] = contentId;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("                var allField = dijit.byId(\"allFieldTB\").getValue();\n");
      out.write("                if (allField != undefined && allField.length>0 ) {\n");
      out.write("                    fieldsValues[fieldsValues.length] = \"catchall\";\n");
      out.write("                    fieldsValues[fieldsValues.length] = allField + \"*\";\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var categoriesValues = new Array ();\n");
      out.write("                var form = document.getElementById(\"search_form\");\n");
      out.write("                var categories = form.categories;\n");
      out.write("                if (categories != null) {\n");
      out.write("                        if (categories.options != null) {\n");
      out.write("                                var opts = categories.options;\n");
      out.write("                                for (var j = 0; j < opts.length; j++) {\n");
      out.write("                                        var option = opts[j];\n");
      out.write("                                        if (option.selected) {\n");
      out.write("                                                categoriesValues[categoriesValues.length] = option.value;\n");
      out.write("                                        }\n");
      out.write("                                }\n");
      out.write("                        } else {\n");
      out.write("                                for (var i = 0; i < categories.length; i++) {\n");
      out.write("                                        var catSelect = categories[i];\n");
      out.write("                                        var opts = catSelect.options;\n");
      out.write("                                        for (var j = 0; j < opts.length; j++) {\n");
      out.write("                                                var option = opts[j];\n");
      out.write("                                                if (option.selected) {\n");
      out.write("                                                        categoriesValues[categoriesValues.length] = option.value;\n");
      out.write("                                                }\n");
      out.write("                                        }\n");
      out.write("                                }\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                 var filterSystemHost = false;\n");
      out.write("                if (document.getElementById(\"filterSystemHostCB\").checked && document.getElementById(\"filterSystemHostTable\").style.display != \"none\") {\n");
      out.write("                        filterSystemHost = true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var filterLocked = false;\n");
      out.write("\n");
      out.write("                if (dijit.byId(\"showingSelect\").getValue() == \"locked\") {\n");
      out.write("                        filterLocked = true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var filterUnpublish = false;\n");
      out.write("                if (dijit.byId(\"showingSelect\").getValue() == \"unpublished\") {\n");
      out.write("                       filterUnpublish = true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var showDeleted = false;\n");
      out.write("                if (dijit.byId(\"showingSelect\").getValue() == \"archived\") {\n");
      out.write("                        showDeleted = true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                dijit.byId(\"searchButton\").attr(\"disabled\", true);\n");
      out.write("                //dijit.byId(\"clearButton\").attr(\"disabled\", false);\n");
      out.write("\n");
      out.write("                document.getElementById('fieldsValues').value = fieldsValues;\n");
      out.write("                document.getElementById('categoriesValues').value = categoriesValues;\n");
      out.write("                document.getElementById('showDeleted').value = showDeleted;\n");
      out.write("                document.getElementById('currentSortBy').value = currentSortBy;\n");
      out.write("                document.getElementById('filterSystemHost').value = filterSystemHost;\n");
      out.write("                document.getElementById('filterLocked').value = filterLocked;\n");
      out.write("                document.getElementById('filterUnpublish').value = filterUnpublish;\n");
      out.write("\n");
      out.write("                var href = \"");
      //  portlet:actionURL
      com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag _jspx_th_portlet_005factionURL_005f2 = (com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag) _005fjspx_005ftagPool_005fportlet_005factionURL_0026_005fwindowState.get(com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag.class);
      boolean _jspx_th_portlet_005factionURL_005f2_reused = false;
      try {
        _jspx_th_portlet_005factionURL_005f2.setPageContext(_jspx_page_context);
        _jspx_th_portlet_005factionURL_005f2.setParent(null);
        // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(987,28) name = windowState type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_portlet_005factionURL_005f2.setWindowState( WindowState.MAXIMIZED.toString() );
        int _jspx_eval_portlet_005factionURL_005f2 = _jspx_th_portlet_005factionURL_005f2.doStartTag();
        if (_jspx_eval_portlet_005factionURL_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          if (_jspx_eval_portlet_005factionURL_005f2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_portlet_005factionURL_005f2);
          }
          do {
            out.write("\";\n");
            out.write("                href += \"");
            if (_jspx_meth_portlet_005fparam_005f8(_jspx_th_portlet_005factionURL_005f2, _jspx_page_context))
              return;
            out.write("\";\n");
            out.write("                href += \"");
            if (_jspx_meth_portlet_005fparam_005f9(_jspx_th_portlet_005factionURL_005f2, _jspx_page_context))
              return;
            out.write("\";\n");
            out.write("                href += \"");
            //  portlet:param
            com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f10 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
            boolean _jspx_th_portlet_005fparam_005f10_reused = false;
            try {
              _jspx_th_portlet_005fparam_005f10.setPageContext(_jspx_page_context);
              _jspx_th_portlet_005fparam_005f10.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f2);
              // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(990,25) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_portlet_005fparam_005f10.setName("referer");
              // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(990,25) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_portlet_005fparam_005f10.setValue(java.net.URLDecoder.decode(referer, "UTF-8"));
              int _jspx_eval_portlet_005fparam_005f10 = _jspx_th_portlet_005fparam_005f10.doStartTag();
              if (_jspx_th_portlet_005fparam_005f10.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f10);
              _jspx_th_portlet_005fparam_005f10_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f10, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f10_reused);
            }
            out.write("\";\n");
            out.write("                href += \"");
            int evalDoAfterBody = _jspx_th_portlet_005factionURL_005f2.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
          if (_jspx_eval_portlet_005factionURL_005f2 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = _jspx_page_context.popBody();
          }
        }
        if (_jspx_th_portlet_005factionURL_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005fportlet_005factionURL_0026_005fwindowState.reuse(_jspx_th_portlet_005factionURL_005f2);
        _jspx_th_portlet_005factionURL_005f2_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005factionURL_005f2, _jsp_getInstanceManager(), _jspx_th_portlet_005factionURL_005f2_reused);
      }
      out.write("\";\n");
      out.write("                href += \"&expStructureInode=\"+structureInode+\"&expFieldsValues=\"+fieldsValues+\"&expCategoriesValues=\"+categoriesValues+\"&showDeleted=\"+showDeleted+\"&expCurrentSortBy=\"+currentSortBy+\"&filterSystemHost=\"+filterSystemHost+\"&filterLocked=\"+filterLocked+\"&filterUnpublish=\"+filterUnpublish;\n");
      out.write("\n");
      out.write("                /*if we have a date*/\n");
      out.write("                        var dateFrom= null;\n");
      out.write("                        var dateTo= null;\n");
      out.write("                        if((document.getElementById(\"lastModDateFrom\").value!=\"\")){\n");
      out.write("                                dateFrom = document.getElementById(\"lastModDateFrom\").value;\n");
      out.write("                                var dateFromsplit = dateFrom.split(\"/\");\n");
      out.write("                                if(dateFromsplit[0]< 10) dateFromsplit[0]= \"0\"+dateFromsplit[0]; if(dateFromsplit[1]< 10) dateFromsplit[1]= \"0\"+dateFromsplit[1];\n");
      out.write("                                dateFrom= dateFromsplit[2]+dateFromsplit[0]+dateFromsplit[1]+\"000000\";\n");
      out.write("                                href+= \"&modDateFrom=\"+dateFrom;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        if((document.getElementById(\"lastModDateTo\").value!=\"\")){\n");
      out.write("                                dateTo = document.getElementById(\"lastModDateTo\").value;\n");
      out.write("                                var dateTosplit = dateTo.split(\"/\");\n");
      out.write("                                if(dateTosplit[0]< 10) dateTosplit[0]= \"0\"+dateTosplit[0]; if(dateTosplit[1]< 10) dateTosplit[1]= \"0\"+dateTosplit[1];\n");
      out.write("                                dateTo= dateTosplit[2]+dateTosplit[0]+dateTosplit[1]+\"235959\";\n");
      out.write("                                href+= \"&modDateTo=\"+dateTo;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                window.location.href=href;\n");
      out.write("\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("        function copySearchForm(){\n");
      out.write("        \tvar newForm = document.createElement(\"form\");\n");
      out.write("            newForm.style = \"display: none\";\n");
      out.write("        \tnewForm.method=\"POST\";\n");
      out.write("        \tnewForm.target=\"AjaxActionJackson\";\n");
      out.write("         \tvar oldFormElements = document.getElementById(\"search_form\").elements;\n");
      out.write("\t\t\tfor (i=0; i < oldFormElements.length; i++){\n");
      out.write("\t\t\t    newForm.appendChild(oldFormElements[i].cloneNode(true));\n");
      out.write("\t\t  \t}\n");
      out.write("\n");
      out.write("\t\t  \t//var newForm = document.getElementById(\"search_form\").cloneNode(true);\n");
      out.write("        \tnewForm.name=\"form\" + formNum;\n");
      out.write("        \tnewForm.id=\"form\" + formNum;\n");
      out.write("            document.body.appendChild(newForm);\n");
      out.write("\n");
      out.write("\t\t  \treturn newForm;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function pushPublishSelectedContentlets() {\n");
      out.write("\n");
      out.write("            var selectedInodes = getSelectedInodes ();\n");
      out.write("\t\t\tpushHandler.showDialog(selectedInodes);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function addToBundleSelectedContentlets() {\n");
      out.write("\n");
      out.write("            var selectedInodes = getSelectedInodes ();\n");
      out.write("\t\t\tpushHandler.showAddToBundleDialog(selectedInodes, '");
      out.print(LanguageUtil.get(pageContext, "Add-To-Bundle"));
      out.write("');\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function reindexSelectedContentlets(){\n");
      out.write("                var form = copySearchForm()\n");
      out.write("            form.cmd.value = 'full_reindex_list';\n");
      out.write("                form.action = '");
      if (_jspx_meth_portlet_005factionURL_005f3(_jspx_page_context))
        return;
      out.write("';\n");
      out.write("\n");
      out.write("\n");
      out.write("          /*if we have a date*/\n");
      out.write("                        var dateFrom= null;\n");
      out.write("                        var dateTo= null;\n");
      out.write("                        if((document.getElementById(\"lastModDateFrom\").value!=\"\")){\n");
      out.write("                                dateFrom = document.getElementById(\"lastModDateFrom\").value;\n");
      out.write("                                var dateFromsplit = dateFrom.split(\"/\");\n");
      out.write("                                if(dateFromsplit[0]< 10) dateFromsplit[0]= \"0\"+dateFromsplit[0]; if(dateFromsplit[1]< 10) dateFromsplit[1]= \"0\"+dateFromsplit[1];\n");
      out.write("                                dateFrom= dateFromsplit[2]+dateFromsplit[0]+dateFromsplit[1]+\"000000\";\n");
      out.write("                                form.action+= \"&modDateFrom=\"+dateFrom;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        if((document.getElementById(\"lastModDateTo\").value!=\"\")){\n");
      out.write("                                dateTo = document.getElementById(\"lastModDateTo\").value;\n");
      out.write("                                var dateTosplit = dateTo.split(\"/\");\n");
      out.write("                                if(dateTosplit[0]< 10) dateTosplit[0]= \"0\"+dateTosplit[0]; if(dateTosplit[1]< 10) dateTosplit[1]= \"0\"+dateTosplit[1];\n");
      out.write("                                dateTo= dateTosplit[2]+dateTosplit[0]+dateTosplit[1]+\"235959\";\n");
      out.write("                                form.action+= \"&modDateTo=\"+dateTo;\n");
      out.write("                        }\n");
      out.write("            form.action+= \"&structure_id=");
      out.print(structure.getInode());
      out.write("\";\n");
      out.write("            form.submit();\n");
      out.write("            form.parentNode.removeChild(form);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\tfunction fakeAjaxCallback(){\n");
      out.write("\t\t\tclearAllContentsSelection();\n");
      out.write("\t\t\trefreshFakeJax();\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("        function structureChanged (sync) {\n");
      out.write("\t\t    if(sync != true)\n");
      out.write("\t\t            async = true;\n");
      out.write("\t\t    else\n");
      out.write("\t\t            async = false;\n");
      out.write("\n");
      out.write("\t\t    var form = document.getElementById(\"search_form\");\n");
      out.write("\t\t    var structureInode = dijit.byId('structure_inode').value;\n");
      out.write("\t\t    document.getElementById(\"structureInode\").value = structureInode;\n");
      out.write("\t\t    hasHostFolderField = false;\n");
      out.write("\t\t    loadingSearchFields = true;\n");
      out.write("\t\t    setDotFieldTypeStr = \"\";\n");
      out.write("\n");
      out.write("\t\t    StructureAjax.getSearchableStructureFields (structureInode,\n");
      out.write("\t\t            { callback:fillFields, async: async });\n");
      out.write("\t\t    StructureAjax.getStructureCategories (structureInode,\n");
      out.write("\t\t            { callback:fillCategories, async: async });\n");
      out.write("\n");
      out.write("\t\t    dwr.util.removeAllRows(\"results_table\");\n");
      out.write("\t\t    hideMatchingResults ();\n");
      out.write("\t\t    document.getElementById(\"nextDiv\").style.display = \"none\";\n");
      out.write("\t\t    document.getElementById(\"previousDiv\").style.display = \"none\";\n");
      out.write("\t\t    counter_radio = 0;\n");
      out.write("\t\t\tcounter_checkbox = 0;\n");
      out.write("\t\t    var div = document.getElementById(\"matchingResultsBottomDiv\")\n");
      out.write("\t\t    div.innerHTML = \"\";\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t    initAdvancedSearch();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function fieldName (field) {\n");
      out.write("             var type = field[\"fieldFieldType\"];\n");
      out.write("             if(type=='category' || type=='hidden'){\n");
      out.write("                  return \"\";\n");
      out.write("             }else{\n");
      out.write("                if ((3 < field[\"fieldContentlet\"].length) && (field[\"fieldContentlet\"].substring(0, 4) == \"date\")) {\n");
      out.write("                        var id = field[\"fieldStructureInode\"] + '_' + field[\"fieldContentlet\"];\n");
      out.write("\n");
      out.write("\t             dijit.registry.remove(\"tipMsg_\" + id);\n");
      out.write("\t                     if (dijit.byId(\"tipMsg_\" + id)) {\n");
      out.write("\t                             dijit.byId(\"tipMsg_\" + id).destroy();\n");
      out.write("\t                     }\n");
      out.write("\t                     if(field[\"fieldFieldType\"] == 'date')\n");
      out.write("\t                             var hintLabel = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "viewcontentlets.message.date.hint")) );
      out.write("';\n");
      out.write("\t                     if(field[\"fieldFieldType\"] == 'date_time')\n");
      out.write("\t                             var hintLabel = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "viewcontentlets.message.datetime.hint")) );
      out.write("';\n");
      out.write("\t                     else if(field[\"fieldFieldType\"] == 'time')\n");
      out.write("\t                             var hintLabel = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "viewcontentlets.message.time.hint")) );
      out.write("';\n");
      out.write("\t                     return field[\"fieldName\"] + \" <a href=\\\"#\\\" id=\\\"hint_\" + id + \"\\\">?</a>:<div dojoType=\\\"dijit.Tooltip\\\" connectId=\\\"hint_\" + id + \"\\\" label=\\\"\" + hintLabel + \"\\\"></div>\";\n");
      out.write("\t             } else {\n");
      out.write("\t                     var isOneOption = field[\"fieldValues\"].split(\"\\r\\n\").length === 1;\n");
      out.write("\t                     if (type === 'checkbox' && isOneOption || type === 'radio' && isOneOption) {\n");
      out.write("\t                         return field[\"fieldName\"];\n");
      out.write("\t                     } else {\n");
      out.write("\t                         return field[\"fieldName\"] + \":\";\n");
      out.write("\t                     }\n");
      out.write("\t             }\n");
      out.write("             }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function getSelectedInodes () {\n");
      out.write("\n");
      out.write("            var selectedInodes;\n");
      out.write("            if ( document.getElementById(\"fullCommand\").value == \"true\" ) {\n");
      out.write("\n");
      out.write("                /*\n");
      out.write("                 If we choose to select all the elements, not just the ones in the current page, we can't just\n");
      out.write("                 send the selected elements as we are using pagination, we only have track of the current page, for\n");
      out.write("                 that reason lets send the lucene query that returned the current values LESS the uncheked values.\n");
      out.write("                */\n");
      out.write("                var excludeInodes = \"\";\n");
      out.write("                if (unCheckedInodes != undefined && unCheckedInodes != null && unCheckedInodes.length > 0) {\n");
      out.write("\n");
      out.write("                    var inodesToExcludeColl = unCheckedInodes.split(\",\");\n");
      out.write("                    for (var i=0; i < inodesToExcludeColl.length; i++) {\n");
      out.write("                        if (inodesToExcludeColl[i] != \"\" && inodesToExcludeColl[i] != \" \" && inodesToExcludeColl[i] != \"-\" ) {\n");
      out.write("                            excludeInodes += \" inode:\" + inodesToExcludeColl[i];\n");
      out.write("                        }\n");
      out.write("                    }\n");
      out.write("                    //excludeInodes = unCheckedInodes.replace(/,/g, \" inode:\");\n");
      out.write("                    excludeInodes = \" -(\" + excludeInodes + \")\";\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                selectedInodes = \"query_\" + queryRaw + excludeInodes;\n");
      out.write("\n");
      out.write("            } else {\n");
      out.write("                selectedInodes = dojo.query(\"input[name='publishInode']\")\n");
      out.write("                                    .filter(function(x){return x.checked;})\n");
      out.write("                                    .map(function(x){return x.value;});\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            return selectedInodes;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("        function fillFields (data) {\n");
      out.write("                currentStructureFields = data;\n");
      out.write("                var htmlstr = \"\";\n");
      out.write("                var hasHostField = false;\n");
      out.write("                for(var i = 0; i < data.length; i++) {\n");
      out.write("                        var type = data[i][\"fieldFieldType\"];\n");
      out.write("                        if(type=='category' || type=='hidden'){\n");
      out.write("                                continue;\n");
      out.write("                        }\n");
      out.write("                        if(type=='host or folder'){\n");
      out.write("                           hasHostField = true;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        htmlstr += \"<dl class='vertical'>\";\n");
      out.write("                        htmlstr += \"<dt><label>\" + fieldName(data[i]) + \"</label></dt>\";\n");
      out.write("                        htmlstr += \"<dd style='min-height:0px'>\" + renderSearchField(data[i]) + \"</dd>\";\n");
      out.write("                        htmlstr += \"</dl>\";\n");
      out.write("                        htmlstr += \"<div class='clear'></div>\";\n");
      out.write("                }\n");
      out.write("                $('search_fields_table').update(htmlstr);\n");
      out.write("                ");
if(APILocator.getPermissionAPI().doesUserHavePermission(APILocator.getHostAPI().findSystemHost(), PermissionAPI.PERMISSION_READ, user, true)){
      out.write("\n");
      out.write("                  if(hasHostField){\n");
      out.write("                     dojo.byId(\"filterSystemHostTable\").style.display = \"\";\n");
      out.write("                  }else{\n");
      out.write("                     dojo.byId(\"filterSystemHostTable\").style.display = \"none\";\n");
      out.write("                  }\n");
      out.write("           ");
}
      out.write("\n");
      out.write("\n");
      out.write("                dojo.parser.parse(dojo.byId(\"search_fields_table\"));\n");
      out.write("                eval(setDotFieldTypeStr);\n");
      out.write("                loadingSearchFields = false;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("        var categories = new Array();\n");
      out.write("\n");
      out.write("        function fillCategories (data) {\n");
      out.write("\n");
      out.write("                var searchCategoryList = dojo.byId(\"search_categories_list\");\n");
      out.write("                searchCategoryList.innerHTML =\"\";\n");
      out.write("\n");
      out.write("\n");
      out.write("                var form = document.getElementById(\"search_form\");\n");
      out.write("                form.categories = null;\n");
      out.write("                if(form.categories != null){\n");
      out.write("                \tvar tempChildNodesLength = form.categories.childNodes.length;\n");
      out.write("                \tfor(var i = 0; i < tempChildNodesLength; i++){\n");
      out.write("                \t\tform.categories.removeChild(form.categories.childNodes[0]);\n");
      out.write("                \t}\n");
      out.write("                }\n");
      out.write("                dojo.require(\"dijit.form.MultiSelect\");\n");
      out.write("                if (data != null) {\n");
      out.write("                        categories = data;\n");
      out.write("                        for(i = 0;i< categories.length;i++){\n");
      out.write("                                dojo.create(\"dt\", { innerHTML: categories[i][\"categoryName\"] + \":\" }, searchCategoryList);\n");
      out.write("                                var selectId = categories[i][\"categoryName\"].replace(/[^A-Za-z0-9_]/g, \"\") + \"Select\";\n");
      out.write("                                dijit.registry.remove(selectId);\n");
      out.write("                                if(dijit.byId(selectId)){\n");
      out.write("                                        dijit.byId(selectId).destroy();\n");
      out.write("                                }\n");
      out.write("                                var selectObj = \"<select dojoType='dijit.form.MultiSelect' multiple='true' name=\\\"categories\\\" id=\\\"\" + selectId + \"\\\"></select>\";\n");
      out.write("\n");
      out.write("                                dojo.create(\"dd\", { innerHTML: selectObj }, searchCategoryList);\n");
      out.write("\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("\n");
      out.write("                }\n");
      out.write("\n");
      out.write("\n");
      out.write("                fillSelects();\n");
      out.write("                dojo.parser.parse(dojo.byId(\"search_categories_list\"));\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function fillSelects () {\n");
      out.write("\n");
      out.write("                for (var i = 0; i < categories.length; i++) {\n");
      out.write("                        var cat = categories[i];\n");
      out.write("                        var selectId = cat[\"categoryName\"].replace(/[^A-Za-z0-9_]/g, \"\") + \"Select\";\n");
      out.write("                        var mycallbackfnc = function(data) { fillCategorySelect(selectId, data); }\n");
      out.write("\n");
      out.write("                        CategoryAjax.getSubCategories(cat[\"inode\"], '', { callback: mycallbackfnc, async: false });\n");
      out.write("                }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function fillCategorySelect (selectId, data) {\n");
      out.write("                fillCategoryOptions (selectId, data);\n");
      out.write("                var selectObj = document.getElementById (selectId);\n");
      out.write("                if (data.length > 1) {\n");
      out.write("                        var len = data.length;\n");
      out.write("                        if (len > 9) len = 9;\n");
      out.write("                        selectObj.size = len;\n");
      out.write("                }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function getSelectedLanguageId () {\n");
      out.write("            var obj=dijit.byId('language_id');\n");
      out.write("            if(!obj)\n");
      out.write("                obj=dojo.byId('language_id');\n");
      out.write("            return obj.value;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function getSelectedWorkflowId(){\n");
      out.write("            var obj = dijit.byId(\"scheme_id\");\n");
      out.write("            if(!obj)\n");
      out.write("               obj = dojo.byId(\"scheme_id\");\n");
      out.write("            return obj.value;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function getSelectedStepId(){\n");
      out.write("           var obj = dijit.byId(\"step_id\");\n");
      out.write("           if(!obj)\n");
      out.write("              obj = dojo.byId(\"step_id\");\n");
      out.write("           return obj.value;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("        const debounce = (callback, time = 250, interval) =>\n");
      out.write("        (...args) => {\n");
      out.write("          clearTimeout(interval, interval = setTimeout(() => callback(...args), time));\n");
      out.write("\n");
      out.write("        }\n");
      out.write("        const debouncedSearch = debounce(doSearch1, 250);\n");
      out.write("\n");
      out.write("        var currentPage;\n");
      out.write("        function doSearch (page, sortBy) {\n");
      out.write("            if (page) {\n");
      out.write("                currentPage = page;\n");
      out.write("            } else {\n");
      out.write("                page = currentPage\n");
      out.write("            }\n");
      out.write("\t\t\t// Wait for the \"HostFolderFilteringSelect\" widget to end the values updating process before proceeding with the search, if necessary.\n");
      out.write("\t\t\tif (dijit.byId('FolderHostSelector') && dijit.byId('FolderHostSelector').attr('updatingSelectedValue')) {\n");
      out.write("\t\t\t        setTimeout(\"doSearch (\" + page + \", '\" + sortBy + \"');\", 250);\n");
      out.write("\t\t\t} else {\n");
      out.write("\t\t\t\tif(dijit.byId('structure_inode')){\n");
      out.write("\t\t\t\t    debouncedSearch(page, sortBy);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\telse{\n");
      out.write("\t\t\t\t    setTimeout(\"doSearch (\" + page + \", '\" + sortBy + \"');\", 250);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t}\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("        function doSearch1 (page, sortBy) {\n");
      out.write("\n");
      out.write("\n");
      out.write("                if (page == undefined || page == null ) {\n");
      out.write("                    //Unless we are using pagination we don't need to keep the All selection across searches\n");
      out.write("                    if(dijit.byId('checkAll')!= undefined)\n");
      out.write("                    \tclearAllContentsSelection();\n");
      out.write("                }\n");
      out.write("\n");
      out.write("\t            var structureInode;\n");
      out.write("\n");
      out.write("\n");
      out.write("\t            if(dijit.byId('structure_inode')) {\n");
      out.write("\t              structureInode  = dijit.byId('structure_inode').getValue();\n");
      out.write("\t            }\n");
      out.write("                \n");
      out.write("\n");
      out.write("\n");
      out.write("                cbContentInodeList = new Array();\n");
      out.write("                var fieldsValues = new Array ();\n");
      out.write("                if(currentStructureFields == undefined){\n");
      out.write("                        currentStructureFields = Array();\n");
      out.write("                }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("                var structureVelraw=dojo.byId(\"structureVelocityVarNames\").value;\n");
      out.write("                var structInoderaw=dojo.byId(\"structureInodesList\").value;\n");
      out.write("                var structureVel=structureVelraw.split(\";\");\n");
      out.write("                var structInode=structInoderaw.split(\";\");\n");
      out.write("                var selectedStruct=\"\";\n");
      out.write("                for(var m2=0; m2 <= structInode.length ; m2++ ){\n");
      out.write("\t\t             if(structureInode==structInode[m2]){\n");
      out.write("\t\t                 selectedStruct=structureVel[m2];\n");
      out.write("\t                 }\n");
      out.write("                 }\n");
      out.write("\n");
      out.write("                if (hasHostFolderField) {\n");
      out.write("                        getHostValue();\n");
      out.write("                }\n");
      out.write("                var hostValue = document.getElementById(\"hostField\").value;\n");
      out.write("                var folderValue = document.getElementById(\"folderField\").value;\n");
      out.write("                if (isInodeSet(hostValue)) {\n");
      out.write("                        fieldsValues[fieldsValues.length] = \"conHost\";\n");
      out.write("                        fieldsValues[fieldsValues.length] = hostValue;\n");
      out.write("                }\n");
      out.write("                if (isInodeSet(folderValue)) {\n");
      out.write("\n");
      out.write("                        fieldsValues[fieldsValues.length] = \"conFolder\";\n");
      out.write("                        fieldsValues[fieldsValues.length] = folderValue;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                let schemeId = dijit.byId(\"scheme_id\").getValue();\n");
      out.write("                if (\"catchall\"!= schemeId) {\n");
      out.write("\n");
      out.write("                    fieldsValues[fieldsValues.length] = \"wfscheme\";\n");
      out.write("                    fieldsValues[fieldsValues.length] = schemeId;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                let stepId = dijit.byId(\"step_id\").getValue();\n");
      out.write("                if (\"catchall\"!= stepId) {\n");
      out.write("\n");
      out.write("                    fieldsValues[fieldsValues.length] = \"wfstep\";\n");
      out.write("                    fieldsValues[fieldsValues.length] = stepId;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var allField = dijit.byId(\"allFieldTB\").getValue();\n");
      out.write("\n");
      out.write("\t\t\t\tif (allField != undefined && allField.length>0 ) {\n");
      out.write("\n");
      out.write("                        fieldsValues[fieldsValues.length] = \"catchall\";\n");
      out.write("                        fieldsValues[fieldsValues.length] = allField + \"*\";\n");
      out.write("\t\t\t\t}\n");
      out.write("                for (var j = 0; j < currentStructureFields.length; j++) {\n");
      out.write("                        var field = currentStructureFields[j];\n");
      out.write("            \t\t\tvar fieldId = selectedStruct+\".\"+field[\"fieldVelocityVarName\"] + \"Field\";\n");
      out.write("                        var formField = document.getElementById(fieldId);\n");
      out.write("                        var fieldValue = \"\";\n");
      out.write("\n");
      out.write("                        if(formField != null){\n");
      out.write("                                if(dojo.attr(formField.id,DOT_FIELD_TYPE) == 'select'){\n");
      out.write("\n");
      out.write("                                        var tempDijitObj = dijit.byId(formField.id);\n");
      out.write("                                        fieldsValues[fieldsValues.length] = selectedStruct+\".\"+field[\"fieldVelocityVarName\"];\n");
      out.write("\n");
      out.write("                                        if (/\\s/.test(tempDijitObj.value)) {\n");
      out.write("\n");
      out.write("                                            fieldsValues[fieldsValues.length] = '\"' + tempDijitObj.value + '\"';\n");
      out.write("                                        } else {\n");
      out.write("\n");
      out.write("                                            fieldsValues[fieldsValues.length] = tempDijitObj.value;\n");
      out.write("                                        }\n");
      out.write("                                }else if(formField.type=='select-one' || formField.type=='select-multiple') {\n");
      out.write("\n");
      out.write("                                     var values = \"\";\n");
      out.write("                                     for (var i=0; i<formField.options.length; i++) {\n");
      out.write("                                            if (formField.options[i].selected) {\n");
      out.write("                                              fieldsValues[fieldsValues.length] = selectedStruct+\".\"+field[\"fieldVelocityVarName\"];\n");
      out.write("                                              fieldsValues[fieldsValues.length] = formField.options[i].value;\n");
      out.write("\n");
      out.write("                                            }\n");
      out.write("                                          }\n");
      out.write("\n");
      out.write("                                }else {\n");
      out.write("                                        fieldsValues[fieldsValues.length] = selectedStruct+\".\"+field[\"fieldVelocityVarName\"];\n");
      out.write("                                        fieldsValues[fieldsValues.length] = formField.value;\n");
      out.write("\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                }\n");
      out.write("\n");
      out.write("        \t\tfor(var i=0;i < radiobuttonsIds.length ;i++ ){\n");
      out.write("                        var formField = document.getElementById(radiobuttonsIds[i]);\n");
      out.write("                        if(formField != null && formField.type=='radio') {\n");
      out.write("                            var values = \"\";\n");
      out.write("                                if (formField.checked) {\n");
      out.write("                                        values = formField.value;\n");
      out.write("                                        fieldsValues[fieldsValues.length] = formField.name;\n");
      out.write("                                        fieldsValues[fieldsValues.length] = values;\n");
      out.write("                                }\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                for(var i=0;i < checkboxesIds.length ;i++ ){\n");
      out.write("                        var formField = document.getElementById(checkboxesIds[i]);\n");
      out.write("                        if(formField != null && formField.type=='checkbox') {\n");
      out.write("                            var values = \"\";\n");
      out.write("                                if (formField.checked) {\n");
      out.write("                                        values = formField.value;\n");
      out.write("                                        fieldsValues[fieldsValues.length] = formField.name;\n");
      out.write("                                        fieldsValues[fieldsValues.length] = values;\n");
      out.write("                                }\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                if(getSelectedLanguageId() != 0){\n");
      out.write("                \tfieldsValues[fieldsValues.length] = \"languageId\";\n");
      out.write("                \tfieldsValues[fieldsValues.length] = getSelectedLanguageId();\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                if(getSelectedLanguageId() == \"\"){\n");
      out.write("                        dijit.byId('language_id').focus() ;\n");
      out.write("                        return false;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // if we have an identifier\n");
      out.write("            if(isInodeSet(document.getElementById(\"Identifier\").value)){\n");
      out.write("            var contentId = \"\";\n");
      out.write("                fieldsValues[fieldsValues.length] = \"identifier\";\n");
      out.write("                contentId = document.getElementById(\"Identifier\").value;\n");
      out.write("                    fieldsValues[fieldsValues.length] = contentId;\n");
      out.write("            }\n");
      out.write("                var categoriesValues = new Array ();\n");
      out.write("                var form = document.getElementById(\"search_form\");\n");
      out.write("                var categories = document.getElementsByName(\"categories\");\n");
      out.write("\n");
      out.write("                if (categories != null) {\n");
      out.write("                        if (categories.options != null) {\n");
      out.write("                                var opts = categories.options;\n");
      out.write("                                for (var j = 0; j < opts.length; j++) {\n");
      out.write("                                        var option = opts[j];\n");
      out.write("                                        if (option.selected) {\n");
      out.write("                                                categoriesValues[categoriesValues.length] = option.value;\n");
      out.write("                                        }\n");
      out.write("                                }\n");
      out.write("                        } else {\n");
      out.write("                                for (var i = 0; i < categories.length; i++) {\n");
      out.write("                                        var catSelect = categories[i];\n");
      out.write("                                        var opts = catSelect.options;\n");
      out.write("                                        for (var j = 0; j < opts.length; j++) {\n");
      out.write("                                                var option = opts[j];\n");
      out.write("                                                if (option.selected) {\n");
      out.write("                                                        categoriesValues[categoriesValues.length] = option.value;\n");
      out.write("                                                }\n");
      out.write("                                        }\n");
      out.write("                                }\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                if (page == null)\n");
      out.write("                        currentPage = 1;\n");
      out.write("                else\n");
      out.write("                        currentPage = page;\n");
      out.write("\n");
      out.write("                if (sortBy != null && sortBy != \"undefined\") {\n");
      out.write("                        if (sortBy == currentSortBy && sortBy.indexOf(\"desc\")==-1)\n");
      out.write("                                sortBy = sortBy + \" desc\";\n");
      out.write("                        currentSortBy = sortBy;\n");
      out.write("                }\n");
      out.write("                else {\n");
      out.write("                        sortBy=document.getElementById('currentSortBy').value;\n");
      out.write("                }\n");
      out.write("               \n");
      out.write("\n");
      out.write("                var filterSystemHost = false;\n");
      out.write("                if (document.getElementById(\"filterSystemHostCB\").checked && document.getElementById(\"filterSystemHostTable\").style.display != \"none\") {\n");
      out.write("                        filterSystemHost = true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var filterLocked = false;\n");
      out.write("\n");
      out.write("                if (dijit.byId(\"showingSelect\").getValue() == \"locked\") {\n");
      out.write("                        filterLocked = true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var filterUnpublish = false;\n");
      out.write("                if (dijit.byId(\"showingSelect\").getValue() == \"unpublished\") {\n");
      out.write("                       filterUnpublish = true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                var showDeleted = false;\n");
      out.write("                if (dijit.byId(\"showingSelect\").getValue() == \"archived\") {\n");
      out.write("                        showDeleted = true;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                dijit.byId(\"searchButton\").attr(\"disabled\", true);\n");
      out.write("                //dijit.byId(\"clearButton\").attr(\"disabled\", false);\n");
      out.write("\n");
      out.write("                document.getElementById('fieldsValues').value = fieldsValues;\n");
      out.write("                document.getElementById('categoriesValues').value = categoriesValues;\n");
      out.write("                document.getElementById('showDeleted').value = showDeleted;\n");
      out.write("                document.getElementById('currentSortBy').value = currentSortBy;\n");
      out.write("                document.getElementById('filterSystemHost').value = filterSystemHost;\n");
      out.write("                document.getElementById('filterLocked').value = filterLocked;\n");
      out.write("                document.getElementById('filterUnpublish').value = filterUnpublish;\n");
      out.write("                if(isInodeSet(structureInode) || \"catchall\" == structureInode){\n");
      out.write("                        var dateFrom=null;\n");
      out.write("                        var dateTo= null;\n");
      out.write("                        if((document.getElementById(\"lastModDateFrom\").value!=\"\")){\n");
      out.write("                                dateFrom = document.getElementById(\"lastModDateFrom\").value;\n");
      out.write("                                var dateFromsplit = dateFrom.split(\"/\");\n");
      out.write("                                if(dateFromsplit[0]< 10) dateFromsplit[0]= \"0\"+dateFromsplit[0]; if(dateFromsplit[1]< 10) dateFromsplit[1]= \"0\"+dateFromsplit[1];\n");
      out.write("                                dateFrom= dateFromsplit[2]+dateFromsplit[0]+dateFromsplit[1]+\"000000\";\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        if((document.getElementById(\"lastModDateTo\").value!=\"\")){\n");
      out.write("                                dateTo = document.getElementById(\"lastModDateTo\").value;\n");
      out.write("                                var dateTosplit = dateTo.split(\"/\");\n");
      out.write("                                if(dateTosplit[0]< 10) dateTosplit[0]= \"0\"+dateTosplit[0]; if(dateTosplit[1]< 10) dateTosplit[1]= \"0\"+dateTosplit[1];\n");
      out.write("                                dateTo= dateTosplit[2]+dateTosplit[0]+dateTosplit[1]+\"235959\";\n");
      out.write("                        }\n");
      out.write("                        if(\"catchall\" == structureInode){\n");
      out.write("                            ");
if(request.getAttribute("contentTypesJs")!=null){ 
      out.write("\n");
      out.write("                               // setting this to an array\n");
      out.write("                                structureInode = \"");
      out.print(request.getAttribute("contentTypesJs") );
      out.write("\";\n");
      out.write("                            ");
} 
      out.write("\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        ContentletAjax.searchContentlets (structureInode, fieldsValues, categoriesValues, showDeleted, filterSystemHost, filterUnpublish, filterLocked, currentPage, currentSortBy, dateFrom, dateTo, fillResults);\n");
      out.write("\n");
      out.write("                }\n");
      out.write("\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function nextPage () {\n");
      out.write("                doSearch (currentPage + 1);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function previousPage () {\n");
      out.write("        \tif(parseInt(currentPage-1) > 0)\n");
      out.write("                doSearch (currentPage - 1);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function noResults (data) {\n");
      out.write("                return \"<div class='noResultsMessage'>");
      out.print( LanguageUtil.get(pageContext, "No-Results-Found") );
      out.write("</div>\";\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function checkUncheckAll() {\n");
      out.write("                var checkAll = dijit.byId(\"checkAll\");\n");
      out.write("                var check;\n");
      out.write("\n");
      out.write("                for (var i = 0; i < cbContentInodeList.length; ++i) {\n");
      out.write("                        check = dijit.byId(\"checkbox\" + i);\n");
      out.write("                        if(check) {\n");
      out.write("                                check.setChecked(checkAll.checked);\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("                if (checkAll.checked) {\n");
      out.write("                        selectAllContentsMessage();\n");
      out.write("                }else{\n");
      out.write("                        clearAllContentsMessage();\n");
      out.write("                }\n");
      out.write("                togglePublish();\n");
      out.write("\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function selectAllContentsMessage() {\n");
      out.write("                var checkAll = document.getElementById(\"checkAll\");\n");
      out.write("                var table = $('tablemessage');\n");
      out.write("                if (checkAll.checked) {\n");
      out.write("                        var html = '' +\n");
      out.write("                                '       ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "all")) );
      out.write(" ' + cbContentInodeList.length + ' ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "contents-on-this-page-are-selected")) );
      out.write("';\n");
      out.write("                                if (perPage < totalContents) {\n");
      out.write("                                        html += ' <a href=\"javascript: selectAllContents()\" style=\"text-decoration: underline;\"> ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Select-all" )) );
      out.write(" ' + totalContents + ' ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "content-s" )) );
      out.write(".</a>';\n");
      out.write("                                }\n");
      out.write("                        html+= '';\n");
      out.write("                        table.update(html);\n");
      out.write("                        document.getElementById(\"fullCommand\").value = \"false\";\n");
      out.write("                }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function selectAllContents()\n");
      out.write("        {\n");
      out.write("                var table = $('tablemessage');\n");
      out.write("                        var html = '' +\n");
      out.write("                '       ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "all" )) );
      out.write(" ' + totalContents + ' ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "contents-on-this-page-are-selected" )) );
      out.write("' +\n");
      out.write("                '       <a href=\"javascript: clearAllContentsSelection()\">");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Clear-Selection" )) );
      out.write(".</a>' +\n");
      out.write("                '';\n");
      out.write("                table.update(html);\n");
      out.write("                document.getElementById(\"fullCommand\").value = \"true\";\n");
      out.write("                //document.getElementById(\"structureInode\").value=\"");
      out.print(structureSelected );
      out.write("\";\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function clearAllContentsSelection() {\n");
      out.write("                dijit.byId('checkAll').attr('checked',false);\n");
      out.write("                checkUncheckAll();\n");
      out.write("                clearAllContentsMessage();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function clearAllContentsMessage()      {\n");
      out.write("                $('tablemessage').innerHTML = \" &nbsp \";\n");
      out.write("                unCheckedInodes = \"\";\n");
      out.write("                document.getElementById('allUncheckedContentsInodes').value = \"\";\n");
      out.write("                document.getElementById(\"fullCommand\").value = \"false\";\n");
      out.write("                return true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function getHeader (field) {\n");
      out.write("                var fieldContentlet = field[\"fieldVelocityVarName\"];\n");
      out.write("                var fieldName = field[\"fieldName\"];\n");
      out.write("                var stVar = field[\"fieldStructureVarName\"];\n");
      out.write("                if(fieldContentlet == '__title__'){\n");
      out.write("                \treturn \"<a href=\\\"javascript: doSearch (1, 'title')\\\">\" + fieldName + \"</a>\";\n");
      out.write("                }else if(fieldContentlet == '__type__'){\n");
      out.write("                \treturn \"<a href=\\\"javascript: doSearch (1, 'structurename')\\\">\" + fieldName + \"</a>\";\n");
      out.write("                }else if(fieldContentlet == '__wfstep__'){\n");
      out.write("                    return \"<a href=\\\"javascript: doSearch (1, 'wfCurrentStepName')\\\">\" + fieldName + \"</a>\";\n");
      out.write("                }else{\n");
      out.write("                \treturn \"<a href=\\\"javascript: doSearch (1, '\" + stVar + \".\" + fieldContentlet + \"')\\\">\" + fieldName + \"</a>\";\n");
      out.write("                }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* Displays the Push Publish dialog. If the content is archived, allow\n");
      out.write("        users to ONLY do a \"Remove\", not a \"Push\" or \"Push & Remove\". */\n");
      out.write("        function remotePublish(objId, referrer, isArchived) {\n");
      out.write("            pushHandler.showDialog(objId, false, isArchived);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function fillResultsTable (headers, data) {\n");
      out.write("                headerLength = headers.length;\n");
      out.write("                var table = document.getElementById(\"results_table\");\n");
      out.write("\n");
      out.write("                //Filling Headers\n");
      out.write("                var row = table.insertRow(table.rows.length);\n");
      out.write("\n");
      out.write("                var th = document.createElement('th');\n");
      out.write("                th.setAttribute(\"width\",\"5%\");\n");
      out.write("                th.innerHTML = '&nbsp;';\n");
      out.write("                row.appendChild(th);\n");
      out.write("\n");
      out.write("\t\t\t\tif(languages.length>1) {\n");
      out.write("\t                th = document.createElement('th');\n");
      out.write("\t                th.setAttribute(\"style\",\"width:70px;\");\n");
      out.write("\t                th.innerHTML = '&nbsp;';\n");
      out.write("\t                row.appendChild(th);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                for (var i = 0; i < headers.length; i++) {\n");
      out.write("                        var header = headers[i];\n");
      out.write("                        th = document.createElement('th');\n");
      out.write("                        if (i == 0) {\n");
      out.write("\n");
      out.write("                                th.innerHTML = '&nbsp;';\n");
      out.write("                                if(dijit.byId(\"checkAll\")){\n");
      out.write("                                        dijit.byId(\"checkAll\").destroy();\n");
      out.write("                                }\n");
      out.write("                                th.setAttribute(\"valign\",\"bottom\");\n");
      out.write("                                th.setAttribute(\"nowrap\",\"true\");\n");
      out.write("                                th.innerHTML = '<input type=\"checkbox\" dojoType=\"dijit.form.CheckBox\" name=\"checkAll\" id=\"checkAll\" onclick=\"checkUncheckAll()\">&nbsp;&nbsp;' + getHeader(header);\n");
      out.write("                                row.appendChild(th);\n");
      out.write("                        } else {\n");
      out.write("                        th.innHTML =\n");
      out.write("                                th.innerHTML = getHeader(header);\n");
      out.write("                                th.setAttribute(\"valign\",\"bottom\");\n");
      out.write("                                row.appendChild(th);\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("                th = document.createElement('th');\n");
      out.write("\t\t\t\tth.setAttribute(\"valign\",\"bottom\");\n");
      out.write("\t\t\t\tth.style.width=\"120px\";\n");
      out.write("                th.innerHTML = \"<a href=\\\"javascript: doSearch (1, 'modUser')\\\">");
      out.print( LanguageUtil.get(pageContext, "Last-Editor") );
      out.write("</a>\";\n");
      out.write("                row.appendChild(th);\n");
      out.write("\n");
      out.write("                th = document.createElement('th');\n");
      out.write("\t\t\t\tth.setAttribute(\"valign\",\"bottom\");\n");
      out.write("\t\t\t\tth.style.width=\"120px\";\n");
      out.write("                th.innerHTML = \"<a class=\\\"beta\\\" href=\\\"javascript: doSearch (1, 'modDate')\\\">");
      out.print( LanguageUtil.get(pageContext, "Last-Edit-Date") );
      out.write("</a>\";\n");
      out.write("                row.appendChild(th);\n");
      out.write("\n");
      out.write("                th = document.createElement('th');\n");
      out.write("                row.appendChild(th);\n");
      out.write("\n");
      out.write("                var languageId;\n");
      out.write("                var locale;\n");
      out.write("\n");
      out.write("                var live;\n");
      out.write("                var working;\n");
      out.write("                var deleted;\n");
      out.write("                var locked;\n");
      out.write("                var liveSt;\n");
      out.write("                var workingSt;\n");
      out.write("                var permissions;\n");
      out.write("                var write;\n");
      out.write("                var publish;\n");
      out.write("                var popupMenusDiv = dojo.byId(\"results_table_popup_menus\");\n");
      out.write("                var popupMenu = \"\";\n");
      out.write("                var popupMenu2 = \"\";\n");
      out.write("                var wfActionMapList;\n");
      out.write("                var structure_id;\n");
      out.write("                var contentStructureType;\n");
      out.write("\n");
      out.write("                //Filling data\n");
      out.write("                for (var i = 0; i < data.length; i++) {\n");
      out.write("                        var popupMenuItems = \"\";\n");
      out.write("                        var row = table.insertRow(table.rows.length);\n");
      out.write("\n");
      out.write("                        var cellData = data[i];\n");
      out.write("                        row.setAttribute(\"id\",\"tr\" + cellData.inode);\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("                        var cell = row.insertCell (row.cells.length);\n");
      out.write("                        cell.style.whiteSpace=\"nowrap\";\n");
      out.write("\n");
      out.write("                        cell.innerHTML = statusDataCell(cellData, i);\n");
      out.write("                        for (var j = 0; j < headers.length; j++) {\n");
      out.write("                                var header = headers[j];\n");
      out.write("                                var cell = row.insertCell (row.cells.length);\n");
      out.write("                                cell.setAttribute(\"align\",\"left\");\n");
      out.write("                                if (j == 0 ) {\n");
      out.write("\n");
      out.write("                                \tif(languages.length>1){\n");
      out.write("                                \t\tcell.setAttribute(\"nowrap\",\"true\");\n");
      out.write("                                        languageId = cellData[\"languageId\"];\n");
      out.write("                                        locale = \"\";\n");
      out.write("\n");
      out.write("                                        for (var n = 0; n < languages.length; ++n) {\n");
      out.write("                                            if (languages[n][0] == languageId) {\n");
      out.write("                                            \tdisplayLang = languages[n][1];\n");
      out.write("                                            \tif(languages[n][2]){\n");
      out.write("                                            \t\tdisplayLang += \"_\" + languages[n][2];\n");
      out.write("                                            \t}\n");
      out.write("\t                                            locale = \"<img style='margin-top: 3px;' src='/html/images/languages/\" + languages[n][5] + \".gif' width='16px' height='11px' />&nbsp;(\" + displayLang + \")\";\n");
      out.write("\t                                            break;\n");
      out.write("                                        \t}\n");
      out.write("                                        }\n");
      out.write("\n");
      out.write("                                        if (locale == \"\"){\n");
      out.write("                                        \tlocale = \"&nbsp;\";\n");
      out.write("\t\t\t\t\t\t\t\t\t\t}\n");
      out.write("                                        cell.innerHTML = locale;\n");
      out.write("                                        cell = row.insertCell (row.cells.length);\n");
      out.write("                                        cell.setAttribute(\"align\",\"left\");\n");
      out.write("\t\t\t\t\t\t\t\t\t}\n");
      out.write("                                    var value = titleCell(cellData,cellData[header[\"fieldVelocityVarName\"]], i);\n");
      out.write("                                }\n");
      out.write("                                else{\n");
      out.write("                                    var value = cellData[header[\"fieldVelocityVarName\"]];\n");
      out.write("                                }\n");
      out.write("                                if (value != null){\n");
      out.write("                                \tcell.innerHTML = value;\n");
      out.write("                                }\n");
      out.write("                        }\n");
      out.write("                        var cell = row.insertCell (row.cells.length);\n");
      out.write("                        cell.innerHTML = cellData[\"modUser\"];\n");
      out.write("                        cell.style.whiteSpace=\"nowrap\";\n");
      out.write("\n");
      out.write("                        var cell = row.insertCell (row.cells.length);\n");
      out.write("                        cell.setAttribute(\"nowrap\",\"true\");\n");
      out.write("                        cell.style.textAlign=\"right\";\n");
      out.write("                        cell.style.whiteSpace=\"nowrap\";\n");
      out.write("                        cell.innerHTML = cellData[\"modDate\"];\n");
      out.write("\n");
      out.write("                        var cell = row.insertCell (row.cells.length);\n");
      out.write("                        cell.innerHTML = '<span class=\\\"dijitIcon actionIcon content-search__action-item\\\" id=\\\"touchAction' + i + '\\\"></span>';\n");
      out.write("\n");
      out.write("                        live = cellData[\"live\"] == \"true\"?true:false;\n");
      out.write("                        working = cellData[\"working\"] == \"true\"?true:false;\n");
      out.write("                        deleted = cellData[\"deleted\"] == \"true\"?true:false;\n");
      out.write("                        locked = cellData[\"locked\"] == \"true\"?true:false;\n");
      out.write("                        liveSt = live?\"1\":\"0\";\n");
      out.write("                        workingSt = working?\"1\":\"0\";\n");
      out.write("                        permissions = cellData[\"permissions\"];\n");
      out.write("                        read = userHasReadPermission (cellData, userId)?\"1\":\"0\";\n");
      out.write("                        write = userHasWritePermission (cellData, userId)?\"1\":\"0\";\n");
      out.write("                        publish = userHasPublishPermission (cellData, userId)?\"1\":\"0\";\n");
      out.write("                        contentStructureType = cellData[\"contentStructureType\"];\n");
      out.write("                        structure_id = cellData[\"structureInode\"];\n");
      out.write("                        hasLiveVersion = cellData[\"hasLiveVersion\"];\n");
      out.write("\n");
      out.write("                        contentAdmin = new dotcms.dijit.contentlet.ContentAdmin(cellData.identifier,cellData.inode,cellData.languageId);\n");
      out.write("\n");
      out.write("                        wfActionMapList = JSON.parse(cellData[\"wfActionMapList\"]);\n");
      out.write("\n");
      out.write("                        dijit.registry.remove(\"popupTr\"+i);\n");
      out.write("\n");
      out.write("                \t\tif(dijit.byId(\"popupTr\"+i)){\n");
      out.write("                            dijit.byId(\"popupTr\"+i).destroy();\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        dijit.registry.remove(\"popup2Tr\"+i);\n");
      out.write("\n");
      out.write("                        if(dijit.byId(\"popup2Tr\"+i)){\n");
      out.write("                            dijit.byId(\"popup2Tr\"+i).destroy();\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("\n");
      out.write("                        popupMenu += \"<div dojoType=\\\"dijit.Menu\\\" class=\\\"dotContextMenu\\\" id=\\\"popupTr\" + i + \"\\\" contextMenuForWindow=\\\"false\\\" style=\\\"display: none;\\\" targetNodeIds=\\\"tr\" + cellData.inode + \"\\\">\";\n");
      out.write("                        popupMenu2 += \"<div dojoType=\\\"dijit.Menu\\\" class=\\\"dotContextMenu\\\" id=\\\"popup2Tr\" + i + \"\\\" leftClickToOpen=\\\"true\\\" contextMenuForWindow=\\\"false\\\" style=\\\"display: none;\\\" targetNodeIds=\\\"touchAction\" + i + \"\\\">\";\n");
      out.write("\n");
      out.write("                        // NEW CONTEXT MENU\n");
      out.write("\n");
      out.write("                        if ((live || working) && (read==\"1\") && (!deleted)) {\n");
      out.write("                                if(structure_id == '");
      out.print(calendarEventSt.getInode() );
      out.write("'){\n");
      out.write("                                  if (write==\"1\"){\n");
      out.write("                                    popupMenuItems += \"<div dojoType=\\\"dijit.MenuItem\\\" iconClass=\\\"editIcon\\\" onClick=\\\"editEvent('\" + cellData.inode + \"','");
      out.print( user.getUserId() );
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print( referer );
      out.write("',\" + liveSt + \",\" + workingSt + \",\" + write + \");\\\">");
      out.print(LanguageUtil.get(pageContext, "Edit") );
      out.write("</div>\";\n");
      out.write("                                  }else{\n");
      out.write("                                    popupMenuItems += \"<div dojoType=\\\"dijit.MenuItem\\\" iconClass=\\\"editIcon\\\" onClick=\\\"editEvent('\" + cellData.inode + \"','");
      out.print( user.getUserId() );
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print( referer );
      out.write("',\" + liveSt + \",\" + workingSt + \",\" + write + \");\\\">");
      out.print(LanguageUtil.get(pageContext, "View") );
      out.write("</div>\";\n");
      out.write("                                  }\n");
      out.write("                                }else{\n");
      out.write("                                  if (write==\"1\"){\n");
      out.write("                                    popupMenuItems += \"<div dojoType=\\\"dijit.MenuItem\\\" iconClass=\\\"editIcon\\\" onClick=\\\"editContentlet('\" + cellData.inode + \"','");
      out.print( user.getUserId() );
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print( referer );
      out.write("',\" + liveSt + \",\" + workingSt + \",\" + write + \");\\\">");
      out.print(LanguageUtil.get(pageContext, "Edit") );
      out.write("</div>\";\n");
      out.write("                                  }else{\n");
      out.write("                                    popupMenuItems += \"<div dojoType=\\\"dijit.MenuItem\\\" iconClass=\\\"editIcon\\\" onClick=\\\"editContentlet('\" + cellData.inode + \"','");
      out.print( user.getUserId() );
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print( referer );
      out.write("',\" + liveSt + \",\" + workingSt + \",\" + write + \");\\\">");
      out.print(LanguageUtil.get(pageContext, "View") );
      out.write("</div>\";\n");
      out.write("                                  }\n");
      out.write("                                }\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("\n");
      out.write("                        for (var k = 0; k < wfActionMapList.length; k++) {\n");
      out.write("\t\t\t\t\t\t\tvar name = wfActionMapList[k].name;\n");
      out.write("\t\t\t\t\t\t\tvar id = wfActionMapList[k].id;\n");
      out.write("\t\t\t\t\t\t\tvar assignable = wfActionMapList[k].assignable;\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\tvar commentable = wfActionMapList[k].commentable;\n");
      out.write("\t\t\t\t\t\t\tvar icon = wfActionMapList[k].icon;\n");
      out.write("\t\t\t\t\t\t\tvar requiresCheckout = wfActionMapList[k].requiresCheckout;\n");
      out.write("\t\t\t\t\t\t\tvar wfActionNameStr = wfActionMapList[k].wfActionNameStr;\n");
      out.write("\t\t\t\t\t\t\tvar hasPushPublishActionlet = wfActionMapList[k].hasPushPublishActionlet;\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\tpopupMenuItems += \"<div dojoType=\\\"dijit.MenuItem\\\" iconClass=\\\"\"+icon+\"\\\" onClick=\\\"contentAdmin.executeWfAction('\" + id + \"', '\" + assignable + \"', '\" + commentable + \"', '\" + hasPushPublishActionlet + \"', '\" + cellData.inode + \"');\\\">\"+wfActionNameStr+\"</div>\";\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("                        if(enterprise && sendingEndpoints ) {\n");
      out.write("                                popupMenuItems += \"<div dojoType=\\\"dijit.MenuItem\\\" iconClass=\\\"sServerIcon\\\" onClick=\\\"remotePublish('\" + cellData.inode + \"','");
      out.print( referer );
      out.write("', \" + deleted + \");\\\">");
      out.print(LanguageUtil.get(pageContext, "Remote-Publish") );
      out.write("</div>\";\n");
      out.write("\n");
      out.write("                                popupMenuItems += \"<div dojoType=\\\"dijit.MenuItem\\\" iconClass=\\\"bundleIcon\\\" onClick=\\\"addToBundle('\" + cellData.inode + \"','");
      out.print( referer );
      out.write("');\\\">");
      out.print(LanguageUtil.get(pageContext, "Add-To-Bundle") );
      out.write("</div>\";\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t// END NEW CONTEXT\n");
      out.write("\n");
      out.write("                        if (locked && (write==\"1\")){\n");
      out.write("                          if(structure_id == '");
      out.print(calendarEventSt.getInode() );
      out.write("'){\n");
      out.write("                                popupMenuItems += \"<div dojoType=\\\"dijit.MenuItem\\\" iconClass=\\\"unlockIcon\\\" onClick=\\\"unlockEvent('\" + cellData.inode + \"','");
      out.print( user.getUserId() );
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print( referer );
      out.write("',\" + liveSt + \",\" + workingSt + \",\" + write + \");\\\">");
      out.print(LanguageUtil.get(pageContext, "Unlock") );
      out.write("</div>\";\n");
      out.write("                          }else{\n");
      out.write("                                popupMenuItems += \"<div dojoType=\\\"dijit.MenuItem\\\" iconClass=\\\"unlockIcon\\\" onClick=\\\"_unlockAsset('\" + cellData.inode + \"');\\\">");
      out.print(LanguageUtil.get(pageContext, "Unlock") );
      out.write("</div>\";\n");
      out.write("                          }\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        popupMenu += popupMenuItems + \"</div>\";\n");
      out.write("                        popupMenu2 += popupMenuItems + \"</div>\";\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                popupMenusDiv.innerHTML = popupMenu + popupMenu2;\n");
      out.write("\n");
      out.write("\n");
      out.write("                dojo.parser.parse(dojo.byId(\"results_table_popup_menus\"));\n");
      out.write("                dojo.parser.parse(dojo.byId(\"results_table\"));\n");
      out.write("\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function clearSearch () {\n");
      out.write("\n");
      out.write("\n");
      out.write("                dijit.byId(\"scheme_id\").set(\"value\",'catchall');\n");
      out.write("     \t\t\tdijit.byId(\"showingSelect\").set(\"value\", \"all\");\n");
      out.write("     \t\t\tdijit.byId(\"allFieldTB\").set(\"value\", \"\");\n");
      out.write("\n");
      out.write("                var div = document.getElementById(\"matchingResultsBottomDiv\");\n");
      out.write("                div.innerHTML = \"\";\n");
      out.write("                div = document.getElementById(\"metaMatchingResultsDiv\");\n");
      out.write("                div.style.display='none';\n");
      out.write("\n");
      out.write("                for (var i = 0; i < categories.length; i++) {\n");
      out.write("                        var mainCat = categories[i];\n");
      out.write("                        var selectId = mainCat[\"categoryName\"].replace(/[^A-Za-z0-9_]/g, \"\") + \"Select\";\n");
      out.write("                        var selectObj = document.getElementById(selectId);\n");
      out.write("                        var options = selectObj.options;\n");
      out.write("                        for (var j = 0; j < options.length; j++) {\n");
      out.write("                                var opt = options[j];\n");
      out.write("                                opt.selected = false;\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("                var structureInode = dijit.byId('structure_inode').value;\n");
      out.write("                var structureVelraw=dojo.byId(\"structureVelocityVarNames\").value;\n");
      out.write("                var structInoderaw=dojo.byId(\"structureInodesList\").value;\n");
      out.write("                var structureVel=structureVelraw.split(\";\");\n");
      out.write("                var structInode=structInoderaw.split(\";\");\n");
      out.write("                var selectedStruct=\"\";\n");
      out.write("                for(var m2=0; m2 <= structInode.length ; m2++ ){\n");
      out.write("             if(structureInode==structInode[m2]){\n");
      out.write("                 selectedStruct=structureVel[m2];\n");
      out.write("                 }\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("\n");
      out.write("                for (var h = 0; h < currentStructureFields.length; h++) {\n");
      out.write("                        var field = currentStructureFields[h];\n");
      out.write("                        var fieldId = selectedStruct+\".\"+field[\"fieldVelocityVarName\"] + \"Field\";\n");
      out.write("                        var formField = document.getElementById(fieldId);\n");
      out.write("                        //DOTCMS-3232\n");
      out.write("                if(field[\"fieldFieldType\"] == \"host or folder\"){\n");
      out.write("                   if(dijit.byId('FolderHostSelector')!=null){\n");
      out.write("                       dijit.byId('FolderHostSelector')._setValueAttr(\"");
      out.print( UtilMethods.isSet(crumbtrailSelectedHostId)? crumbtrailSelectedHostId: "");
      out.write("\");\n");
      out.write("                       getHostValue();\n");
      out.write("                   }\n");
      out.write("\n");
      out.write("                }\n");
      out.write("                        if(formField != null) {\n");
      out.write("                                 if(formField.type=='select-one' || formField.type=='select-multiple'){\n");
      out.write("                                          var options = formField.options;\n");
      out.write("                                          for (var j = 0; j < options.length; j++) {\n");
      out.write("                                                var opt = options[j];\n");
      out.write("                                                opt.selected = false;\n");
      out.write("                                          }\n");
      out.write("                                  } else {\n");
      out.write("\n");
      out.write("                                          var dotCurrentFieldType = formField.getAttribute(\"dotfieldtype\");\n");
      out.write("                                          if (dotCurrentFieldType && dotCurrentFieldType == \"tag\") {\n");
      out.write("                                              //Clean up the tag search field\n");
      out.write("                                              clearSuggestTagsForSearch();\n");
      out.write("                                              removeAllTags();\n");
      out.write("                                          } else {\n");
      out.write("\n");
      out.write("                                              formField.value = \"\";\n");
      out.write("\n");
      out.write("                                              var temp = dijit.byId(formField.id);\n");
      out.write("\n");
      out.write("                                              if(temp){\n");
      out.write("                                                try{\n");
      out.write("                                                    temp.attr('value','');\n");
      out.write("                                                   temp.setDisplayedValue('');\n");
      out.write("                                                 }catch(e){console.log(e);}\n");
      out.write("                                              }\n");
      out.write("\t\t\t\t\t                      }\n");
      out.write("                                  }\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                for(var i=0;i < radiobuttonsIds.length ;i++ ){\n");
      out.write("                        var formField = document.getElementById(radiobuttonsIds[i]);\n");
      out.write("                        if(formField != null && formField.type=='radio') {\n");
      out.write("                            var values = \"\";\n");
      out.write("                                if (formField.checked) {\n");
      out.write("                                        var temp = dijit.byId(formField.id);\n");
      out.write("                                        temp.attr('checked',false);\n");
      out.write("                                }\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                for(var i=0;i < checkboxesIds.length ;i++ ){\n");
      out.write("                        var formField = document.getElementById(checkboxesIds[i]);\n");
      out.write("                        if(formField != null && formField.type=='checkbox') {\n");
      out.write("                            var values = \"\";\n");
      out.write("                                if (formField.checked) {\n");
      out.write("                                        var temp = dijit.byId(formField.id);\n");
      out.write("                                        //temp.reset();\n");
      out.write("                                        temp.setValue(false);\n");
      out.write("                                }\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("\t        document.getElementById(\"Identifier\").value = \"\";\n");
      out.write("\t        document.getElementById(\"lastModDateFrom\").value = \"\";\n");
      out.write("\t        document.getElementById(\"lastModDateTo\").value = \"\";\n");
      out.write("\n");
      out.write("       \t\tvar showDeletedCB = dijit.byId(\"showDeletedCB\");\n");
      out.write("\t        if(showDeletedCB!=null){\n");
      out.write("\t                if(showDeletedCB.checked) {\n");
      out.write("\t                  showDeletedCB.setValue(false);\n");
      out.write("\t                }\n");
      out.write("\t        }\n");
      out.write("\n");
      out.write("\t        var filterSystemHostCB = dijit.byId(\"filterSystemHostCB\");\n");
      out.write("\t        if(filterSystemHostCB!=null){\n");
      out.write("\t                if(filterSystemHostCB.checked) {\n");
      out.write("\t                  filterSystemHostCB.setValue(false);\n");
      out.write("\t                }\n");
      out.write("\t        }\n");
      out.write("\n");
      out.write("\t        var filterLockedCB = dijit.byId(\"filterLockedCB\");\n");
      out.write("\t        if(filterLockedCB!=null){\n");
      out.write("\t                if(filterLockedCB.checked) {\n");
      out.write("\t                  filterLockedCB.setValue(false);\n");
      out.write("\t                }\n");
      out.write("\t        }\n");
      out.write("\n");
      out.write("\t        var filterUnpublishCB = dijit.byId(\"filterUnpublishCB\");\n");
      out.write("\t        if(filterUnpublishCB!=null){\n");
      out.write("\t               if(filterUnpublishCB.checked) {\n");
      out.write("\t                 filterUnpublishCB.setValue(false);\n");
      out.write("\t               }\n");
      out.write("\t        }\n");
      out.write("\n");
      out.write("\t        dwr.util.removeAllRows(\"results_table\");\n");
      out.write("\t        document.getElementById(\"nextDiv\").style.display = \"none\";\n");
      out.write("\t        document.getElementById(\"previousDiv\").style.display = \"none\";\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t        hideMatchingResults ();\n");
      out.write("\n");
      out.write("\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function userHasReadPermission (contentlet, userId) {\n");
      out.write("                ");
if(APILocator.getRoleAPI().doesUserHaveRole(user, APILocator.getRoleAPI().loadCMSAdminRole())){ 
      out.write("\n");
      out.write("                        return true;\n");
      out.write("                ");
} 
      out.write("\n");
      out.write("\n");
      out.write("                var permissions = contentlet[\"permissions\"];\n");
      out.write("                var owner = contentlet[\"owner\"];\n");
      out.write("                var ownerCanRead = contentlet[\"ownerCanRead\"];\n");
      out.write("                var hasPermission = false;\n");
      out.write("                if(owner == userId && ownerCanRead.valueOf() == 'true'){\n");
      out.write("                        return true;\n");
      out.write("                }\n");
      out.write("                for (var i = 0; i < userRolesIds.length; i++) {\n");
      out.write("                        var roleId = userRolesIds[i];\n");
      out.write("                        var re = new RegExp(\"P\" + roleId + \"\\\\.1P\");\n");
      out.write("                        if (permissions.match(re)) {\n");
      out.write("                                hasPermission = true;\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("                return hasPermission;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function userHasWritePermission (contentlet, userId) {\n");
      out.write("                ");
if(APILocator.getRoleAPI().doesUserHaveRole(user, APILocator.getRoleAPI().loadCMSAdminRole())){ 
      out.write("\n");
      out.write("                        return true;\n");
      out.write("                ");
} 
      out.write("\n");
      out.write("                var permissions = contentlet[\"permissions\"];\n");
      out.write("                var owner = contentlet[\"owner\"];\n");
      out.write("                var ownerCanWrite = contentlet[\"ownerCanWrite\"];\n");
      out.write("                var hasPermission = false;\n");
      out.write("                ");
if(APILocator.getRoleAPI().doesUserHaveRole(user, APILocator.getRoleAPI().loadCMSAdminRole())){ 
      out.write("\n");
      out.write("                        return true;\n");
      out.write("                ");
} 
      out.write("\n");
      out.write("                if(owner == userId && ownerCanWrite.valueOf() == 'true'){\n");
      out.write("                        return true;\n");
      out.write("                }\n");
      out.write("                for (var i = 0; i < userRolesIds.length; i++) {\n");
      out.write("                        var roleId = userRolesIds[i];\n");
      out.write("                        var re = new RegExp(\"P\" + roleId + \"\\\\.2P\");\n");
      out.write("                        if (permissions.match(re)) {\n");
      out.write("                                hasPermission = true;\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("                return hasPermission;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function userHasPublishPermission (contentlet, userId) {\n");
      out.write("\n");
      out.write("\n");
      out.write("                ");
if(APILocator.getRoleAPI().doesUserHaveRole(user, APILocator.getRoleAPI().loadCMSAdminRole())){ 
      out.write("\n");
      out.write("                        return true;\n");
      out.write("                ");
} 
      out.write("\n");
      out.write("\n");
      out.write("                var permissions = contentlet[\"permissions\"];\n");
      out.write("                var owner = contentlet[\"owner\"];\n");
      out.write("                var ownerCanPublish = contentlet[\"ownerCanPublish\"];\n");
      out.write("                var hasPermission = false;\n");
      out.write("                if(owner == userId && ownerCanPublish.valueOf() == 'true'){\n");
      out.write("                        return true;\n");
      out.write("                }\n");
      out.write("                for (var i = 0; i < userRolesIds.length; i++) {\n");
      out.write("                        var roleId = userRolesIds[i];\n");
      out.write("                        var re = new RegExp(\"P\" + roleId + \"\\\\.4P\");\n");
      out.write("                        if (permissions.match(re)) {\n");
      out.write("                                hasPermission = true;\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("                return hasPermission;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("        var exportContentButton;\n");
      out.write("        function showMatchingResults (num,begin,end,totalPages) {\n");
      out.write("                        if (exportContentButton) {\n");
      out.write("                            exportContentButton.destroyRendering();\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        var div = document.getElementById(\"metaMatchingResultsDiv\");\n");
      out.write("\n");
      out.write("                        div.style.display='';\n");
      out.write("\n");
      out.write("                    //Top Matching Results\n");
      out.write("\n");
      out.write("                    eval(\"totalContents=\" + num + \";\");\n");
      out.write("\n");
      out.write("                        div = document.getElementById(\"matchingResultsDiv\")\n");
      out.write("                        var structureInode = dijit.byId('structure_inode').value;\n");
      out.write("                        var strbuff = \"<div id=\\\"tablemessage\\\" class=\\\"contentlet-selection\\\"></div><div class=\\\"contentlet-results\\\">");
      out.print( LanguageUtil.get(pageContext, "Showing") );
      out.write(" \" + begin + \"-\" + end + \" ");
      out.print( LanguageUtil.get(pageContext, "of1") );
      out.write(" \" + num + \"</div>\";\n");
      out.write("                        var actionPrimaryMenu = dijit.byId('actionPrimaryMenu');\n");
      out.write("                        var donwloadToExcelMenuItem = dijit.byId('donwloadToExcel');\n");
      out.write("                        if (num > 0 && structureInode != \"catchall\") {\n");
      out.write("                            if (!donwloadToExcelMenuItem) {\n");
      out.write("                                actionPrimaryMenu.addChild(new dijit.MenuItem({\n");
      out.write("                                    label: \"");
      out.print( LanguageUtil.get(pageContext, "Export") );
      out.write("\",\n");
      out.write("                                    onClick: donwloadToExcel,\n");
      out.write("                                    id: 'donwloadToExcel'\n");
      out.write("                                }));\n");
      out.write("                            }\n");
      out.write("                        } else {\n");
      out.write("                            if (donwloadToExcelMenuItem) {\n");
      out.write("                                actionPrimaryMenu.removeChild(donwloadToExcelMenuItem);\n");
      out.write("                                donwloadToExcelMenuItem.destroy();\n");
      out.write("                            }\n");
      out.write("\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        div.innerHTML = strbuff;\n");
      out.write("                        div.style.display = \"\";\n");
      out.write("\n");
      out.write("                        //Bottom Matching Results\n");
      out.write("                        var div = document.getElementById(\"matchingResultsBottomDiv\")\n");
      out.write("                        var strbuff = \"<table border='0' width=\\\"100%\\\"><tr><td align='center' nowrap='true'><b>");
      out.print( LanguageUtil.get(pageContext, "Showing") );
      out.write(" \" + begin + \" - \" + end + \" ");
      out.print( LanguageUtil.get(pageContext, "of1") );
      out.write(" \" + num;\n");
      out.write("                        if(num > 0)\n");
      out.write("                        {\n");
      out.write("                                strbuff += \" | ");
      out.print( LanguageUtil.get(pageContext, "Pages") );
      out.write(" \";\n");
      out.write("                                for(i = 4;i >= 1;i--)\n");
      out.write("                                {\n");
      out.write("                                        var auxPage = currentPage - i;\n");
      out.write("                                        if(auxPage >= 1)\n");
      out.write("                                        {\n");
      out.write("                                                strbuff += \"<a href='javascript:doSearch (\" + auxPage + \");'> \" + auxPage + \"</a> \";\n");
      out.write("                                        }\n");
      out.write("                                }\n");
      out.write("                                strbuff += \" \" + currentPage + \" \";\n");
      out.write("                                for(i = 1;i <= 4;i++)\n");
      out.write("                                {\n");
      out.write("                                        var auxPage = currentPage + i;\n");
      out.write("                                        if(auxPage <= totalPages)\n");
      out.write("                                        {\n");
      out.write("                                                strbuff += \"<a href='javascript:doSearch(\" + auxPage + \");'> \" + auxPage + \"</a> \";\n");
      out.write("                                        }\n");
      out.write("                                }\n");
      out.write("                        }\n");
      out.write("                        strbuff += \"</b></td></tr></table>\";\n");
      out.write("                        div.innerHTML = strbuff;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function hideMatchingResults () {\n");
      out.write("                        var div = document.getElementById(\"matchingResultsDiv\")\n");
      out.write("                        div.style.display = \"none\";\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function fillQuery (counters) {\n");
      out.write("                        ");

                        String restBaseUrl="http://"+
                           APILocator.getHostAPI().find((String)session.getAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID), user, false).getHostname()+
                           ((request.getLocalPort()!=80) ? ":"+request.getLocalPort() : "")+
                           "/api/content/render/false";
                        
      out.write("\n");
      out.write("                        queryRaw = counters[\"luceneQueryRaw\"];\n");
      out.write("                        var queryfield=document.getElementById(\"luceneQuery\");\n");
      out.write("                        queryfield.value=queryRaw;\n");
      out.write("                        var queryFrontend = counters[\"luceneQueryFrontend\"];\n");
      out.write("                        var relatedQueryByChild = counters[\"relatedQueryByChild\"];\n");
      out.write("                        var sortBy = counters[\"sortByUF\"];\n");
      out.write("                        var div = document.getElementById(\"queryResults\");\n");
      out.write("                        var apicall=\"");
      out.print( restBaseUrl );
      out.write("/query/\"+queryRaw+\"/orderby/\"+sortBy;\n");
      out.write("                        var test_api_xml_link=\"/api/content/render/false/type/xml/query/\"+encodeURI(queryRaw)+\"/orderby/\"+encodeURI(sortBy);\n");
      out.write("                        var test_api_json_link=\"/api/content/render/false/type/json/query/\"+encodeURI(queryRaw)+\"/orderby/\"+encodeURI(sortBy);\n");
      out.write("                        var apicall_urlencode=\"");
      out.print( restBaseUrl );
      out.write("/query/\"+encodeURI(queryRaw)+\"/orderby/\"+encodeURI(sortBy);\n");
      out.write("\n");
      out.write("                        var expiredInodes = counters[\"expiredInodes\"];\n");
      out.write("                        dojo.byId(\"expiredInodes\").value=expiredInodes;\n");
      out.write("                        dojo.byId(\"expireDateReset\").value=\"\";\n");
      out.write("\n");
      out.write("\n");
      out.write("                        div.innerHTML = \"<div class='contentViewDialog' style=\\\"white-space: pre;\\\">\" +\n");
      out.write("\n");
      out.write("                            \"<div class='contentViewTitle'>");
      out.print( LanguageUtil.get(pageContext, "frontend-query") );
      out.write("</div>\"+\n");
      out.write("                            \"<div class='contentViewQuery'>#foreach($con in $dotcontent.pull(\\\"\" + queryFrontend + \"\\\",10,\\\"\" + sortBy + \"\\\"))<br/>...<br/>#end</div>\";\n");
      out.write("\n");
      out.write("                        if (relatedQueryByChild == null){\n");
      out.write("                            div.innerHTML += \"<div class='contentViewTitle'>");
      out.print( LanguageUtil.get(pageContext, "The-actual-query-") );
      out.write("</div>\"+\n");
      out.write("                                \"<div class='contentViewQuery'>\"+queryRaw+\"</div>\";\n");
      out.write("                        } else{\n");
      out.write("                            test_api_xml_link +=  \"/related/\" + relatedQueryByChild;\n");
      out.write("                            test_api_json_link += \"/related/\" + relatedQueryByChild;\n");
      out.write("                            apicall_urlencode += \"/related/\" + relatedQueryByChild;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        div.innerHTML += \"<div class='contentViewTitle'>");
      out.print( LanguageUtil.get(pageContext, "rest-api-call-urlencoded") );
      out.write("</div>\"+\n");
      out.write("                            \"<div class='contentViewQuery'>\"+apicall_urlencode+\"</div>\"+\n");
      out.write("                            \"<div class='contentViewQuery' style='padding:20px;padding-top:10px;color:#333;'>REST API: \" +\n");
      out.write("\n");
      out.write("\t                            \"<a href='\" + test_api_xml_link +\"' target='_blank'>");
      out.print( LanguageUtil.get(pageContext, "xml") );
      out.write("</a>\"+\n");
      out.write("\t                            \"&nbsp;|&nbsp;\"+\n");
      out.write("\t                            \"<a href='\" + test_api_json_link +\"' target='_blank'>");
      out.print( LanguageUtil.get(pageContext, "json") );
      out.write("</a>\"+\n");
      out.write("\n");
      out.write("                            \"</div>\"+\n");
      out.write("\n");
      out.write("\n");
      out.write("                            \"<b>");
      out.print( LanguageUtil.get(pageContext, "Ordered-by") );
      out.write(":</b> \" + sortBy +\n");
      out.write("                            \"<ul><li>");
      out.print( LanguageUtil.get(pageContext, "message.contentlet.hint2") );
      out.write(" \" +\n");
      out.write("                            \"</li><li>");
      out.print( LanguageUtil.get(pageContext, "message.contentlet.hint3") );
      out.write(" \" +\n");
      out.write("                            \"</li><li>");
      out.print( LanguageUtil.get(pageContext, "message.contentlet.hint4") );
      out.write(" \" +\n");
      out.write("                            \"<li>");
      out.print( LanguageUtil.get(pageContext, "message.contentlet.hint6"));
      out.write("</li>\"+\n");
      out.write("                            \"<li>");
      out.print( UtilMethods.escapeDoubleQuotes(LanguageUtil.get(pageContext, "message.contentlet.note1")) );
      out.write("</li>\"+\n");
      out.write("                            \"</ul></div>\";\n");
      out.write("\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showHideQuery () {\n");
      out.write("                dijit.byId('queryDiv').show();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function useLoadingMessage(message) {\n");
      out.write("          var loadingMessage;\n");
      out.write("          if (message) loadingMessage = message;\n");
      out.write("\n");
      out.write("          dwr.engine.setPreHook(function() {\n");
      out.write("              var messageZone = $('messageZone');\n");
      out.write("              messageZone.innerHTML = loadingMessage;\n");
      out.write("              messageZone.style.display = '';\n");
      out.write("            });\n");
      out.write("\n");
      out.write("          dwr.engine.setPostHook(function() {\n");
      out.write("                if ($('messageZone') != null)\n");
      out.write("                    $('messageZone').style.display = 'none';\n");
      out.write("          });\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function showHideHints () {\n");
      out.write("                dijit.byId('hintsdiv').show();\n");
      out.write("        }\n");
      out.write("        //DOTCMS-3232\n");
      out.write("        function getHostValue(){\n");
      out.write("          if(!isInodeSet(dijit.byId('FolderHostSelector').attr('value'))){\n");
      out.write("            dojo.byId(\"hostField\").value = \"\";\n");
      out.write("            dojo.byId(\"folderField\").value = \"\";\n");
      out.write("          }else{\n");
      out.write("            var data = dijit.byId('FolderHostSelector').attr('selectedItem');\n");
      out.write("                if(data[\"type\"]== \"host\"){\n");
      out.write("                        dojo.byId(\"hostField\").value =  dijit.byId('FolderHostSelector').attr('value');\n");
      out.write("                        dojo.byId(\"folderField\").value = \"\";\n");
      out.write("                }else if(data[\"type\"]== \"folder\"){\n");
      out.write("                        dojo.byId(\"hostField\").value = \"\";\n");
      out.write("                    dojo.byId(\"folderField\").value =  dijit.byId('FolderHostSelector').attr('value');\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            conHostFolderValue = dijit.byId('FolderHostSelector').hostFolderSelectedName.value;\n");
      out.write("          }\n");
      out.write("   }\n");
      out.write("\n");
      out.write("    function checkAll(check) {\n");
      out.write("        selectBox = document.getElementsByName(\"publishInode\");\n");
      out.write("        for (i=0;i< selectBox.length;i++) {\n");
      out.write("            selectBox[i].checked = check;\n");
      out.write("        }\n");
      out.write("        togglePublish();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function togglePublish(){\n");
      out.write("        var cbArray = document.getElementsByName(\"publishInode\");\n");
      out.write("        var showArchive =  (dijit.byId(\"showingSelect\").getValue() == \"archived\");\n");
      out.write("        if(typeof event !== 'undefined' && event.shiftKey && event.target.checked){\n");
      out.write("\n");
      out.write("            var hasChecked=false;\n");
      out.write("            for(i = 0;i< cbArray.length ;i++){\n");
      out.write("                if (cbArray[i].checked) {\n");
      out.write("                    hasChecked=true;\n");
      out.write("                }\n");
      out.write("                dijit.byId(cbArray[i].id).setChecked(hasChecked);\n");
      out.write("                cbArray[i].checked=true;\n");
      out.write("                if(cbArray[i].id==event.target.id){\n");
      out.write("                    break;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("        for(i = 0;i< cbArray.length ;i++){\n");
      out.write("            if (cbArray[i].checked) {\n");
      out.write("                dijit.byId('bulkAvailableActions').setAttribute(\"disabled\", false);\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // nothing selected\n");
      out.write("        dijit.byId('bulkAvailableActions').setAttribute(\"disabled\", true);\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("\n");
      out.write("    dojo.addOnLoad(function () {\n");
      out.write("        structureChanged(true);\n");
      out.write("        //useLoadingMessage(\"<i class='loadingIcon'></i> Loading\");\n");
      out.write("\n");
      out.write("        //DWR sync mode doesn't work in Chrome. Forcing sync with the flag 'loadingSearchFields'\n");
      out.write("        if (dojo.isChrome) {\n");
      out.write("                setTimeout(\"checkSearchFieldLoaded()\", 50);\n");
      out.write("        } else {\n");
      out.write("                initialLoad();\n");
      out.write("        }\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    function checkSearchFieldLoaded() {\n");
      out.write("            if (!loadingSearchFields) {\n");
      out.write("                    initialLoad();\n");
      out.write("            } else {\n");
      out.write("                    setTimeout(\"checkSearchFieldLoaded()\", 50);\n");
      out.write("            }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function resetHostValue() {\n");
      out.write("        if(document.getElementById('FolderHostSelector-hostFolderSelect')){\n");
      out.write("          if(document.getElementById('FolderHostSelector-hostFolderSelect').value == \"\"){\n");
      out.write("              dojo.byId(\"hostField\").value = \"\";\n");
      out.write("                  dojo.byId(\"folderField\").value = \"\";\n");
      out.write("              dijit.byId('FolderHostSelector')._resetValue();\n");
      out.write("          }\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("         function unlockSelectedContentlets(){\n");
      out.write("            //disableButtonRow();\n");
      out.write("            var form = copySearchForm()\n");
      out.write("            form.cmd.value = 'full_unlock_list';\n");
      out.write("            form.action = '");
      if (_jspx_meth_portlet_005factionURL_005f4(_jspx_page_context))
        return;
      out.write("';\n");
      out.write("\n");
      out.write("\n");
      out.write("          /*if we have a date*/\n");
      out.write("                        var dateFrom= null;\n");
      out.write("                        var dateTo= null;\n");
      out.write("                        if((document.getElementById(\"lastModDateFrom\").value!=\"\")){\n");
      out.write("                                dateFrom = document.getElementById(\"lastModDateFrom\").value;\n");
      out.write("                                var dateFromsplit = dateFrom.split(\"/\");\n");
      out.write("                                if(dateFromsplit[0]< 10) dateFromsplit[0]= \"0\"+dateFromsplit[0]; if(dateFromsplit[1]< 10) dateFromsplit[1]= \"0\"+dateFromsplit[1];\n");
      out.write("                                dateFrom= dateFromsplit[2]+dateFromsplit[0]+dateFromsplit[1]+\"000000\";\n");
      out.write("                                form.action+= \"&modDateFrom=\"+dateFrom;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        if((document.getElementById(\"lastModDateTo\").value!=\"\")){\n");
      out.write("                                dateTo = document.getElementById(\"lastModDateTo\").value;\n");
      out.write("                                var dateTosplit = dateTo.split(\"/\");\n");
      out.write("                                if(dateTosplit[0]< 10) dateTosplit[0]= \"0\"+dateTosplit[0]; if(dateTosplit[1]< 10) dateTosplit[1]= \"0\"+dateTosplit[1];\n");
      out.write("                                dateTo= dateTosplit[2]+dateTosplit[0]+dateTosplit[1]+\"235959\";\n");
      out.write("                                form.action+= \"&modDateTo=\"+dateTo;\n");
      out.write("                        }\n");
      out.write("            form.action+= \"&structure_id=");
      out.print(structure.getInode());
      out.write("\";\n");
      out.write("            form.submit();\n");
      out.write("            form.parentNode.removeChild(form);\n");
      out.write("         }\n");
      out.write("\n");
      out.write("    //*************************************\n");
      out.write("    //\n");
      out.write("    //\n");
      out.write("    //  ContentAdmin Obj\n");
      out.write("    //\n");
      out.write("    //\n");
      out.write("    //*************************************\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("    dojo.declare(\"dotcms.dijit.contentlet.ContentAdmin\", null, {\n");
      out.write("    \tcontentletIdentifier : \"\",\n");
      out.write("    \tcontentletInode : \"\",\n");
      out.write("    \tlanguageID : \"\",\n");
      out.write("    \twfActionId:\"\",\n");
      out.write("    \tconstructor : function(contentletIdentifier, contentletInode,languageId ) {\n");
      out.write("    \t\tthis.contentletIdentifier = contentletIdentifier;\n");
      out.write("    \t\tthis.contentletInode =contentletInode;\n");
      out.write("    \t\tthis.languageId=languageId;\n");
      out.write("\n");
      out.write("\n");
      out.write("    \t},\n");
      out.write("\n");
      out.write("\n");
      out.write("    \texecuteWfAction: function(wfId, assignable, commentable, hasPushPublishActionlet, inode ){\n");
      out.write("            this.wfActionId = wfId;\n");
      out.write("    \t\tif(assignable == \"true\" || commentable == \"true\" || hasPushPublishActionlet == \"true\" ){\n");
      out.write("\n");
      out.write("                let workflow = {\n");
      out.write("                  actionId:wfId,\n");
      out.write("                  inode:inode\n");
      out.write("                };\n");
      out.write("\n");
      out.write("                var pushHandler = new dotcms.dojo.push.PushHandler('");
      out.print(LanguageUtil.get(pageContext, "Workflow-Action"));
      out.write("');\n");
      out.write("                pushHandler.showWorkflowEnabledDialog(workflow, saveAssignCallBack);\n");
      out.write("                return;\n");
      out.write("\n");
      out.write("    \t\t} else{\n");
      out.write("        \t\t    var wfActionAssign \t\t= \"\";\n");
      out.write("\t\t    \t\tvar selectedItem \t\t= \"\";\n");
      out.write("\t\t    \t\tvar wfConId \t\t\t= inode;\n");
      out.write("\t\t    \t\tvar wfActionId \t\t\t= this.wfActionId;\n");
      out.write("\t\t    \t\tvar wfActionComments \t= \"\";\n");
      out.write("\t\t    \t\tvar publishDate\t\t\t= \"\";\n");
      out.write("\t\t    \t\tvar publishTime \t\t= \"\";\n");
      out.write("\t\t    \t\tvar expireDate \t\t\t= \"\";\n");
      out.write("\t\t    \t\tvar expireTime \t\t\t= \"\";\n");
      out.write("\t\t    \t\tvar neverExpire \t\t= \"\";\n");
      out.write("\t\t    \t\tvar whereToSend \t\t= \"\";\n");
      out.write("\t\t\t\t\tBrowserAjax.saveFileAction(selectedItem, wfActionAssign, wfActionId, wfActionComments, wfConId, publishDate,\n");
      out.write("\t\t    \t\t\t\tpublishTime, expireDate, expireTime, neverExpire, whereToSend, fileActionCallback\n");
      out.write("                    );\n");
      out.write("    \t\t}\n");
      out.write("\n");
      out.write("    \t}\n");
      out.write("    });\n");
      out.write("\n");
      out.write("\n");
      out.write("    function saveAssignCallBack(actionId, formData) {\n");
      out.write("\n");
      out.write("        var pushPublish = formData.pushPublish;\n");
      out.write("        var assignComment = formData.assignComment;\n");
      out.write("\n");
      out.write("        var selectedItem = \"\";\n");
      out.write("        var wfConId =  pushPublish.inode;\n");
      out.write("        var comments = assignComment.comment;\n");
      out.write("        var assignRole = assignComment.assign;\n");
      out.write("\n");
      out.write("        var whereToSend = pushPublish.whereToSend;\n");
      out.write("        var publishDate = pushPublish.publishDate;\n");
      out.write("        var publishTime = pushPublish.publishTime;\n");
      out.write("        var expireDate  = pushPublish.expireDate;\n");
      out.write("        var expireTime  = pushPublish.expireTime;\n");
      out.write("        var forcePush   = pushPublish.forcePush;\n");
      out.write("        var neverExpire = pushPublish.neverExpire;\n");
      out.write("\n");
      out.write("        BrowserAjax.saveFileAction(selectedItem, assignRole, actionId, comments, wfConId, publishDate,\n");
      out.write("           publishTime, expireDate, expireTime, neverExpire, whereToSend, forcePush, fileActionCallback\n");
      out.write("        );\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function fileActionCallback (response) {\n");
      out.write("        if (response.status == \"success\") {\n");
      out.write("            setTimeout(\"refreshFakeJax()\", 1000);\n");
      out.write("            showDotCMSSystemMessage(response.message);\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // An error happened\n");
      out.write("        refreshFakeJax();\n");
      out.write("        showDotCMSErrorMessage(response.message);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("\n");
      out.write("\tfunction _unpublishAsset (inode) {\n");
      out.write("\t\tBrowserAjax.unPublishAsset(inode, function (data) { _unpublishAssetCallback(data) } );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction _unpublishAssetCallback (response) {\n");
      out.write("\n");
      out.write("\t\tif (!response) {\n");
      out.write("\t\t\tshowDotCMSErrorMessage('");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Unpublish-failed-check-you-have-the-required-permissions")) );
      out.write("');\n");
      out.write("\t\t} else {\n");
      out.write("\n");
      out.write("\t\t\trefreshFakeJax();\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\tfunction _publishAsset (inode) {\n");
      out.write("\t\tBrowserAjax.publishAsset(inode, function (data) { _publishAssetCallback(data) } );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction _publishAssetCallback (response) {\n");
      out.write("\n");
      out.write("\t\tif (!response) {\n");
      out.write("\t\t\tshowDotCMSErrorMessage('");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "publish-failed-check-you-have-the-required-permissions")) );
      out.write("');\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\trefreshFakeJax();\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction _archiveAsset (inode) {\n");
      out.write("\t\tBrowserAjax.archiveAsset(inode, function (data) { _archiveAssetCallback(data) } );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction _archiveAssetCallback (response) {\n");
      out.write("\t\tif (!response) {\n");
      out.write("\t\t\tshowDotCMSErrorMessage('");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Failed-to-archive-check-you-have-the-required-permissions")) );
      out.write("');\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\trefreshFakeJax();\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction _unArchiveAsset (objId, referer) {\n");
      out.write("\t\tBrowserAjax.unArchiveAsset(objId, _unarchiveAssetCallback);\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction _unarchiveAssetCallback (response) {\n");
      out.write("\t\tif (!response) {\n");
      out.write("\t\t\tshowDotCMSErrorMessage('");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Failed-to-un-archive-check-you-have-the-required-permissions")) );
      out.write("');\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\trefreshFakeJax();\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction _copyContentlet (inode) {\n");
      out.write("\n");
      out.write("\t\tvar loc = '");
      //  portlet:actionURL
      com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag _jspx_th_portlet_005factionURL_005f5 = (com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag) _005fjspx_005ftagPool_005fportlet_005factionURL_0026_005fwindowState.get(com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag.class);
      boolean _jspx_th_portlet_005factionURL_005f5_reused = false;
      try {
        _jspx_th_portlet_005factionURL_005f5.setPageContext(_jspx_page_context);
        _jspx_th_portlet_005factionURL_005f5.setParent(null);
        // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(2556,13) name = windowState type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_portlet_005factionURL_005f5.setWindowState( WindowState.MAXIMIZED.toString() );
        int _jspx_eval_portlet_005factionURL_005f5 = _jspx_th_portlet_005factionURL_005f5.doStartTag();
        if (_jspx_eval_portlet_005factionURL_005f5 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          if (_jspx_eval_portlet_005factionURL_005f5 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_portlet_005factionURL_005f5);
          }
          do {
            if (_jspx_meth_portlet_005fparam_005f15(_jspx_th_portlet_005factionURL_005f5, _jspx_page_context))
              return;
            if (_jspx_meth_portlet_005fparam_005f16(_jspx_th_portlet_005factionURL_005f5, _jspx_page_context))
              return;
            int evalDoAfterBody = _jspx_th_portlet_005factionURL_005f5.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
          if (_jspx_eval_portlet_005factionURL_005f5 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = _jspx_page_context.popBody();
          }
        }
        if (_jspx_th_portlet_005factionURL_005f5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005fportlet_005factionURL_0026_005fwindowState.reuse(_jspx_th_portlet_005factionURL_005f5);
        _jspx_th_portlet_005factionURL_005f5_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005factionURL_005f5, _jsp_getInstanceManager(), _jspx_th_portlet_005factionURL_005f5_reused);
      }
      out.write("&inode=' + inode ;\n");
      out.write("\t\twindow.AjaxActionJackson.location = loc;\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction _unarchiveAssetCallback (response) {\n");
      out.write("\t\tif (!response) {\n");
      out.write("\t\t\tshowDotCMSErrorMessage('");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Failed-to-un-archive-check-you-have-the-required-permissions")) );
      out.write("');\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\trefreshFakeJax();\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction _unlockAsset (inode) {\n");
      out.write("\t\tBrowserAjax.unlockAsset(inode, function (data) { _unlockAssetCallback(data) } );\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\tfunction _unlockAssetCallback (response) {\n");
      out.write("\t\tif (!response) {\n");
      out.write("\t\t\tshowDotCMSErrorMessage('");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Failed-to-unlock-check-you-have-the-required-permissions")) );
      out.write("');\n");
      out.write("\t\t} else {\n");
      out.write("\t\t\trefreshFakeJax();\n");
      out.write("\t\t}\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\tfunction refreshFakeJax(){\n");
      out.write("\n");
      out.write("\t\tdoSearch();\n");
      out.write("\n");
      out.write("\t\tsetTimeout(function(){ doSearch() }, 1000);\n");
      out.write("\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("    var contentAdmin ;\n");
      out.write("\n");
      out.write("--></script>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script language=\"Javascript\">\r\n");
      out.write("\r\n");
      out.write("    function ");
      if (_jspx_meth_portlet_005fnamespace_005f0(_jspx_page_context))
        return;
      out.write("setCalendarDate_0 (year, month, day) {\r\n");
      out.write("        var textbox = document.getElementById('lastModDateFrom');\r\n");
      out.write("        textbox.value = month + '/' + day + '/' + year;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function ");
      if (_jspx_meth_portlet_005fnamespace_005f1(_jspx_page_context))
        return;
      out.write("setCalendarDate_1 (year, month, day) {\r\n");
      out.write("        var textbox = document.getElementById('lastModDateTo');\r\n");
      out.write("        textbox.value = month + '/' + day + '/' + year;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    dojo.addOnLoad(function() {\r\n");
      out.write("        var menu = new dijit.Menu({\r\n");
      out.write("            style: \"display: none;\"\r\n");
      out.write("        });\r\n");
      out.write("        var menuItem1 = new dijit.MenuItem({\r\n");
      out.write("            label: \"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Add-New-Content" )) );
      out.write("\",\r\n");
      out.write("            iconClass: \"plusIcon\",\r\n");
      out.write("            onClick: function() {\r\n");
      out.write("                addNewContentlet();\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("        menu.addChild(menuItem1);\r\n");
      out.write("\r\n");
      out.write("        var menuItem2 = new dijit.MenuItem({\r\n");
      out.write("            label: \"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Import-Content" )) );
      out.write("\",\r\n");
      out.write("            iconClass: \"uploadIcon\",\r\n");
      out.write("            onClick: function() {\r\n");
      out.write("                window.location='/c/portal/layout?p_l_id=");
      out.print( layout.getId() );
      out.write("&dm_rlout=1&p_p_id=");
      out.print(PortletID.CONTENT);
      out.write("&p_p_action=1&p_p_state=maximized&_");
      out.print(PortletID.CONTENT);
      out.write("_struts_action=/ext/contentlet/import_contentlets&selectedStructure=' + document.getElementById(\"structureInode\").value;\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("        menu.addChild(menuItem2);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\n");
      out.write("\n");
      out.write("<script language=\"Javascript\">\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     *\n");
      out.write("     *\n");
      out.write("     */\n");
      out.write("    function toggleFailDetails() {\n");
      out.write("        var node = dojo.byId('fail-details');\n");
      out.write("        if( node.style.display === \"none\" ){\n");
      out.write("            node.style.display = \"block\";\n");
      out.write("        }else{\n");
      out.write("            node.style.display = \"none\";\n");
      out.write("        }\n");
      out.write("        return false;\n");
      out.write("    }\n");
      out.write("    \n");
      out.write("    /**\n");
      out.write("     *\n");
      out.write("     */\n");
      out.write("    function doShowAvailableActions() {\n");
      out.write("\n");
      out.write("        dojo.byId('bulkActionsContainer').innerHTML = '';\n");
      out.write("\n");
      out.write("       // if there are selected items and we're running an enterprise verision the we can bother retriving the available actions\n");
      out.write("        var selectedInodes = getSelectedInodes();\n");
      out.write("        if (!selectedInodes) {\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var data;\n");
      out.write("        if (Array.isArray(selectedInodes) && selectedInodes.length > 0) {\n");
      out.write("            data = {\"contentletIds\": selectedInodes};\n");
      out.write("        } else {\n");
      out.write("            data = {\"query\": selectedInodes}; //No. it's not a bug. This variable sometimes holds a query.\n");
      out.write("        }\n");
      out.write("        getAvailableBulkActions(data);\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     *\n");
      out.write("     */\n");
      out.write("    function renderSingleAction(action){\n");
      out.write("        var actionSingleTemplate\n");
      out.write("            = '<tr class=\"workflowActionsOption\"> '\n");
      out.write("            + '   <td style=\"\">&nbsp;&nbsp;'+action.workflowAction.name+'</td> '\n");
      out.write("            + '     <td style=\"width:140px;text-align: right\"> '\n");
      out.write("            + '     <button dojoType=\"dijit.form.Button\" class=\"dijitButton wfAction\" '\n");
      out.write("            + '             data-acction-id=\"'+action.workflowAction.id+'\" '\n");
      out.write("            + '             data-action-commentable=\"'+action.workflowAction.commentable+'\" '\n");
      out.write("            + '             data-action-assignable=\"'+action.workflowAction.assignable+'\" '\n");
      out.write("            + '             data-action-pushPublish=\"'+action.pushPublish+'\"  '\n");
      out.write("            + '             data-action-condition=\"'+action.conditionPresent+'\" >'+action.count+' content(s)</button>'\n");
      out.write("            + '   </td>'\n");
      out.write("            + '</tr>';\n");
      out.write("        return actionSingleTemplate;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     *\n");
      out.write("     * @param stepWrapper\n");
      out.write("     * @returns {string}\n");
      out.write("     */\n");
      out.write("    function renderActions(stepWrapper){\n");
      out.write("        var step = stepWrapper.step;\n");
      out.write("        var actions = stepWrapper.actions;\n");
      out.write("        var actionsMarkup='';\n");
      out.write("            for(var i=0; i < actions.length; i++){\n");
      out.write("                actionsMarkup += renderSingleAction(actions[i]);\n");
      out.write("            }\n");
      out.write("        return actionsMarkup;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     *\n");
      out.write("     * @param schemeWrapper\n");
      out.write("     * @returns {string}\n");
      out.write("     */\n");
      out.write("    function renderSchemeInfo(schemeWrapper){\n");
      out.write("        var actionRows = '';\n");
      out.write("        var scheme = schemeWrapper.scheme;\n");
      out.write("        var steps = schemeWrapper.steps;\n");
      out.write("\n");
      out.write("        if(!steps || steps.length == 0){\n");
      out.write("          return '';\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        for(var i=0; i < steps.length; i++){\n");
      out.write("          actionRows += renderActions(steps[i]);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        if(actionRows === ''){\n");
      out.write("           return '';\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var schemeTemplate\n");
      out.write("            = '<table class=\"sTypeTable\" style=\"width:90%; border-collapse: separate; border-spacing: 10px 15px;margin-bottom:10px;\">'\n");
      out.write("            + '  <tr>'\n");
      out.write("            + '     <th colspan=\"2\" class=\"sTypeHeader wfScheme\" data-scheme-id=\"'+scheme.id+'\" >'+scheme.name+'</th>'\n");
      out.write("            + '  </tr>'\n");
      out.write("            + actionRows\n");
      out.write("            + '</table>';\n");
      out.write("        return schemeTemplate;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function emptyActionsMarkup() {\n");
      out.write("        var emptyLabel = `");
      out.print(LanguageUtil.get(pageContext, "No-Available-Actions"));
      out.write("`;\n");
      out.write("        var empty\n");
      out.write("            = '<table class=\"sTypeTable\" style=\"width:90%; border-collapse: separate; border-spacing: 10px 15px;margin-bottom:10px;\">'\n");
      out.write("            + '  <tr>'\n");
      out.write("            + '     <th colspan=\"2\" class=\"sTypeHeader\" ></th>'\n");
      out.write("            + '  </tr>'\n");
      out.write("            + '  <tr>'\n");
      out.write("            + '     <td> '+emptyLabel+' </td>'\n");
      out.write("            + '  </tr>'\n");
      out.write("            + '</table>';\n");
      out.write("        return empty;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function errorMarkup() {\n");
      out.write("        var errorMessage= `");
      out.print(LanguageUtil.get(pageContext, "Available-actions-error"));
      out.write("`;\n");
      out.write("        var empty\n");
      out.write("            = '<table class=\"sTypeTable\" style=\"width:90%; border-collapse: separate; border-spacing: 10px 15px;margin-bottom:10px;\">'\n");
      out.write("            + '  <tr>'\n");
      out.write("            + '     <th colspan=\"2\" class=\"sTypeHeader\" ></th>'\n");
      out.write("            + '  </tr>'\n");
      out.write("            + '  <tr>'\n");
      out.write("            + '     <td> '+errorMessage+' </td>'\n");
      out.write("            + '  </tr>'\n");
      out.write("            + '</table>';\n");
      out.write("        return empty;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function noFailsMarkup() {\n");
      out.write("        var emptyLabel = `");
      out.print(LanguageUtil.get(pageContext, "No-Failed-Actions"));
      out.write("`;\n");
      out.write("        var empty\n");
      out.write("            = '<table class=\"sTypeTable\" style=\"width:90%; border-collapse: separate; border-spacing: 10px 15px;margin-bottom:10px;\">'\n");
      out.write("            + '  <tr>'\n");
      out.write("            + '     <th colspan=\"2\" class=\"sTypeHeader\" ></th>'\n");
      out.write("            + '  </tr>'\n");
      out.write("            + '  <tr>'\n");
      out.write("            + '     <td> '+emptyLabel+' </td>'\n");
      out.write("            + '  </tr>'\n");
      out.write("            + '</table>';\n");
      out.write("        return empty;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     *\n");
      out.write("     * @param entity\n");
      out.write("     * @returns {string}\n");
      out.write("     */\n");
      out.write("    function actionsSummaryMarkup(entity){\n");
      out.write("        var markup = '';\n");
      out.write("        var schemes = entity.schemes;\n");
      out.write("        if(schemes.length == 0){\n");
      out.write("            markup = emptyActionsMarkup();\n");
      out.write("        } else {\n");
      out.write("            for(var i=0; i < schemes.length; i++){\n");
      out.write("                markup += renderSchemeInfo(schemes[i]);\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        return markup;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    /**\n");
      out.write("     *\n");
      out.write("     * @param entity\n");
      out.write("     * @returns {string}\n");
      out.write("     */\n");
      out.write("    function actionsExecutionSummarytMarkup(entity) {\n");
      out.write("\n");
      out.write("        var skipsCount = entity.skippedCount;\n");
      out.write("        var successCount = entity.successCount;\n");
      out.write("        var failsCount = entity.fails.length;\n");
      out.write("\n");
      out.write("        var resultsLabel = '");
      out.print(LanguageUtil.get(pageContext, "Results"));
      out.write("';\n");
      out.write("        var sucessLabel = '");
      out.print(LanguageUtil.get(pageContext, "Successul"));
      out.write("';\n");
      out.write("        var failsLabel = '");
      out.print(LanguageUtil.get(pageContext, "Fails"));
      out.write("';\n");
      out.write("        var skipsLabel = '");
      out.print(LanguageUtil.get(pageContext, "Skips"));
      out.write("';\n");
      out.write("\n");
      out.write("        var exceptionLabel = '");
      out.print(LanguageUtil.get(pageContext, "Exception"));
      out.write("';\n");
      out.write("\n");
      out.write("        var summaryTableMarkup =\n");
      out.write("        '<div>' +\n");
      out.write("          '<table class=\"sTypeTable\" style=\"width:90%; border-collapse: separate; border-spacing: 10px 15px;margin-bottom:10px;\">'\n");
      out.write("            +\n");
      out.write("            '<tr>' +\n");
      out.write("            ' <th colspan=\"2\" class=\"sTypeHeader\" >' + resultsLabel + '</th>' +\n");
      out.write("            ' <th></th>' +\n");
      out.write("            '</tr>' +\n");
      out.write("            '<tr>' +\n");
      out.write("              '<td> ' + sucessLabel + ':&nbsp;</td>' +\n");
      out.write("              '<td> ' + successCount + ' </td>' +\n");
      out.write("            '</tr>' +\n");
      out.write("            '<tr>' +\n");
      out.write("              '<td> ' + failsLabel + ':&nbsp;</td>' +\n");
      out.write("              '<td><a href=\"#\" onclick=\"toggleFailDetails();\" > ' + failsCount + ' </a></td>' +\n");
      out.write("            '</tr>' +\n");
      out.write("            '<tr>' +\n");
      out.write("              '<td> ' + skipsLabel + ':&nbsp;</td>' +\n");
      out.write("              '<td> ' + skipsCount + ' </td>' +\n");
      out.write("            '</tr>' +\n");
      out.write("          '</table>' +\n");
      out.write("        '</div>';\n");
      out.write("\n");
      out.write("        var detailsMarkup = '';\n");
      out.write("\n");
      out.write("        if (failsCount == 0) {\n");
      out.write("            detailsMarkup = '<div id=\"fail-details\" style=\"display:none;\">' +\n");
      out.write("                noFailsMarkup() +\n");
      out.write("            '</div>';\n");
      out.write("        } else {\n");
      out.write("\n");
      out.write("            var markupDetailEntries = '';\n");
      out.write("            for (var i = 0; i < entity.fails.length; i++) {\n");
      out.write("                var fail = entity.fails[i];\n");
      out.write("                markupDetailEntries +=\n");
      out.write("                    '<tr>' +\n");
      out.write("                      '<td colspan=\"2\"> ' + fail.inode + '  &nbsp;</td>' +\n");
      out.write("                      '<td> ' + fail.errorMessage + ' </td>' +\n");
      out.write("                    '</tr>';\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            detailsMarkup =\n");
      out.write("            '<div id=\"fail-details\" style=\"display:none;\">' +\n");
      out.write("                '<table class=\"sTypeTable\" style=\"width:90%; border-collapse: separate; border-spacing: 10px 15px;margin-bottom:10px;\">'\n");
      out.write("                +\n");
      out.write("                '<tr>' +\n");
      out.write("                ' <th colspan=\"2\" class=\"sTypeHeader\" > iNode </th>' +\n");
      out.write("                ' <th class=\"sTypeHeader\" >' + exceptionLabel + '</th>' +\n");
      out.write("                '</tr>' +\n");
      out.write("                   markupDetailEntries +\n");
      out.write("            '</div>';\n");
      out.write("        }\n");
      out.write("        return summaryTableMarkup + detailsMarkup;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function showPopupIfRequired(buttonElement) {\n");
      out.write("\n");
      out.write("        var commentable = dojo.attr(buttonElement, 'data-action-commentable');\n");
      out.write("        var assignable = dojo.attr(buttonElement, 'data-action-assignable');\n");
      out.write("        var pushPublish = dojo.attr(buttonElement, 'data-action-pushPublish');\n");
      out.write("        var condition = dojo.attr(buttonElement, 'data-action-condition');\n");
      out.write("\n");
      out.write("        var popupRequired = (commentable == 'true' || assignable == 'true' || pushPublish == 'true' || condition == 'true' );\n");
      out.write("        if(!popupRequired){\n");
      out.write("           return false;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var actionId = dojo.attr(buttonElement, 'data-acction-id');\n");
      out.write("\n");
      out.write("        var inode = null;\n");
      out.write("        var selectedInodes = getSelectedInodes();\n");
      out.write("        if (Array.isArray(selectedInodes) && selectedInodes.length > 0) {\n");
      out.write("            inode = selectedInodes[0];\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        let workflow = {\n");
      out.write("            actionId:actionId,\n");
      out.write("            inode:inode\n");
      out.write("        };\n");
      out.write("\n");
      out.write("        var pushHandler = new dotcms.dojo.push.PushHandler('");
      out.print(LanguageUtil.get(pageContext, "Workflow-Action"));
      out.write("');\n");
      out.write("        pushHandler.showWorkflowEnabledDialog(workflow, fireActionCallback);\n");
      out.write("        return true;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("\n");
      out.write("    function fireActionCallback(actionId, formData){\n");
      out.write("\n");
      out.write("        var pushPusblishFormData = formData.pushPublish;\n");
      out.write("        var assignComment = formData.assignComment;\n");
      out.write("\n");
      out.write("        //Just a sub set of the fields can be sent\n");
      out.write("        //Any unexpected additional field on this structure will upset the rest endpoint.\n");
      out.write("        var pushPublish = {\n");
      out.write("            whereToSend:pushPusblishFormData.whereToSend,\n");
      out.write("            publishDate:pushPusblishFormData.publishDate,\n");
      out.write("            publishTime:pushPusblishFormData.publishTime,\n");
      out.write("            expireDate:pushPusblishFormData.expireDate,\n");
      out.write("            expireTime:pushPusblishFormData.expireTime,\n");
      out.write("            neverExpire:pushPusblishFormData.neverExpire,\n");
      out.write("            forcePush:pushPusblishFormData.forcePush\n");
      out.write("        };\n");
      out.write("\n");
      out.write("        var data = {\n");
      out.write("            assignComment:assignComment,\n");
      out.write("            pushPublish:pushPublish\n");
      out.write("        };\n");
      out.write("\n");
      out.write("        return fireAction(actionId, data);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function fireAction(actionId, popupData) {\n");
      out.write("\n");
      out.write("        dojo.byId('bulkActionsContainer').innerHTML = `");
      out.print(LanguageUtil.get(pageContext, "Applying"));
      out.write("`;\n");
      out.write("\n");
      out.write("        var selectedInodes = getSelectedInodes();\n");
      out.write("        if(!selectedInodes){\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var assignComment = null;\n");
      out.write("\n");
      out.write("        if((typeof popupData != \"undefined\") && (typeof popupData.assignComment != \"undefined\")){\n");
      out.write("            assignComment = popupData.assignComment;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var pushPublish = null;\n");
      out.write("        if((typeof popupData != \"undefined\") && (typeof popupData.pushPublish != \"undefined\")){\n");
      out.write("            pushPublish = popupData.pushPublish;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var additionalParams = {\n");
      out.write("            assignComment:assignComment,\n");
      out.write("            pushPublish:pushPublish\n");
      out.write("        };\n");
      out.write("\n");
      out.write("        var data ;\n");
      out.write("        if(Array.isArray(selectedInodes)){\n");
      out.write("            data = {\n");
      out.write("                \"workflowActionId\":actionId,\n");
      out.write("                \"contentletIds\":selectedInodes,\n");
      out.write("                \"additionalParams\":additionalParams\n");
      out.write("            };\n");
      out.write("        } else {\n");
      out.write("            data = {\n");
      out.write("                \"workflowActionId\":actionId,\n");
      out.write("                \"query\":selectedInodes,\n");
      out.write("                \"additionalParams\":additionalParams\n");
      out.write("            };\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var dataAsJson = dojo.toJson(data);\n");
      out.write("        var xhrArgs = {\n");
      out.write("            url: \"/api/v1/workflow/contentlet/actions/bulk/fire\",\n");
      out.write("            postData: dataAsJson,\n");
      out.write("            handleAs: \"json\",\n");
      out.write("            headers : {\n");
      out.write("                'Accept' : 'application/json',\n");
      out.write("                'Content-Type' : 'application/json;charset=utf-8',\n");
      out.write("            },\n");
      out.write("            load: function(data) {\n");
      out.write("                if(data && data.entity){\n");
      out.write("                    var summary = actionsExecutionSummarytMarkup(data.entity);\n");
      out.write("                    dojo.byId('bulkActionsContainer').innerHTML = summary;\n");
      out.write("                } else {\n");
      out.write("                    showDotCMSSystemMessage(`");
      out.print(LanguageUtil.get(pageContext, "Available-actions-error"));
      out.write("`, true);\n");
      out.write("                }\n");
      out.write("            },\n");
      out.write("            error: function(error){\n");
      out.write("                dojo.byId('bulkActionsContainer').innerHTML = `");
      out.print(LanguageUtil.get(pageContext, "Available-actions-error"));
      out.write("`;\n");
      out.write("            }\n");
      out.write("        };\n");
      out.write("\n");
      out.write("        dojo.xhrPut(xhrArgs);\n");
      out.write("        return true;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function getAvailableBulkActions(data){\n");
      out.write("\n");
      out.write("       var closeHandle = dojo.connect(dijit.byId('workflowActionsDia'), \"hide\",\n");
      out.write("            function(){\n");
      out.write("                fakeAjaxCallback();\n");
      out.write("                if(closeHandle){\n");
      out.write("                    dojo.disconnect(closeHandle);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        );\n");
      out.write("\n");
      out.write("        dojo.byId('bulkActionsContainer').innerHTML = `");
      out.print(LanguageUtil.get(pageContext, "dot.common.message.loading"));
      out.write("`;\n");
      out.write("        var dataAsJson = dojo.toJson(data);\n");
      out.write("        var xhrArgs = {\n");
      out.write("            url: \"/api/v1/workflow/contentlet/actions/bulk\",\n");
      out.write("            postData: dataAsJson,\n");
      out.write("            handleAs: \"json\",\n");
      out.write("            headers : {\n");
      out.write("                'Accept' : 'application/json',\n");
      out.write("                'Content-Type' : 'application/json;charset=utf-8',\n");
      out.write("            },\n");
      out.write("            load: function(data) {\n");
      out.write("                if(data && data.entity){\n");
      out.write("                    var markUp = actionsSummaryMarkup(data.entity);\n");
      out.write("                    dojo.byId('bulkActionsContainer').innerHTML = markUp;\n");
      out.write("                    dojo.query(\".wfAction\").onclick(\n");
      out.write("                       function(e){\n");
      out.write("                           var buttonElement = e.target;\n");
      out.write("                           var popupShown = showPopupIfRequired(buttonElement);\n");
      out.write("                           if(popupShown){\n");
      out.write("                               return;\n");
      out.write("                           }\n");
      out.write("                           var actionId = dojo.attr(buttonElement, 'data-acction-id');\n");
      out.write("                           fireAction(actionId);\n");
      out.write("                       }\n");
      out.write("                    );\n");
      out.write("                    dijit.byId('workflowActionsDia').show();\n");
      out.write("                } else {\n");
      out.write("                    dojo.byId('bulkActionsContainer').innerHTML = errorMarkup();\n");
      out.write("                    console.error('No data was returned.');\n");
      out.write("                }\n");
      out.write("            },\n");
      out.write("            error: function(error){\n");
      out.write("                dojo.byId('bulkActionsContainer').innerHTML = errorMarkup();\n");
      out.write("                console.error(error);\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        dojo.xhrPost(xhrArgs);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function addToBundleSelectedContentletsProxy(){\n");
      out.write("        addToBundleSelectedContentlets();\n");
      out.write("        dijit.byId('workflowActionsDia').hide();\n");
      out.write("        return true;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function pushPublishSelectedContentletsProxy(){\n");
      out.write("        pushPublishSelectedContentlets();\n");
      out.write("        dijit.byId('workflowActionsDia').hide();\n");
      out.write("        return true;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function unlockSelectedContentletsProxy(){\n");
      out.write("        unlockSelectedContentlets();\n");
      out.write("        dijit.byId('workflowActionsDia').hide();\n");
      out.write("        return true;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function reindexSelectedContentletsProxy() {\n");
      out.write("        reindexSelectedContentlets();\n");
      out.write("        dijit.byId('workflowActionsDia').hide();\n");
      out.write("        return true;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<style>\n");
      out.write("    #workflowActionsDia {\n");
      out.write("        width: 600px;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    #workflowActionsDia .listingTable {\n");
      out.write("        width: 99%;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .workflowActionsOption .dijitButton {\n");
      out.write("        width: 130px;\n");
      out.write("        text-align: center;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    #bulkActionsContainer {\n");
      out.write("        overflow:auto;\n");
      out.write("    }\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("<div dojoType=\"dijit.Dialog\" id=\"workflowActionsDia\"\n");
      out.write("     title='");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Available-actions" )) );
      out.write("'>\n");
      out.write("    <div>\n");
      out.write("        <table class=\"sTypeTable\"\n");
      out.write("               style=\"width:90%; border-collapse: separate; border-spacing: 10px 15px;margin-bottom:10px;\">\n");
      out.write("\n");
      out.write("            <tr class=\"workflowActionsOption\">\n");
      out.write("                ");
if(enterprise){
      out.write("\n");
      out.write("                <td style=\"width:140px;text-align: right\">\n");
      out.write("                    <button id=\"addToBundleButton\" dojoType=\"dijit.form.Button\" class=\"dijitButton\" data-dojo-props=\"onClick: addToBundleSelectedContentletsProxy\">\n");
      out.write("                        ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Add-To-Bundle")) );
      out.write("\n");
      out.write("                    </button>\n");
      out.write("                </td>\n");
      out.write("                ");
 if ( sendingEndpoints ) { 
      out.write("\n");
      out.write("                <td style=\"width:140px;text-align: right\">\n");
      out.write("                  <button id=\"pushPublishButton\"  dojoType=\"dijit.form.Button\" class=\"dijitButton\" data-dojo-props=\"onClick: pushPublishSelectedContentletsProxy\">\n");
      out.write("                       ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Remote-Publish")) );
      out.write("\n");
      out.write("                  </button>\n");
      out.write("                </td>\n");
      out.write("                ");
 } 
      out.write("\n");
      out.write("                ");
}
      out.write("\n");
      out.write("                <td style=\"width:140px;text-align: right\">\n");
      out.write("                    <button id=\"unlockButton\" dojoType=\"dijit.form.Button\" class=\"dijitButton\" data-dojo-props=\"onClick: unlockSelectedContentletsProxy\">\n");
      out.write("                        ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Unlock")));
      out.write("\n");
      out.write("                    </button>\n");
      out.write("                </td>\n");
      out.write("                ");
if(canReindexContentlets){
      out.write("\n");
      out.write("                <td style=\"width:140px;text-align: right\">\n");
      out.write("                    <button id=\"reindexButton\" dojoType=\"dijit.form.Button\" class=\"dijitButton\" data-dojo-props=\"onClick: reindexSelectedContentletsProxy\">\n");
      out.write("                        ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Refresh")) );
      out.write("\n");
      out.write("                    </button>\n");
      out.write("                </td>\n");
      out.write("                ");
}
      out.write("\n");
      out.write("            </tr>\n");
      out.write("        </table>\n");
      out.write("    </div>\n");
      out.write("    <div id=\"bulkActionsContainer\">\n");
      out.write("        ");
      out.write("\n");
      out.write("        <table class=\"sTypeTable\"\n");
      out.write("               style=\"width:90%; border-collapse: separate; border-spacing: 10px 15px;margin-bottom:10px;\">\n");
      out.write("            <tr>\n");
      out.write("                <th colspan=\"2\" class=\"sTypeHeader\">Document Management</th>\n");
      out.write("            </tr>\n");
      out.write("            <tr class=\"workflowActionsOption\">\n");
      out.write("                <td style=\"\">&nbsp;&nbsp;Publish</td>\n");
      out.write("                <td style=\"width:140px;text-align: right\">\n");
      out.write("                    <button dojoType=\"dijit.form.Button\" class=\"dijitButton\">10 content(s)</button>\n");
      out.write("                </td>\n");
      out.write("            </tr>\n");
      out.write("            <tr class=\"workflowActionsOption\">\n");
      out.write("                <td style=\"\">&nbsp;&nbsp;Unpublish</td>\n");
      out.write("                <td style=\"width:140px;text-align: right\">\n");
      out.write("                    <button dojoType=\"dijit.form.Button\" class=\"dijitButton\">8 content(s)</button>\n");
      out.write("                </td>\n");
      out.write("            </tr>\n");
      out.write("            <tr class=\"workflowActionsOption\">\n");
      out.write("                <td style=\"\">&nbsp;&nbsp;Tweet This!</td>\n");
      out.write("                <td style=\"width:140px;text-align: right\">\n");
      out.write("                    <button dojoType=\"dijit.form.Button\" class=\"dijitButton\">17 content(s)</button>\n");
      out.write("                </td>\n");
      out.write("            </tr>\n");
      out.write("            <tr class=\"workflowActionsOption\">\n");
      out.write("                <td style=\"\">&nbsp;&nbsp;Unpublish</td>\n");
      out.write("                <td style=\"width:140px;text-align: right\">\n");
      out.write("                    <button dojoType=\"dijit.form.Button\" class=\"dijitButton\">8 content(s)</button>\n");
      out.write("                </td>\n");
      out.write("            </tr>\n");
      out.write("            <tr class=\"workflowActionsOption\">\n");
      out.write("                <td style=\"\">&nbsp;&nbsp;Full Delete</td>\n");
      out.write("                <td style=\"width:140px;text-align: right\">\n");
      out.write("                    <button dojoType=\"dijit.form.Button\" class=\"dijitButton\">17 content(s)</button>\n");
      out.write("                </td>\n");
      out.write("            </tr>\n");
      out.write("        </table>\n");
      out.write("\n");
      out.write("        <table class=\"sTypeTable\"\n");
      out.write("               style=\"width:90%;  border-collapse: separate; border-spacing: 10px 15px;\">\n");
      out.write("            <tr class=\"sTypeHeader\">\n");
      out.write("                <th colspan=\"2\">System Workflow</th>\n");
      out.write("            </tr>\n");
      out.write("            <tr class=\"workflowActionsOption\">\n");
      out.write("                <td style=\"\">&nbsp;&nbsp;Publish</td>\n");
      out.write("                <td style=\"width:140px;text-align: right\">\n");
      out.write("                    <button dojoType=\"dijit.form.Button\" class=\"dijitButton\">14 content(s)</button>\n");
      out.write("                </td>\n");
      out.write("            </tr>\n");
      out.write("            <tr class=\"workflowActionsOption\">\n");
      out.write("                <td style=\"\">&nbsp;&nbsp;Save</td>\n");
      out.write("                <td style=\"width:140px;text-align: right\">\n");
      out.write("                    <button dojoType=\"dijit.form.Button\" class=\"dijitButton\">22 content(s)</button>\n");
      out.write("                </td>\n");
      out.write("            </tr>\n");
      out.write("            <tr class=\"workflowActionsOption\">\n");
      out.write("                <td style=\"\">&nbsp;&nbsp;Save as Draft</td>\n");
      out.write("                <td style=\"width:140px;text-align: right\">\n");
      out.write("                    <button dojoType=\"dijit.form.Button\" class=\"dijitButton\">22 content(s)</button>\n");
      out.write("                </td>\n");
      out.write("            </tr>\n");
      out.write("        </table>\n");
      out.write("\n");
      out.write("        ");
      out.write("\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<form method=\"Post\" action=\"\" id=\"search_form\" onsubmit=\"doSearch();return false;\">\r\n");
      out.write("\r\n");
      out.write("    <input type=\"hidden\" name=\"fullCommand\" id=\"fullCommand\" value=\"\">\r\n");
      out.write("    <input type=\"hidden\" name=\"expiredInodes\" id=\"expiredInodes\" value=\"\"/>\r\n");
      out.write("    <input type=\"hidden\" name=\"expireDateReset\" id=\"expireDateReset\" value=\"\"/>\r\n");
      out.write("    <input type=\"hidden\" name=\"luceneQuery\" id=\"luceneQuery\" value=\"\">\r\n");
      out.write("    <input type=\"hidden\" name=\"structureInode\" id=\"structureInode\" value=\"\">\r\n");
      out.write("    <input type=\"hidden\" name=\"fieldsValues\" id=\"fieldsValues\" value=\"\">\r\n");
      out.write("    <input type=\"hidden\" name=\"categoriesValues\" id=\"categoriesValues\" value=\"\">\r\n");
      out.write("    <input type=\"hidden\" name=\"showDeleted\" id=\"showDeleted\" value=\"");
      out.print( showDeleted );
      out.write("\">\r\n");
      out.write("    <input type=\"hidden\" name=\"filterSystemHost\" id=\"filterSystemHost\" value=\"");
      out.print( filterSystemHost );
      out.write("\">\r\n");
      out.write("    <input type=\"hidden\" name=\"filterLocked\" id=\"filterLocked\" value=\"");
      out.print( filterLocked );
      out.write("\">\r\n");
      out.write("    <input type=\"hidden\" name=\"filterUnpublish\" id=\"filterUnpublish\" value=\"");
      out.print( filterUnpublish );
      out.write("\">\r\n");
      out.write("    <input type=\"hidden\" name=\"currentPage\" id=\"currentPage\" value=\"\">\r\n");
      out.write("    <input type=\"hidden\" name=\"currentSortBy\" id=\"currentSortBy\" value=\"score,modDate desc\">\r\n");
      out.write("    <input type=\"hidden\" value=\"\" name=\"lastModDateFrom\"  id=\"lastModDateFrom\" size=\"10\" maxlength=\"10\" readonly=\"true\"/>\r\n");
      out.write("    <input type=\"hidden\" value=\"\" name=\"lastModDateTo\"  id=\"lastModDateTo\" size=\"10\" maxlength=\"10\" readonly=\"true\"/>\r\n");
      out.write("    <input type=\"hidden\" name=\"structureVelocityVarNames\" id=\"structureVelocityVarNames\" value=\"");
      out.print( structureVelocityVarNames );
      out.write("\">\r\n");
      out.write("    <input type=\"hidden\" name=\"structureInodesList\" id=\"structureInodesList\" value=\"");
      out.print( structureInodesList );
      out.write("\">\r\n");
      out.write("    <input type=\"hidden\" name=\"hostField\" id=\"hostField\" value=\"");
      out.print( conHostValue );
      out.write("\"/>\r\n");
      out.write("    <input type=\"hidden\" name=\"folderField\" id=\"folderField\" value=\"");
      out.print( conFolderValue );
      out.write("\"/>\r\n");
      out.write("    <input type=\"hidden\" value=\"\" name=\"Identifier\" id=\"Identifier\" size=\"10\"/>\r\n");
      out.write("    <input type=\"hidden\" value=\"\" name=\"allSearchedContentsInodes\" id=\"allSearchedContentsInodes\" dojoType=\"dijit.form.TextBox\"/>\r\n");
      out.write("    <input type=\"hidden\" value=\"\" name=\"allUncheckedContentsInodes\" id=\"allUncheckedContentsInodes\" dojoType=\"dijit.form.TextBox\"/>\r\n");
      out.write("    <!-- START Split Screen -->\r\n");
      out.write("    <div dojoType=\"dijit.layout.BorderContainer\" design=\"sidebar\" gutters=\"false\" liveSplitters=\"true\" id=\"borderContainer\">\r\n");
      out.write("\r\n");
      out.write("        <!-- START Left Column -->\r\n");
      out.write("        <div dojoType=\"dijit.layout.ContentPane\" id=\"filterWrapper\" splitter=\"false\" region=\"leading\" style=\"width: 200px;\" class=\"portlet-sidebar-wrapper\" >\r\n");
      out.write("            <div class=\"portlet-sidebar\">\r\n");
      out.write("                ");
 List<Structure> readStructs = StructureFactory.getStructuresWithReadPermissions(user, true);  
      out.write("\r\n");
      out.write("                ");
 if((readStructs.size() == 0)){
      out.write("\r\n");
      out.write("                <div align=\"center\" style=\"text-align:center;\">\r\n");
      out.write("                    <dt><FONT COLOR=\"#FF0000\">");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "No-Structure-Read-Permissions" )) );
      out.write("</FONT></dt>\r\n");
      out.write("                </div>\r\n");
      out.write("                ");
}
      out.write("\r\n");
      out.write("\r\n");
      out.write("                <!-- START Advanced Search-->\r\n");
      out.write("                <div id=\"advancedSearch\">\r\n");
      out.write("                    <dl class=\"vertical\">\r\n");
      out.write("                        <dt><label>");
      out.print(LanguageUtil.get(pageContext, "Type") );
      out.write(":</label></dt>\r\n");
      out.write("                        <dd><span id=\"structSelectBox\"></span></dd>\r\n");
      out.write("                        <div class=\"clear\"></div>\r\n");
      out.write("\r\n");
      out.write("                        <dt><label>");
      out.print( LanguageUtil.get(pageContext, "Search") );
      out.write(":</label></dt>\r\n");
      out.write("                        <dd><input type=\"text\" dojoType=\"dijit.form.TextBox\" tabindex=\"1\" onKeyUp='doSearch()' name=\"allFieldTB\" id=\"allFieldTB\" value=\"");
      out.print(_allValue );
      out.write("\"></dd>\r\n");
      out.write("                        <div class=\"clear\"></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                    </dl>\r\n");
      out.write("\r\n");
      out.write("                    <div id=\"advancedSearchOptions\" style=\"height:0px;overflow: hidden\">\r\n");
      out.write("\r\n");
      out.write("                        <dl class=\"vertical\">\r\n");
      out.write("                            <dt><label>");
      out.print( LanguageUtil.get(pageContext, "Workflow-Schemes") );
      out.write(":</label></dt>\r\n");
      out.write("                            <dd><span id=\"schemeSelectBox\"></span></dd>\r\n");
      out.write("                            <div class=\"clear\"></div>\r\n");
      out.write("                        </dl>\r\n");
      out.write("\r\n");
      out.write("                        <dl class=\"vertical\">\r\n");
      out.write("                            <dt><label>");
      out.print( LanguageUtil.get(pageContext, "Step") );
      out.write(":</label></dt>\r\n");
      out.write("                            <dd><span id=\"stepSelectBox\"></span></dd>\r\n");
      out.write("                            <div class=\"clear\"></div>\r\n");
      out.write("                        </dl>\r\n");
      out.write("\r\n");
      out.write("                        ");
if (languages.size() > 1) { 
      out.write("\r\n");
      out.write("                        <dl class=\"vertical\">\r\n");
      out.write("                            <!-- Language search fields  --->\r\n");
      out.write("                            <dt><label>");
      out.print( LanguageUtil.get(pageContext, "Language") );
      out.write(":</label></dt>\r\n");
      out.write("                            <dd>\r\n");
      out.write("                                <div id=\"combo_zone2\">\r\n");
      out.write("                                    <input id=\"language_id\"/>\r\n");
      out.write("                                </div>\r\n");
      out.write("\r\n");
      out.write("                                ");
      out.write("<script>\n");
      out.write("\t");
StringBuffer buff = new StringBuffer();
	  buff.append("{identifier:'id',label:'label',items:[");

	  String style="width:16px;height:11px;display:inline-block;vertical-align:middle;margin:3px 5px 3px 2px;";
	  buff.append("{id:'0',value:'',lang:'All',label:'All'}");
	  for (Language lang : languages) {
		  final String display=lang.getLanguage() + (UtilMethods.isSet(lang.getCountryCode()) ? " (" + lang.getCountryCode().trim() + ")" : "");
		  buff.append(",{id:'"+lang.getId()+"',");
		  buff.append("value:'"+lang.getId()+"',");
		  buff.append("lang:'"+display+"',");
		  buff.append("label:'"+display+"'}");
	  }
	  buff.append("]}");
      out.write("\n");
      out.write("\n");
      out.write("\tfunction updateSelectBoxImage(myselect) {\n");
      out.write("\t\tvar selField = dojo.query('#combo_zone2 div.dijitInputField')[0];\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t\tvar storeData=");
      out.print(buff.toString());
      out.write(";\n");
      out.write("\t\tvar langStore = new dojo.data.ItemFileReadStore({data: storeData});\n");
      out.write("\t\tvar myselect = new dijit.form.FilteringSelect({\n");
      out.write("\t\t\t\t id: \"language_id\",\n");
      out.write("\t\t\t\t name: \"language_id\",\n");
      out.write("\t\t\t\t value: '',\n");
      out.write("\t\t\t\t required: true,\n");
      out.write("\t\t\t\t store: langStore,\n");
      out.write("\t\t\t\t searchAttr: \"lang\",\n");
      out.write("\t\t\t\t labelAttr: \"label\",\n");
      out.write("\t\t\t\t labelType: \"html\",\n");
      out.write("\t\t\t\t onChange: function() {\n");
      out.write("\t\t\t\t\t var el=dijit.byId('language_id');\n");
      out.write("\t\t\t\t\t updateSelectBoxImage(el);\n");
      out.write("\t\t\t\t\t doSearch();\n");
      out.write("\t\t\t\t },\n");
      out.write("\t\t\t\t labelFunc: function(item, store) { return store.getValue(item, \"label\"); }\n");
      out.write("\t\t\t},\n");
      out.write("\t\t\tdojo.byId(\"language_id\"));\n");
      out.write("\t\t\t\n");
      out.write("\t\t\tmyselect.setValue('");
      out.print(languageId);
      out.write("');\n");
      out.write("\n");
      out.write("</script>");
      out.write("\r\n");
      out.write("                            </dd>\r\n");
      out.write("                        </dl>\r\n");
      out.write("                        ");
} else { 
      out.write("\r\n");
      out.write("                        ");
 long langId = languages.get(0).getId(); 
      out.write("\r\n");
      out.write("                        <input type=\"hidden\" name=\"language_id\" id=\"language_id\" value=\"");
      out.print( langId );
      out.write("\">\r\n");
      out.write("                        ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                        <!-- Ajax built search fields  --->\r\n");
      out.write("                        <div id=\"search_fields_table\"></div>\r\n");
      out.write("                        <div class=\"clear\"></div>\r\n");
      out.write("                        <!-- /Ajax built search fields  --->\r\n");
      out.write("\r\n");
      out.write("                        <!-- Ajax built Categories   --->\r\n");
      out.write("                        <dl class=\"vertical\" id=\"search_categories_list\"></dl>\r\n");
      out.write("                        <div class=\"clear\"></div>\r\n");
      out.write("                        <!-- /Ajax built Categories   --->\r\n");
      out.write("\r\n");
      out.write("                        <dl class=\"vertical\">\r\n");
      out.write("                            <dt><label>");
      out.print( LanguageUtil.get(pageContext, "Show") );
      out.write(":</label></dt>\r\n");
      out.write("                            <dd>\r\n");
      out.write("                                <select name=\"showingSelect\" onchange='doSearch(1);togglePublish()'  id=\"showingSelect\" dojoType=\"dijit.form.FilteringSelect\">\r\n");
      out.write("                                    <option value=\"all\" ");
 if (!showDeleted && !filterLocked && !filterUnpublish) { 
      out.write(" selected ");
 } 
      out.write('>');
      out.print( LanguageUtil.get(pageContext, "All") );
      out.write("</option>\r\n");
      out.write("                                    <option value=\"locked\" ");
 if (filterLocked) { 
      out.write(" selected ");
 } 
      out.write('>');
      out.print( LanguageUtil.get(pageContext, "Locked") );
      out.write("</option>\r\n");
      out.write("                                    <option value=\"unpublished\" ");
 if (filterUnpublish) { 
      out.write(" selected ");
 } 
      out.write('>');
      out.print( LanguageUtil.get(pageContext, "Unpublished") );
      out.write("</option>\r\n");
      out.write("                                    <option value=\"archived\" ");
 if (showDeleted) { 
      out.write(" selected ");
 } 
      out.write('>');
      out.print( LanguageUtil.get(pageContext, "Archived") );
      out.write("</option>\r\n");
      out.write("                                </select>\r\n");
      out.write("                            </dd>\r\n");
      out.write("                        </dl>\r\n");
      out.write("\r\n");
      out.write("                        <div class=\"clear\"></div>\r\n");
      out.write("\r\n");
      out.write("                        <dl class=\"radio-check-one-line\" id=\"filterSystemHostTable\">\r\n");
      out.write("                            <dt><label for=\"filterSystemHostCB\">");
      out.print( LanguageUtil.get(pageContext, "Exclude-system-host") );
      out.write("</label></dt>\r\n");
      out.write("                            <dd>\r\n");
      out.write("                                <div class=\"checkbox\">\r\n");
      out.write("                                    <input type=\"checkbox\" dojoType=\"dijit.form.CheckBox\" id=\"filterSystemHostCB\" onclick=\"doSearch(1);\" ");
      out.print(filterSystemHost?"checked=\"checked\"":"");
      out.write(">\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </dd>\r\n");
      out.write("                        </dl>\r\n");
      out.write("\r\n");
      out.write("                        <div id=\"measureTheHeightOfSearchTools\" class=\"clear\"></div>\r\n");
      out.write("                    </div>\r\n");
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("                <!-- END Advanced Search-->\r\n");
      out.write("\r\n");
      out.write("                <div class=\"buttonRow\">\r\n");
      out.write("                    <dl class=\"vertical\">\r\n");
      out.write("                        <dd>\r\n");
      out.write("                            <button dojoType=\"dijit.form.ComboButton\" id=\"searchButton\" optionsTitle='createOptions' onClick=\"doSearch();return false;\" iconClass=\"searchIcon\" title=\"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "search")) );
      out.write("\">\r\n");
      out.write("                                <span>");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "search")) );
      out.write("</span>\r\n");
      out.write("                                <div dojoType=\"dijit.Menu\" style=\"display: none;\" onClick=\"doSearch();return false;\">\r\n");
      out.write("                                    <div dojoType=\"dijit.MenuItem\"  iconClass=\"searchIcon\" onClick=\"doSearch();return false;\">");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "search")) );
      out.write("</div>\r\n");
      out.write("                                    <div dojoType=\"dijit.MenuItem\" iconClass=\"queryIcon\" onClick=\"showHideQuery()\">");
      out.print( LanguageUtil.get(pageContext, "Show-Query"));
      out.write("</div>\r\n");
      out.write("                                </div>\r\n");
      out.write("                            </button>\r\n");
      out.write("                        </dd>\r\n");
      out.write("                    </dl>\r\n");
      out.write("\r\n");
      out.write("                    <dl class=\"vertical\">\r\n");
      out.write("                        <dd>\r\n");
      out.write("                            <button dojoType=\"dijit.form.Button\" id=\"clearButton\" onClick=\"clearSearch();doSearch();\" iconClass=\"resetIcon\" class=\"dijitButtonFlat\">\r\n");
      out.write("                                ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Clear")) );
      out.write("\r\n");
      out.write("                            </button>\r\n");
      out.write("                        </dd>\r\n");
      out.write("                    </dl>\r\n");
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <a href=\"javascript:toggleAdvancedSearchDiv()\" class=\"advanced-search-button\">\r\n");
      out.write("                    <div id=\"toggleDivText\">\r\n");
      out.write("                        ");
      out.print( LanguageUtil.get(pageContext, "Advanced") );
      out.write("\r\n");
      out.write("                    </div>\r\n");
      out.write("                </a>\r\n");
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("        <!-- END Left Column -->\r\n");
      out.write("\r\n");
      out.write("        <!-- START Right Column -->\r\n");
      out.write("\r\n");
      out.write("        <div dojoType=\"dijit.layout.ContentPane\" splitter=\"true\" region=\"center\" class=\"portlet-content-search\" id=\"contentWrapper\" style=\"overflow-y:auto; overflow-x:auto;\">\r\n");
      out.write("            <div class=\"portlet-main\">\r\n");
      out.write("                <div id=\"metaMatchingResultsDiv\" style=\"display:none;\">\r\n");
      out.write("                    <!-- START Listing Results -->\r\n");
      out.write("                    <input type=\"hidden\" name=\"referer\" value=\"");
      out.print(referer);
      out.write("\">\r\n");
      out.write("                    <input type=\"hidden\" name=\"cmd\" value=\"prepublish\">\r\n");
      out.write("                    <div class=\"portlet-toolbar\">\r\n");
      out.write("                        <div class=\"portlet-toolbar__actions-secondary\">\r\n");
      out.write("                            <button id=\"bulkAvailableActions\" dojoType=\"dijit.form.Button\" data-dojo-props=\"onClick: doShowAvailableActions\" iconClass=\"actionIcon\" >\r\n");
      out.write("                                ");
      out.print( LanguageUtil.get(pageContext, "Available-actions"));
      out.write("\r\n");
      out.write("                            </button>\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div id=\"matchingResultsDiv\" style=\"display: none\" class=\"portlet-toolbar__info\"></div>\r\n");
      out.write("                        <div class=\"portlet-toolbar__actions-primary\">\r\n");
      out.write("                            <div data-dojo-type=\"dijit/form/DropDownButton\" data-dojo-props='iconClass:\"actionIcon\", class:\"dijitDropDownActionButton\"'>\r\n");
      out.write("                                <span></span>\r\n");
      out.write("                                <script type=\"text/javascript\">\r\n");
      out.write("                                    function importContent() {\r\n");
      out.write("                                        window.location = '/c/portal/layout?p_l_id=");
      out.print( layout.getId() );
      out.write("&dm_rlout=1&p_p_id=");
      out.print(PortletID.CONTENT);
      out.write("&p_p_action=1&p_p_state=maximized&_");
      out.print(PortletID.CONTENT);
      out.write("_struts_action=/ext/contentlet/import_contentlets&selectedStructure=' + document.getElementById('structureInode').value;\r\n");
      out.write("                                    }\r\n");
      out.write("                                </script>\r\n");
      out.write("                                <ul data-dojo-type=\"dijit/Menu\" id=\"actionPrimaryMenu\" style=\"display: none;\">\r\n");
      out.write("                                    <li data-dojo-type=\"dijit/MenuItem\" data-dojo-props=\"onClick:function() {addNewContentlet()}\">");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Add-New-Content" )) );
      out.write("</li>\r\n");
      out.write("                                    <li data-dojo-type=\"dijit/MenuItem\" data-dojo-props=\"onClick:importContent\">\r\n");
      out.write("                                        ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Import-Content" )) );
      out.write("\r\n");
      out.write("                                    </li>\r\n");
      out.write("                                </ul>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <table id=\"results_table\" class=\"listingTable content-search__results-list\"></table>\r\n");
      out.write("                    <div id=\"results_table_popup_menus\"></div>\r\n");
      out.write("                    <!-- END Listing Results -->\r\n");
      out.write("                </div>\r\n");
      out.write("\r\n");
      out.write("                <!-- Start Pagination -->\r\n");
      out.write("                <div class=\"portlet-pagination\">\r\n");
      out.write("                    <div id=\"previousDiv\" style=\"display: none;\">\r\n");
      out.write("                        <button dojoType=\"dijit.form.Button\" onClick=\"previousPage();return false;\" iconClass=\"previousIcon\" id=\"previousDivButton\">\r\n");
      out.write("                            ");
      out.print( LanguageUtil.get(pageContext, "Previous"));
      out.write("\r\n");
      out.write("                        </button>\r\n");
      out.write("                    </div>&nbsp;\r\n");
      out.write("                    <div id=\"matchingResultsBottomDiv\" class=\"portlet-pagination__results\"></div>\r\n");
      out.write("                    <div id=\"nextDiv\" style=\"display: none;\">\r\n");
      out.write("                        <button dojoType=\"dijit.form.Button\" onClick=\"nextPage();return false;\" iconClass=\"nextIcon\" id=\"nextDivButton\">\r\n");
      out.write("                            ");
      out.print( LanguageUtil.get(pageContext, "Next"));
      out.write("\r\n");
      out.write("                        </button>\r\n");
      out.write("                    </div>&nbsp;\r\n");
      out.write("                </div>\r\n");
      out.write("                <!-- END Pagination -->\r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("        <!-- END Right Column -->\r\n");
      out.write("\r\n");
      out.write("        <!-- START Show Query -->\r\n");
      out.write("        <div id=\"queryDiv\" dojoType=\"dijit.Dialog\" class=\"content-search__show-query-dialog\" style=\"display: none;padding-top:15px\\9;\">\r\n");
      out.write("            <div id=\"queryResults\"></div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <!-- END Show Query -->\r\n");
      out.write("\r\n");
      out.write("        <!-- START Search Hint -->\r\n");
      out.write("        <div id=\"hintsdiv\" dojoType=\"dijit.Dialog\" style=\"display: none\">\r\n");
      out.write("            <b>");
      out.print( LanguageUtil.get(pageContext, "Search-Hints") );
      out.write("</b>\r\n");
      out.write("            <ul style=\"list-style:none; margin:0px; padding:0px;\">\r\n");
      out.write("                <li>");
      out.print( LanguageUtil.get(pageContext, "message.contentlet.hints.text1") );
      out.write("</li>\r\n");
      out.write("                <li>");
      out.print( LanguageUtil.get(pageContext, "message.contentlet.hints.text2") );
      out.write("</li>\r\n");
      out.write("                <li>");
      out.print( LanguageUtil.get(pageContext, "message.contentlet.hints.text3") );
      out.write("</li>\r\n");
      out.write("                <li>");
      out.print( LanguageUtil.get(pageContext, "message.contentlet.hints.text4") );
      out.write("</li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </div>\r\n");
      out.write("        <!-- START Search Hint -->\r\n");
      out.write("\r\n");
      out.write("        <div id=\"popups\"></div>\r\n");
      out.write("\r\n");
      out.write("        ");
if(UtilMethods.isSet(structureSelected) && structure.getStructureType()==Structure.STRUCTURE_TYPE_FORM){ 
      out.write("\r\n");
      out.write("        <input type=\"hidden\" name=\"contentStructureType\" value=\"3\"/>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("<div class=\"messageZone\" id=\"messageZone\" style=\"display: none;\">\r\n");
      out.write("    <i class=\"loadingIcon\"></i>\r\n");
      out.write("    ");
      out.print( LanguageUtil.get(pageContext, "Loading"));
      out.write("...\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div dojoType=\"dijit.Dialog\" id=\"selectStructureDiv\"  title='");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Add-New-Content" )) );
      out.write("'>\r\n");
      out.write("\r\n");
      out.write("    <table class=\"sTypeTable\">\r\n");
      out.write("        <tr>\r\n");
      out.write("            ");
int stType=0; 
      out.write("\r\n");
      out.write("            ");
int maxPerCol=Config.getIntProperty("EDIT_CONTENT_STRUCTURES_PER_COLUMN", 15); 
      out.write("\r\n");
      out.write("            <td class=\"sTypeTd\">\r\n");
      out.write("                ");
int i=0; 
      out.write("\r\n");
      out.write("                ");
for( Structure struc : structures) {
      out.write("\r\n");
      out.write("                ");
if(stType != struc.getStructureType()){ 
      out.write("\r\n");
      out.write("                ");
 stType = struc.getStructureType(); 
      out.write("\r\n");
      out.write("                <div class=\"sTypeHeader\" id=\"sType");
      out.print(strTypeNames[stType] );
      out.write('"');
      out.write('>');
      out.print(strTypeNames[stType] );
      out.write("</div>\r\n");
      out.write("                ");
} 
      out.write("\r\n");
      out.write("                <div class=\"sTypeItem\" id=\"sType");
      out.print(struc.getInode() );
      out.write("\"><a href=\"javascript:addNewContentlet('");
      out.print(struc.getInode() );
      out.write("');\">");
      out.print(struc.getName() );
      out.write("</a></div>\r\n");
      out.write("                ");
if(i++ == maxPerCol){ 
      out.write("\r\n");
      out.write("                ");
i=0; 
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("            <td valign=\"top\" class=\"sTypeTd\">\r\n");
      out.write("                ");
} 
      out.write("\r\n");
      out.write("                ");
} 
      out.write("\r\n");
      out.write("            </td>\r\n");
      out.write("        </tr>\r\n");
      out.write("    </table>\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_portlet_005fparam_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f0 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f0_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f0.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f0);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(786,25) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f0.setName("struts_action");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(786,25) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f0.setValue("/ext/calendar/edit_event");
      int _jspx_eval_portlet_005fparam_005f0 = _jspx_th_portlet_005fparam_005f0.doStartTag();
      if (_jspx_th_portlet_005fparam_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f0);
      _jspx_th_portlet_005fparam_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f0, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fparam_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f1 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f1_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f1.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f0);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(787,25) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f1.setName("cmd");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(787,25) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f1.setValue("new");
      int _jspx_eval_portlet_005fparam_005f1 = _jspx_th_portlet_005fparam_005f1.doStartTag();
      if (_jspx_th_portlet_005fparam_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f1);
      _jspx_th_portlet_005fparam_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f1, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fparam_005f3(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f0, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f3 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f3_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f3.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f3.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f0);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(789,25) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f3.setName("inode");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(789,25) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f3.setValue("");
      int _jspx_eval_portlet_005fparam_005f3 = _jspx_th_portlet_005fparam_005f3.doStartTag();
      if (_jspx_th_portlet_005fparam_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f3);
      _jspx_th_portlet_005fparam_005f3_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f3, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f3_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fparam_005f4(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f4 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f4_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f4.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f4.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f1);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(796,25) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f4.setName("struts_action");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(796,25) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f4.setValue("/ext/contentlet/edit_contentlet");
      int _jspx_eval_portlet_005fparam_005f4 = _jspx_th_portlet_005fparam_005f4.doStartTag();
      if (_jspx_th_portlet_005fparam_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f4);
      _jspx_th_portlet_005fparam_005f4_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f4, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f4_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fparam_005f5(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f5 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f5_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f5.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f5.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f1);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(797,25) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f5.setName("cmd");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(797,25) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f5.setValue("new");
      int _jspx_eval_portlet_005fparam_005f5 = _jspx_th_portlet_005fparam_005f5.doStartTag();
      if (_jspx_th_portlet_005fparam_005f5.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f5);
      _jspx_th_portlet_005fparam_005f5_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f5, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f5_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fparam_005f7(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f1, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f7 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f7_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f7.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f7.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f1);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(799,25) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f7.setName("inode");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(799,25) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f7.setValue("");
      int _jspx_eval_portlet_005fparam_005f7 = _jspx_th_portlet_005fparam_005f7.doStartTag();
      if (_jspx_th_portlet_005fparam_005f7.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f7);
      _jspx_th_portlet_005fparam_005f7_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f7, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f7_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fparam_005f8(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f2, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f8 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f8_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f8.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f8.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f2);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(988,25) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f8.setName("struts_action");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(988,25) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f8.setValue("/ext/contentlet/edit_contentlet");
      int _jspx_eval_portlet_005fparam_005f8 = _jspx_th_portlet_005fparam_005f8.doStartTag();
      if (_jspx_th_portlet_005fparam_005f8.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f8);
      _jspx_th_portlet_005fparam_005f8_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f8, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f8_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fparam_005f9(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f2, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f9 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f9_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f9.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f9.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f2);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(989,25) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f9.setName("cmd");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(989,25) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f9.setValue("export");
      int _jspx_eval_portlet_005fparam_005f9 = _jspx_th_portlet_005fparam_005f9.doStartTag();
      if (_jspx_th_portlet_005fparam_005f9.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f9);
      _jspx_th_portlet_005fparam_005f9_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f9, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f9_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005factionURL_005f3(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:actionURL
    com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag _jspx_th_portlet_005factionURL_005f3 = (com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag) _005fjspx_005ftagPool_005fportlet_005factionURL.get(com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag.class);
    boolean _jspx_th_portlet_005factionURL_005f3_reused = false;
    try {
      _jspx_th_portlet_005factionURL_005f3.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005factionURL_005f3.setParent(null);
      int _jspx_eval_portlet_005factionURL_005f3 = _jspx_th_portlet_005factionURL_005f3.doStartTag();
      if (_jspx_eval_portlet_005factionURL_005f3 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        if (_jspx_eval_portlet_005factionURL_005f3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_portlet_005factionURL_005f3);
        }
        do {
          if (_jspx_meth_portlet_005fparam_005f11(_jspx_th_portlet_005factionURL_005f3, _jspx_page_context))
            return true;
          if (_jspx_meth_portlet_005fparam_005f12(_jspx_th_portlet_005factionURL_005f3, _jspx_page_context))
            return true;
          int evalDoAfterBody = _jspx_th_portlet_005factionURL_005f3.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
        if (_jspx_eval_portlet_005factionURL_005f3 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = _jspx_page_context.popBody();
        }
      }
      if (_jspx_th_portlet_005factionURL_005f3.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005factionURL.reuse(_jspx_th_portlet_005factionURL_005f3);
      _jspx_th_portlet_005factionURL_005f3_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005factionURL_005f3, _jsp_getInstanceManager(), _jspx_th_portlet_005factionURL_005f3_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fparam_005f11(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f3, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f11 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f11_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f11.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f11.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f3);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(1051,50) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f11.setName("struts_action");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(1051,50) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f11.setValue("/ext/contentlet/edit_contentlet");
      int _jspx_eval_portlet_005fparam_005f11 = _jspx_th_portlet_005fparam_005f11.doStartTag();
      if (_jspx_th_portlet_005fparam_005f11.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f11);
      _jspx_th_portlet_005fparam_005f11_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f11, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f11_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fparam_005f12(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f3, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f12 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f12_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f12.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f12.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f3);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(1051,128) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f12.setName("cmd");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(1051,128) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f12.setValue("full_reindex_list");
      int _jspx_eval_portlet_005fparam_005f12 = _jspx_th_portlet_005fparam_005f12.doStartTag();
      if (_jspx_th_portlet_005fparam_005f12.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f12);
      _jspx_th_portlet_005fparam_005f12_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f12, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f12_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005factionURL_005f4(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:actionURL
    com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag _jspx_th_portlet_005factionURL_005f4 = (com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag) _005fjspx_005ftagPool_005fportlet_005factionURL.get(com.dotcms.repackage.com.liferay.portlet.taglib.ActionURLTag.class);
    boolean _jspx_th_portlet_005factionURL_005f4_reused = false;
    try {
      _jspx_th_portlet_005factionURL_005f4.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005factionURL_005f4.setParent(null);
      int _jspx_eval_portlet_005factionURL_005f4 = _jspx_th_portlet_005factionURL_005f4.doStartTag();
      if (_jspx_eval_portlet_005factionURL_005f4 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        if (_jspx_eval_portlet_005factionURL_005f4 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_portlet_005factionURL_005f4);
        }
        do {
          if (_jspx_meth_portlet_005fparam_005f13(_jspx_th_portlet_005factionURL_005f4, _jspx_page_context))
            return true;
          if (_jspx_meth_portlet_005fparam_005f14(_jspx_th_portlet_005factionURL_005f4, _jspx_page_context))
            return true;
          int evalDoAfterBody = _jspx_th_portlet_005factionURL_005f4.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
        if (_jspx_eval_portlet_005factionURL_005f4 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
          out = _jspx_page_context.popBody();
        }
      }
      if (_jspx_th_portlet_005factionURL_005f4.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005factionURL.reuse(_jspx_th_portlet_005factionURL_005f4);
      _jspx_th_portlet_005factionURL_005f4_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005factionURL_005f4, _jsp_getInstanceManager(), _jspx_th_portlet_005factionURL_005f4_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fparam_005f13(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f4, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f13 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f13_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f13.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f13.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f4);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(2379,46) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f13.setName("struts_action");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(2379,46) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f13.setValue("/ext/contentlet/edit_contentlet");
      int _jspx_eval_portlet_005fparam_005f13 = _jspx_th_portlet_005fparam_005f13.doStartTag();
      if (_jspx_th_portlet_005fparam_005f13.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f13);
      _jspx_th_portlet_005fparam_005f13_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f13, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f13_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fparam_005f14(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f4, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f14 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f14_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f14.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f14.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f4);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(2379,124) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f14.setName("cmd");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(2379,124) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f14.setValue("full_unlock_list");
      int _jspx_eval_portlet_005fparam_005f14 = _jspx_th_portlet_005fparam_005f14.doStartTag();
      if (_jspx_th_portlet_005fparam_005f14.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f14);
      _jspx_th_portlet_005fparam_005f14_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f14, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f14_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fparam_005f15(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f5, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f15 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f15_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f15.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f15.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f5);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(2556,86) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f15.setName("struts_action");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(2556,86) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f15.setValue("/ext/contentlet/edit_contentlet");
      int _jspx_eval_portlet_005fparam_005f15 = _jspx_th_portlet_005fparam_005f15.doStartTag();
      if (_jspx_th_portlet_005fparam_005f15.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f15);
      _jspx_th_portlet_005fparam_005f15_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f15, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f15_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fparam_005f16(javax.servlet.jsp.tagext.JspTag _jspx_th_portlet_005factionURL_005f5, javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:param
    com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_portlet_005fparam_005f16 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
    boolean _jspx_th_portlet_005fparam_005f16_reused = false;
    try {
      _jspx_th_portlet_005fparam_005f16.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fparam_005f16.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_portlet_005factionURL_005f5);
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(2556,164) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f16.setName("cmd");
      // /html/portlet/ext/contentlet/view_contentlets_js_inc.jsp(2556,164) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_portlet_005fparam_005f16.setValue("copy");
      int _jspx_eval_portlet_005fparam_005f16 = _jspx_th_portlet_005fparam_005f16.doStartTag();
      if (_jspx_th_portlet_005fparam_005f16.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_portlet_005fparam_005f16);
      _jspx_th_portlet_005fparam_005f16_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fparam_005f16, _jsp_getInstanceManager(), _jspx_th_portlet_005fparam_005f16_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fnamespace_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:namespace
    com.dotcms.repackage.com.liferay.portlet.taglib.NamespaceTag _jspx_th_portlet_005fnamespace_005f0 = (com.dotcms.repackage.com.liferay.portlet.taglib.NamespaceTag) _005fjspx_005ftagPool_005fportlet_005fnamespace_005fnobody.get(com.dotcms.repackage.com.liferay.portlet.taglib.NamespaceTag.class);
    boolean _jspx_th_portlet_005fnamespace_005f0_reused = false;
    try {
      _jspx_th_portlet_005fnamespace_005f0.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fnamespace_005f0.setParent(null);
      int _jspx_eval_portlet_005fnamespace_005f0 = _jspx_th_portlet_005fnamespace_005f0.doStartTag();
      if (_jspx_th_portlet_005fnamespace_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fnamespace_005fnobody.reuse(_jspx_th_portlet_005fnamespace_005f0);
      _jspx_th_portlet_005fnamespace_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fnamespace_005f0, _jsp_getInstanceManager(), _jspx_th_portlet_005fnamespace_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_portlet_005fnamespace_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  portlet:namespace
    com.dotcms.repackage.com.liferay.portlet.taglib.NamespaceTag _jspx_th_portlet_005fnamespace_005f1 = (com.dotcms.repackage.com.liferay.portlet.taglib.NamespaceTag) _005fjspx_005ftagPool_005fportlet_005fnamespace_005fnobody.get(com.dotcms.repackage.com.liferay.portlet.taglib.NamespaceTag.class);
    boolean _jspx_th_portlet_005fnamespace_005f1_reused = false;
    try {
      _jspx_th_portlet_005fnamespace_005f1.setPageContext(_jspx_page_context);
      _jspx_th_portlet_005fnamespace_005f1.setParent(null);
      int _jspx_eval_portlet_005fnamespace_005f1 = _jspx_th_portlet_005fnamespace_005f1.doStartTag();
      if (_jspx_th_portlet_005fnamespace_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fportlet_005fnamespace_005fnobody.reuse(_jspx_th_portlet_005fnamespace_005f1);
      _jspx_th_portlet_005fnamespace_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fnamespace_005f1, _jsp_getInstanceManager(), _jspx_th_portlet_005fnamespace_005f1_reused);
    }
    return false;
  }
}
