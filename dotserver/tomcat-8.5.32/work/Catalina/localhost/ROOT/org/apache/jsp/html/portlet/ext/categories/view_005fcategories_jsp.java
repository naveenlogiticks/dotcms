/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2019-11-28 18:39:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.html.portlet.ext.categories;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.dotmarketing.util.UtilMethods;
import com.dotmarketing.util.InodeUtils;
import com.dotmarketing.portlets.categories.model.Category;
import com.dotmarketing.business.APILocator;
import com.dotmarketing.portlets.categories.business.CategoryAPI;
import com.dotcms.publisher.endpoint.bean.PublishingEndPoint;
import com.dotcms.publisher.endpoint.business.PublishingEndPointAPI;
import com.dotcms.enterprise.LicenseUtil;
import com.dotcms.enterprise.license.LicenseLevel;
import com.dotmarketing.util.UtilMethods;
import com.dotmarketing.business.Layout;
import com.liferay.portal.NoSuchUserException;
import com.liferay.portal.auth.PrincipalException;
import com.liferay.portal.ejb.AddressManagerUtil;
import com.liferay.portal.ejb.CompanyLocalManagerUtil;
import com.liferay.portal.ejb.PortletManagerUtil;
import com.liferay.portal.ejb.PortletPreferencesManagerUtil;
import com.liferay.portal.ejb.UserLocalManagerUtil;
import com.liferay.portal.model.*;
import com.liferay.portal.util.Constants;
import com.liferay.portal.util.CookieKeys;
import com.liferay.portal.util.ImageKey;
import com.liferay.portal.util.OmniadminUtil;
import com.liferay.portal.util.PortalUtil;
import com.liferay.portal.util.PortletKeys;
import com.liferay.portal.util.Recipient;
import com.liferay.portal.util.RecipientComparator;
import com.liferay.portal.util.ReleaseInfo;
import com.liferay.portal.util.Resolution;
import com.liferay.portal.util.ShutdownUtil;
import com.liferay.portal.util.WebAppPool;
import com.liferay.portlet.ConcretePortletWrapper;
import com.liferay.portlet.LiferayWindowState;
import com.liferay.portlet.PortletURLImpl;
import com.liferay.portlet.RenderParametersPool;
import com.liferay.portlet.RenderRequestImpl;
import com.liferay.portlet.RenderResponseImpl;
import com.liferay.portlet.admin.ejb.AdminConfigManagerUtil;
import com.liferay.portlet.admin.model.EmailConfig;
import com.liferay.portlet.admin.model.JournalConfig;
import com.liferay.portlet.admin.model.ShoppingConfig;
import com.liferay.portlet.admin.model.UserConfig;
import com.liferay.util.BrowserSniffer;
import com.liferay.util.CollectionFactory;
import com.liferay.util.CookieUtil;
import com.liferay.util.CreditCard;
import com.liferay.util.FileUtil;
import com.liferay.util.Html;
import com.liferay.util.Http;
import com.liferay.util.JS;
import com.liferay.util.KeyValuePair;
import com.liferay.util.KeyValuePairComparator;
import com.liferay.util.MathUtil;
import com.liferay.util.ObjectValuePair;
import com.liferay.util.OrderedProperties;
import com.liferay.util.ParamUtil;
import com.liferay.util.PhoneNumber;
import com.liferay.util.PropertiesUtil;
import com.liferay.util.ServerDetector;
import com.liferay.util.SimpleCachePool;
import com.liferay.util.SortedProperties;
import com.liferay.util.State;
import com.liferay.util.StateUtil;
import com.liferay.util.StringComparator;
import com.liferay.util.StringPool;
import com.liferay.util.TextFormatter;
import com.liferay.util.Time;
import com.liferay.util.UnicodeFormatter;
import com.liferay.util.Validator;
import com.liferay.util.Xss;
import com.liferay.util.cal.CalendarUtil;
import com.liferay.util.cal.Recurrence;
import com.liferay.util.lang.BooleanWrapper;
import com.liferay.util.lang.IntegerWrapper;
import com.liferay.util.log4j.Levels;
import com.liferay.util.servlet.DynamicServletRequest;
import com.liferay.util.servlet.SessionParameters;
import com.liferay.util.servlet.StringServletResponse;
import com.liferay.util.servlet.UploadException;
import java.io.ByteArrayInputStream;
import java.io.StringReader;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Currency;
import java.util.Date;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import com.dotcms.repackage.javax.portlet.PortletConfig;
import com.dotcms.repackage.javax.portlet.PortletContext;
import com.dotcms.repackage.javax.portlet.PortletException;
import com.dotcms.repackage.javax.portlet.PortletMode;
import com.dotcms.repackage.javax.portlet.PortletPreferences;
import com.dotcms.repackage.javax.portlet.PortletURL;
import com.dotcms.repackage.javax.portlet.UnavailableException;
import com.dotcms.repackage.javax.portlet.ValidatorException;
import com.dotcms.repackage.javax.portlet.WindowState;
import com.dotmarketing.portlets.common.bean.CrumbTrailEntry;
import java.util.HashMap;
import com.liferay.portal.language.LanguageUtil;
import com.liferay.portal.language.LanguageWrapper;
import com.liferay.portal.language.UnicodeLanguageUtil;
import com.liferay.portal.util.PropsUtil;
import com.liferay.portal.util.WebKeys;
import com.liferay.util.GetterUtil;
import com.liferay.util.StringUtil;
import com.liferay.util.servlet.SessionErrors;
import com.liferay.util.servlet.SessionMessages;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.dotcms.publisher.environment.bean.Environment;
import com.dotcms.publisher.bundle.bean.Bundle;
import com.dotmarketing.util.Config;
import com.dotmarketing.util.CompanyUtils;
import com.dotcms.publisher.environment.bean.Environment;
import java.util.List;
import com.dotmarketing.util.UtilMethods;
import com.liferay.portal.util.WebKeys;
import com.dotmarketing.business.Layout;
import com.dotmarketing.beans.Host;
import java.util.List;
import com.dotmarketing.util.UtilMethods;
import com.dotmarketing.business.PermissionAPI;
import com.dotmarketing.business.APILocator;
import com.dotmarketing.portlets.contentlet.business.HostAPI;
import com.liferay.portal.model.User;
import com.liferay.portal.language.LanguageUtil;
import com.dotmarketing.business.UserAPI;
import com.dotmarketing.business.web.HostWebAPI;
import com.dotmarketing.business.web.WebAPILocator;
import com.dotmarketing.util.Config;
import com.dotmarketing.util.URLUtils;
import com.dotmarketing.util.URLUtils.ParsedURL;
import com.liferay.util.ParamUtil;
import com.dotmarketing.portlets.common.bean.CrumbTrailEntry;
import java.util.ArrayList;
import com.dotmarketing.util.Config;
import com.dotmarketing.business.PermissionAPI;
import com.dotmarketing.beans.Host;
import com.dotmarketing.portlets.folders.model.Folder;
import com.dotmarketing.portlets.containers.model.Container;
import com.dotmarketing.portlets.templates.model.Template;
import com.dotmarketing.portlets.links.model.Link;
import com.dotmarketing.portlets.contentlet.model.Contentlet;
import com.liferay.portal.language.LanguageUtil;
import com.dotmarketing.util.UtilMethods;
import com.dotmarketing.portlets.structure.model.Structure;
import com.dotmarketing.portlets.htmlpageasset.model.IHTMLPage;
import com.dotmarketing.portlets.rules.model.Rule;
import com.dotmarketing.portlets.templates.design.bean.TemplateLayout;

public final class view_005fcategories_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(9);
    _jspx_dependants.put("/html/portlet/ext/common/edit_permissions_tab_inc_ajax.jsp", Long.valueOf(1570476693000L));
    _jspx_dependants.put("/html/portlet/ext/common/edit_permissions_tab_js_inc_ajax.jsp", Long.valueOf(1570476693000L));
    _jspx_dependants.put("/html/portlet/ext/common/sub_nav_inc.jsp", Long.valueOf(1570476693000L));
    _jspx_dependants.put("/WEB-INF/tld/struts-html.tld", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/html/portlet/ext/remotepublish/init.jsp", Long.valueOf(1570476693000L));
    _jspx_dependants.put("/html/common/init.jsp", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/html/portlet/ext/categories/init.jsp", Long.valueOf(1570476693000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-portlet.tld", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-util.tld", Long.valueOf(1570476689000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.liferay.portal.model");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.liferay.portal.util.ImageKey");
    _jspx_imports_classes.add("com.liferay.util.cal.Recurrence");
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("com.liferay.util.KeyValuePair");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.liferay.portal.ejb.AddressManagerUtil");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.ValidatorException");
    _jspx_imports_classes.add("com.dotmarketing.util.URLUtils");
    _jspx_imports_classes.add("com.dotmarketing.util.Config");
    _jspx_imports_classes.add("com.dotmarketing.util.InodeUtils");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.EmailConfig");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletURL");
    _jspx_imports_classes.add("com.liferay.portal.ejb.CompanyLocalManagerUtil");
    _jspx_imports_classes.add("com.dotmarketing.portlets.structure.model.Structure");
    _jspx_imports_classes.add("com.dotmarketing.portlets.common.bean.CrumbTrailEntry");
    _jspx_imports_classes.add("com.dotmarketing.business.Layout");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.UnavailableException");
    _jspx_imports_classes.add("com.liferay.portal.ejb.PortletManagerUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.Resolution");
    _jspx_imports_classes.add("com.liferay.portal.util.PropsUtil");
    _jspx_imports_classes.add("com.liferay.util.State");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("com.liferay.portal.model.User");
    _jspx_imports_classes.add("com.dotmarketing.portlets.htmlpageasset.model.IHTMLPage");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletConfig");
    _jspx_imports_classes.add("com.liferay.util.Validator");
    _jspx_imports_classes.add("java.util.GregorianCalendar");
    _jspx_imports_classes.add("com.dotmarketing.portlets.categories.business.CategoryAPI");
    _jspx_imports_classes.add("com.liferay.util.PhoneNumber");
    _jspx_imports_classes.add("com.liferay.util.BrowserSniffer");
    _jspx_imports_classes.add("com.liferay.util.JS");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("com.liferay.util.servlet.UploadException");
    _jspx_imports_classes.add("com.liferay.portal.language.UnicodeLanguageUtil");
    _jspx_imports_classes.add("com.dotmarketing.portlets.categories.model.Category");
    _jspx_imports_classes.add("com.liferay.util.Xss");
    _jspx_imports_classes.add("com.liferay.util.cal.CalendarUtil");
    _jspx_imports_classes.add("com.liferay.portlet.PortletURLImpl");
    _jspx_imports_classes.add("com.liferay.util.SortedProperties");
    _jspx_imports_classes.add("com.liferay.util.GetterUtil");
    _jspx_imports_classes.add("com.dotcms.enterprise.license.LicenseLevel");
    _jspx_imports_classes.add("org.apache.commons.logging.LogFactory");
    _jspx_imports_classes.add("com.dotmarketing.business.web.HostWebAPI");
    _jspx_imports_classes.add("com.liferay.util.ParamUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.PortletKeys");
    _jspx_imports_classes.add("com.liferay.portal.NoSuchUserException");
    _jspx_imports_classes.add("com.liferay.util.log4j.Levels");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.JournalConfig");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletException");
    _jspx_imports_classes.add("com.liferay.portal.auth.PrincipalException");
    _jspx_imports_classes.add("java.util.Currency");
    _jspx_imports_classes.add("java.text.NumberFormat");
    _jspx_imports_classes.add("java.util.TreeSet");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("com.dotcms.publisher.endpoint.business.PublishingEndPointAPI");
    _jspx_imports_classes.add("java.util.LinkedHashMap");
    _jspx_imports_classes.add("com.liferay.portlet.RenderRequestImpl");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.dotcms.enterprise.LicenseUtil");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionErrors");
    _jspx_imports_classes.add("com.dotmarketing.business.PermissionAPI");
    _jspx_imports_classes.add("com.dotmarketing.portlets.rules.model.Rule");
    _jspx_imports_classes.add("com.liferay.util.MathUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.OmniadminUtil");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.ShoppingConfig");
    _jspx_imports_classes.add("com.liferay.portlet.RenderParametersPool");
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("com.dotcms.publisher.bundle.bean.Bundle");
    _jspx_imports_classes.add("com.liferay.portal.util.Constants");
    _jspx_imports_classes.add("com.liferay.portal.util.Recipient");
    _jspx_imports_classes.add("com.dotmarketing.portlets.links.model.Link");
    _jspx_imports_classes.add("com.dotcms.publisher.endpoint.bean.PublishingEndPoint");
    _jspx_imports_classes.add("com.liferay.util.OrderedProperties");
    _jspx_imports_classes.add("com.liferay.portal.ejb.UserLocalManagerUtil");
    _jspx_imports_classes.add("java.io.StringReader");
    _jspx_imports_classes.add("java.util.TreeMap");
    _jspx_imports_classes.add("com.dotmarketing.portlets.templates.model.Template");
    _jspx_imports_classes.add("com.liferay.util.servlet.DynamicServletRequest");
    _jspx_imports_classes.add("com.dotmarketing.util.UtilMethods");
    _jspx_imports_classes.add("com.liferay.util.Http");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.UserConfig");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.util.Random");
    _jspx_imports_classes.add("com.liferay.portal.util.WebKeys");
    _jspx_imports_classes.add("com.liferay.util.CollectionFactory");
    _jspx_imports_classes.add("com.liferay.portal.util.ShutdownUtil");
    _jspx_imports_classes.add("com.liferay.portal.ejb.PortletPreferencesManagerUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.PortalUtil");
    _jspx_imports_classes.add("com.dotmarketing.util.CompanyUtils");
    _jspx_imports_classes.add("com.dotmarketing.portlets.containers.model.Container");
    _jspx_imports_classes.add("com.liferay.util.StringPool");
    _jspx_imports_classes.add("java.io.ByteArrayInputStream");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("com.dotmarketing.portlets.contentlet.model.Contentlet");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionParameters");
    _jspx_imports_classes.add("com.liferay.portlet.RenderResponseImpl");
    _jspx_imports_classes.add("java.text.DateFormat");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletPreferences");
    _jspx_imports_classes.add("com.liferay.util.StringComparator");
    _jspx_imports_classes.add("com.liferay.portlet.ConcretePortletWrapper");
    _jspx_imports_classes.add("com.dotmarketing.business.web.WebAPILocator");
    _jspx_imports_classes.add("java.util.TimeZone");
    _jspx_imports_classes.add("java.util.Collection");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.WindowState");
    _jspx_imports_classes.add("com.dotmarketing.beans.Host");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionMessages");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.liferay.util.SimpleCachePool");
    _jspx_imports_classes.add("com.liferay.portlet.LiferayWindowState");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletContext");
    _jspx_imports_classes.add("com.liferay.util.CookieUtil");
    _jspx_imports_classes.add("com.dotmarketing.business.UserAPI");
    _jspx_imports_classes.add("com.liferay.portal.util.ReleaseInfo");
    _jspx_imports_classes.add("com.liferay.util.Time");
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageUtil");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("com.liferay.util.servlet.StringServletResponse");
    _jspx_imports_classes.add("com.dotmarketing.business.APILocator");
    _jspx_imports_classes.add("com.dotcms.publisher.environment.bean.Environment");
    _jspx_imports_classes.add("java.util.Stack");
    _jspx_imports_classes.add("java.text.MessageFormat");
    _jspx_imports_classes.add("java.util.HashSet");
    _jspx_imports_classes.add("com.liferay.util.StringUtil");
    _jspx_imports_classes.add("com.liferay.util.PropertiesUtil");
    _jspx_imports_classes.add("com.liferay.util.CreditCard");
    _jspx_imports_classes.add("com.liferay.util.UnicodeFormatter");
    _jspx_imports_classes.add("com.liferay.util.lang.IntegerWrapper");
    _jspx_imports_classes.add("com.dotmarketing.util.URLUtils.ParsedURL");
    _jspx_imports_classes.add("com.liferay.util.ServerDetector");
    _jspx_imports_classes.add("com.liferay.portlet.admin.ejb.AdminConfigManagerUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.RecipientComparator");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.text.DecimalFormat");
    _jspx_imports_classes.add("com.liferay.portal.util.WebAppPool");
    _jspx_imports_classes.add("com.dotmarketing.portlets.contentlet.business.HostAPI");
    _jspx_imports_classes.add("com.liferay.util.Html");
    _jspx_imports_classes.add("com.liferay.util.FileUtil");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletMode");
    _jspx_imports_classes.add("com.liferay.portal.util.CookieKeys");
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageWrapper");
    _jspx_imports_classes.add("com.dotmarketing.portlets.templates.design.bean.TemplateLayout");
    _jspx_imports_classes.add("com.liferay.util.TextFormatter");
    _jspx_imports_classes.add("com.liferay.util.StateUtil");
    _jspx_imports_classes.add("com.liferay.util.lang.BooleanWrapper");
    _jspx_imports_classes.add("com.liferay.util.KeyValuePairComparator");
    _jspx_imports_classes.add("org.apache.commons.logging.Log");
    _jspx_imports_classes.add("java.util.Collections");
    _jspx_imports_classes.add("com.liferay.util.ObjectValuePair");
    _jspx_imports_classes.add("com.dotmarketing.portlets.folders.model.Folder");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fportlet_005fdefineObjects_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fliferay_005fbox_0026_005ftop_005fbottom;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fliferay_005fparam_0026_005fvalue_005fname_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fportlet_005fdefineObjects_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fliferay_005fbox_0026_005ftop_005fbottom = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fliferay_005fparam_0026_005fvalue_005fname_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fportlet_005fdefineObjects_005fnobody.release();
    _005fjspx_005ftagPool_005fliferay_005fbox_0026_005ftop_005fbottom.release();
    _005fjspx_005ftagPool_005fliferay_005fparam_0026_005fvalue_005fname_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/html/common/auth_backend_check.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	String CTX_PATH = (String) application
			.getAttribute(WebKeys.CTX_PATH);
	String CAPTCHA_PATH = (String) application
			.getAttribute(WebKeys.CAPTCHA_PATH);
	String IMAGE_PATH = (String) application
			.getAttribute(WebKeys.IMAGE_PATH);

	String contextPath = PropsUtil.get(PropsUtil.PORTAL_CTX);
	if (contextPath.equals("/")) {
		contextPath = "";
	}

	String COMMON_IMG = null;

	Company company = PortalUtil.getCompany(request);

	User user = PortalUtil.getUser(request);

	boolean signedIn = false;

	if (user == null) {
		user = company.getDefaultUser();
	} else {
		signedIn = true;
	}

	Locale locale = (Locale) session
			.getAttribute(com.dotcms.repackage.org.apache.struts.Globals.LOCALE_KEY);
	if (locale == null) {

		// Locale should never be null except when the TCK tests invalidate the session

		locale = user.getLocale();
	}
	if(UtilMethods.isSet(request.getParameter("switchLocale"))){
		Locale[] locales = LanguageUtil.getAvailableLocales();
		for (int i = 0; i < locales.length; i++) { 
			String test = locales[i].getLanguage() + "_" + locales[i].getCountry();
			if(test.equals(request.getParameter("switchLocale"))){
				locale = locales[i];
				session.setAttribute(com.dotcms.repackage.org.apache.struts.Globals.LOCALE_KEY, locale);
				break;
			}
		}
		
	}else{//DOTCMS-5013
		session.setAttribute(com.dotcms.repackage.org.apache.struts.Globals.LOCALE_KEY, locale);
	}

	TimeZone timeZone = user.getTimeZone();
	if (timeZone == null) {
		timeZone = company.getTimeZone();
	}

	Layout layout = (Layout) request.getAttribute(WebKeys.LAYOUT);
	Layout[] layouts = (Layout[]) request.getAttribute(WebKeys.LAYOUTS);

	String layoutId = null;
	if (layout != null) {
		layoutId = layout.getId();
	}

	//String portletGroupId = PortalUtil.getPortletGroupId(layoutId);

	int RES_NARROW = 0;
	int RES_TOTAL = 0;
	int RES_WIDE = 0;


//	Skin skin = user.getSkin();

	String SKIN_CSS_IMG = null;


	String SKIN_COMMON_IMG =null;
	String SKIN_IMG =null;

      out.write('\n');
      out.write('\n');

	try {
		String hostId = (String) session.getAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID);

		com.dotmarketing.business.web.HostWebAPI hostApi = com.dotmarketing.business.web.WebAPILocator.getHostWebAPI();
		com.dotmarketing.beans.Host currentHost = hostApi.find(hostId, user, false);
		if (currentHost.isArchived()) {
			List<com.dotmarketing.beans.Host> hosts = hostApi.findAll(user, false);
			for (com.dotmarketing.beans.Host host : hosts) {
				if (!host.isSystemHost() && !host.isArchived()) {
					session.setAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID, host
							.getIdentifier());
					break;
				}
			}
		}
	} catch (Exception e) {

	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Company c = CompanyUtils.getDefaultCompany();
	boolean authByEmail = false;
	if(c.getAuthType().equals(Company.AUTH_TYPE_EA)) {
		authByEmail = true;
	}

      out.write('\n');
      //  portlet:defineObjects
      com.dotcms.repackage.com.liferay.portlet.taglib.DefineObjectsTag _jspx_th_portlet_005fdefineObjects_005f0 = (com.dotcms.repackage.com.liferay.portlet.taglib.DefineObjectsTag) _005fjspx_005ftagPool_005fportlet_005fdefineObjects_005fnobody.get(com.dotcms.repackage.com.liferay.portlet.taglib.DefineObjectsTag.class);
      boolean _jspx_th_portlet_005fdefineObjects_005f0_reused = false;
      try {
        _jspx_th_portlet_005fdefineObjects_005f0.setPageContext(_jspx_page_context);
        _jspx_th_portlet_005fdefineObjects_005f0.setParent(null);
        int _jspx_eval_portlet_005fdefineObjects_005f0 = _jspx_th_portlet_005fdefineObjects_005f0.doStartTag();
        if (_jspx_th_portlet_005fdefineObjects_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005fportlet_005fdefineObjects_005fnobody.reuse(_jspx_th_portlet_005fdefineObjects_005f0);
        _jspx_th_portlet_005fdefineObjects_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_portlet_005fdefineObjects_005f0, _jsp_getInstanceManager(), _jspx_th_portlet_005fdefineObjects_005f0_reused);
      }
      com.dotcms.repackage.javax.portlet.PortletConfig portletConfig = null;
      com.dotcms.repackage.javax.portlet.RenderRequest renderRequest = null;
      com.dotcms.repackage.javax.portlet.RenderResponse renderResponse = null;
      portletConfig = (com.dotcms.repackage.javax.portlet.PortletConfig) _jspx_page_context.findAttribute("portletConfig");
      renderRequest = (com.dotcms.repackage.javax.portlet.RenderRequest) _jspx_page_context.findAttribute("renderRequest");
      renderResponse = (com.dotcms.repackage.javax.portlet.RenderResponse) _jspx_page_context.findAttribute("renderResponse");
      out.write('\n');
      out.write('\n');
      out.write('\n');
      out.write('\n');

    //Verify if we have set environments on session
    String selectedEnvKey = com.dotmarketing.util.WebKeys.SELECTED_ENVIRONMENTS + request.getSession().getAttribute("USER_ID");
	String selectedBundleKey = com.dotmarketing.util.WebKeys.SELECTED_BUNDLE + request.getSession().getAttribute("USER_ID");

    List<Environment> lastSelectedEnvironments = null;
    if ( request.getSession().getAttribute(selectedEnvKey) != null ) {
        lastSelectedEnvironments = (List<Environment>) request.getSession().getAttribute(selectedEnvKey);
    }

    //Verify if we have set a bundle on session
    com.dotcms.publisher.bundle.bean.Bundle lastSelectedBundle = null;
    if ( request.getSession().getAttribute( selectedBundleKey ) != null ) {
        lastSelectedBundle = (com.dotcms.publisher.bundle.bean.Bundle) request.getSession().getAttribute( selectedBundleKey );
    }

      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("    var lastSelectedEnvironments = [];\n");
      out.write("    ");
if (lastSelectedEnvironments != null) {

        int i = 0;
        for (Environment environment: lastSelectedEnvironments) {
            String id = environment.getId();
            String name = environment.getName();
    
      out.write("\n");
      out.write("\n");
      out.write("            var entry = {name:'");
      out.print(name);
      out.write("',id:'");
      out.print(id);
      out.write("'};\n");
      out.write("            lastSelectedEnvironments[");
      out.print(i++);
      out.write("] = entry;\n");
      out.write("    ");
}
      out.write("\n");
      out.write("\n");
      out.write("    ");
}
      out.write("\n");
      out.write("\n");
      out.write("    var lastSelectedBundle = {};\n");
      out.write("    ");
if (lastSelectedBundle != null) {

        String id = lastSelectedBundle.getId();
        String name = lastSelectedBundle.getName();
      out.write("\n");
      out.write("\n");
      out.write("        lastSelectedBundle = {name: '");
      out.print(UtilMethods.escapeSingleQuotes(name));
      out.write("', id: '");
      out.print(id);
      out.write("'};\n");
      out.write("    ");
}
      out.write("\n");
      out.write("\n");
      out.write("    sessionStorage.setItem(\"lastSelectedEnvironments\",JSON.stringify(lastSelectedEnvironments));\n");
      out.write("    sessionStorage.setItem(\"lastSelectedBundle\",JSON.stringify(lastSelectedBundle));\n");
      out.write("\n");
      out.write("</script>");
      out.write('\n');
      out.write('\n');

	boolean enterprise = LicenseUtil.getLevel() >= LicenseLevel.STANDARD.level;

	PublishingEndPointAPI pepAPI = APILocator.getPublisherEndPointAPI();
	List<PublishingEndPoint> sendingEndpointsList = pepAPI.getReceivingEndPoints();
	boolean sendingEndpoints = UtilMethods.isSet(sendingEndpointsList) && !sendingEndpointsList.isEmpty();

      out.write('\n');
      out.write('\n');
  String dojoPath = Config.getStringProperty("path.to.dojo"); 
      out.write("\n");
      out.write("\n");
      out.write("<style type=\"text/css\">\n");
      out.write("\t@import \"");
      out.print(dojoPath);
      out.write("/dojox/grid/enhanced/resources/claro/EnhancedGrid.css?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\";\n");
      out.write("\tdiv.fakefile {\n");
      out.write("\t\tposition: absolute;\n");
      out.write("\t\ttext-align: left;\n");
      out.write("\t\tz-index: 1;\n");
      out.write("\t\tmargin-left: 20px;\n");
      out.write("\t\twidth: 9px;\n");
      out.write("\t\tmargin-top: -22px;\n");
      out.write("\t\t-moz-opacity: 0;\n");
      out.write("\t\tright: 80px;\n");
      out.write("\t\ttop: 77%;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("\t.fakefile input.upload {\n");
      out.write("\t\tposition: absolute;\n");
      out.write("\t\ttop: 0;\n");
      out.write("\t\tright: 5px;\n");
      out.write("\t\tleft: 1px;\n");
      out.write("\t\tpadding: 0;\n");
      out.write("\t\tfont-size: 15px;\n");
      out.write("\t\tcursor: pointer;\n");
      out.write("\t\twidth: 90px;\n");
      out.write("\t\tfilter: alpha(opacity: 0);\n");
      out.write("\t\topacity: 0;\n");
      out.write("\t\t-moz-opacity: 0;\n");
      out.write("\t\tz-index:4;\n");
      out.write("\t}\n");
      out.write("\n");
      out.write("    #ulNav #selectHostDiv + li {\n");
      out.write("        display: none;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("</style>\n");
      out.write("<script type=\"text/javascript\" src=\"/dwr/interface/CategoryAjax.js\"></script>\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    dojo.require(\"dojox.grid.enhanced.plugins.Pagination\");\n");
      out.write("    dojo.require(\"dojox.grid.enhanced.plugins.Search\");\n");
      out.write("    dojo.require(\"dojox.data.QueryReadStore\");\n");
      out.write("    dojo.require(\"dojox.grid.enhanced.plugins.IndirectSelection\");\n");
      out.write("    dojo.require(\"dojo.io.iframe\");\n");
      out.write("    dojo.require('dijit.layout.AccordionContainer');\n");
      out.write("    dojo.require('dijit.layout.ContentPane');\n");
      out.write("    dojo.require('dotcms.dijit.form.RolesFilteringSelect');\n");
      out.write("    dojo.require('dotcms.dojo.data.UsersReadStore');\n");
      out.write("    dojo.require(\"dojox.timing._base\");\n");
      out.write("    dojo.require(\"dojo.hash\");\n");
      out.write("    dojo.require(\"dotcms.dojo.push.PushHandler\");\n");
      out.write("    dojo.require(\"dijit.form.ValidationTextBox\");\n");
      out.write("    dojo.require(\"dojo.parser\");\n");
      out.write("\n");
      out.write("\n");
      out.write("    var pushHandler = new dotcms.dojo.push.PushHandler('");
      out.print(LanguageUtil.get(pageContext, "Remote-Syncronization"));
      out.write("');\n");
      out.write("\n");
      out.write("    dojo.connect(dojo.global, \"onhashchange\", refresh);\n");
      out.write("\n");
      out.write("    var backOrForward = false;\n");
      out.write("    var actions = \"\";\n");
      out.write("\n");
      out.write("    function refresh() {\n");
      out.write("        var hashReceived = decodeURIComponent(dojo.hash());\n");
      out.write("        var inode = \"0\";\n");
      out.write("        var name = \"");
      out.print( LanguageUtil.get(pageContext, "Top-Level") );
      out.write("\";\n");
      out.write("        var hashToSend = null;\n");
      out.write("\n");
      out.write("        if(typeof hashReceived != \"undefined\" && hashReceived != '') {\n");
      out.write("            var query = hashReceived.substring(hashReceived.indexOf(\"?\") + 1, hashReceived.length);\n");
      out.write("            var queryObject = dojo.queryToObject(query);\n");
      out.write("            if (queryObject.name != 'undefined') {\n");
      out.write("                inode = queryObject.inode == '' ? 0 : queryObject.inode;\n");
      out.write("                name = queryObject.name;\n");
      out.write("            }\n");
      out.write("            hashToSend = hashReceived;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        if (actions == \"\") {\n");
      out.write("            // browser back or forward pressed\n");
      out.write("\t\t\tbackOrForward = true;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        buildCrumbs(inode, name);\n");
      out.write("\t\tdoSearchHash(hashToSend);\n");
      out.write("\t\trefreshCrumbs();\n");
      out.write("\n");
      out.write("        actions = \"\";\n");
      out.write("        backOrForward = false;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    var grid;\n");
      out.write("    var myStore;\n");
      out.write("    var currentInodeOrIdentifier;  // inode of the category\n");
      out.write("    var currentCatName;  // inode of the category\n");
      out.write("    var lastTabSelected;\n");
      out.write("    var parentCats = new Array();\n");
      out.write("\n");
      out.write("\n");
      out.write("    // format the name column of the grid to be an <a> element\n");
      out.write("    var formatHref = function(value, index) {\n");
      out.write("        return \"<a href=\\\"javascript:drillDown(\"+index+\")\\\" >\"+value+\"</a>\";\n");
      out.write("    };\n");
      out.write("\n");
      out.write("    var sortCat = function() {\n");
      out.write("        CategoryAjax.sortCategory(this.name, this.value);\n");
      out.write("    };\n");
      out.write("\n");
      out.write("    var sortSelectable = function() {\n");
      out.write("        var toSel = document.activeElement;\n");
      out.write("        document.getElementById(toSel.id).setAttribute(\"unselectable\", \"off\");\n");
      out.write("    };\n");
      out.write("\n");
      out.write("\n");
      out.write("    var fixFocus = function() {\n");
      out.write("        var toBlur = document.activeElement;\n");
      out.write("        if(toBlur.id!=\"addCatName\" &&\n");
      out.write("            toBlur.id!=\"addCatKey\" &&\n");
      out.write("            toBlur.id!=\"addCatKeywords\" &&\n");
      out.write("            toBlur.id.indexOf(\"dijit_form_ValidationTextBox\")) {\n");
      out.write("            toBlur.blur();\n");
      out.write("            this.focus();\n");
      out.write("        }\n");
      out.write("    };\n");
      out.write("\n");
      out.write("    // format the sort column of the grid to be a NumberTextBox\n");
      out.write("    var sortFormatter = function(value, index) {\n");
      out.write("        var inode = grid.store.getValue(grid.getItem(index), 'inode');\n");
      out.write("        var sort_order = grid.store.getValue(grid.getItem(index), 'sort_order');\n");
      out.write("\n");
      out.write("        return new dijit.form.ValidationTextBox({\n");
      out.write("            style : \"width: 80%; margin: 0 10%\",\n");
      out.write("            value : sort_order,\n");
      out.write("            name: inode,\n");
      out.write("            maxLength: 15,\n");
      out.write("            regExpGen:function(){ return \"\\\\d+\" },\n");
      out.write("            invalidMessage:\"Please enter numbers only\",\n");
      out.write("            type : \"text\",\n");
      out.write("            onChange : sortCat,\n");
      out.write("            onClick : sortSelectable,\n");
      out.write("            onBlur: fixFocus\n");
      out.write("        });\n");
      out.write("\n");
      out.write("    };\n");
      out.write("\n");
      out.write("    function createStore(params) {\n");
      out.write("        if (params == null) params = '';\n");
      out.write("\n");
      out.write("        myStore = new dojox.data.QueryReadStore({\n");
      out.write("            url: '/categoriesServlet' + params\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function convertStringToUnicode(name) {\n");
      out.write("        var unicodeString = '';\n");
      out.write("        for (var i = 0; i < name.length; i++) {\n");
      out.write("            if (name.charCodeAt(i) > 128) {\n");
      out.write("                var str = name.charCodeAt(i).toString(16).toUpperCase();\n");
      out.write("                while (str.length < 4)\n");
      out.write("                    str = \"0\" + str;\n");
      out.write("                unicodeString += \"\\\\u\" + str;\n");
      out.write("            } else {\n");
      out.write("                unicodeString += name[i];\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        return unicodeString;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function createGrid() {\n");
      out.write("        var layout = [\n");
      out.write("            {\n");
      out.write("                field : 'category_name',\n");
      out.write("                name : '");
      out.print( LanguageUtil.get(pageContext, "Name") );
      out.write("',\n");
      out.write("                width : '60%',\n");
      out.write("                formatter : formatHref\n");
      out.write("            }, {\n");
      out.write("                field : 'category_key',\n");
      out.write("                name : '");
      out.print( LanguageUtil.get(pageContext, "Key") );
      out.write("',\n");
      out.write("                width : '15%'\n");
      out.write("            }, {\n");
      out.write("                field : 'category_velocity_var_name',\n");
      out.write("                name : '");
      out.print( LanguageUtil.get(pageContext, "Variable") );
      out.write("',\n");
      out.write("                width : '15%'\n");
      out.write("            }, {\n");
      out.write("                field : 'sort_order',\n");
      out.write("                name : '");
      out.print( LanguageUtil.get(pageContext, "Sort-Order") );
      out.write("',\n");
      out.write("                width : '6%',\n");
      out.write("                formatter : sortFormatter\n");
      out.write("            }  ];\n");
      out.write("\n");
      out.write("        grid = new dojox.grid.EnhancedGrid({\n");
      out.write("            rowsPerPage : 25,\n");
      out.write("            jsId : \"grid\",\n");
      out.write("            store : myStore,\n");
      out.write("            autoWidth : true,\n");
      out.write("            initialWidth : '100%',\n");
      out.write("            autoHeight : true,\n");
      out.write("            escapeHTMLInData : false,\n");
      out.write("            structure : layout,\n");
      out.write("            plugins : {\n");
      out.write("                pagination : {\n");
      out.write("                    pageSizes : [ \"25\", \"50\", \"100\", \"All\" ],\n");
      out.write("                    description : \"45%\",\n");
      out.write("                    sizeSwitch : \"260px\",\n");
      out.write("                    pageStepper : \"30em\",\n");
      out.write("                    gotoButton : true,\n");
      out.write("                    maxPageStep : 7,\n");
      out.write("                    position : \"bottom\"\n");
      out.write("                },\n");
      out.write("                search : true,\n");
      out.write("                indirectSelection: { headerSelector: true }\n");
      out.write("            }\n");
      out.write("        }, dojo.byId('catHolder'));\n");
      out.write("\n");
      out.write("        dojo.query(\"#catHolder\").addClass('view-categories__categories-list');\n");
      out.write("    }\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("    dojo.addOnLoad(function() {\n");
      out.write("\n");
      out.write("        refreshCrumbs();\n");
      out.write("\n");
      out.write("        // ajax loading of permissions tab when clicked\n");
      out.write("        var mainTabContainer = dijit.byId('mainTabContainer');\n");
      out.write("        dojo.connect(mainTabContainer, 'selectChild',\n");
      out.write("            function (evt) {\n");
      out.write("                selectedTab = mainTabContainer.selectedChildWidget;\n");
      out.write("                if (selectedTab.id == 'TabThree') {\n");
      out.write("                    initPermission();\n");
      out.write("                }\n");
      out.write("            });\n");
      out.write("\n");
      out.write("        createStore();\n");
      out.write("        createGrid();\n");
      out.write("        grid.startup();\n");
      out.write("\n");
      out.write("        dojo.connect(dijit.byId(\"add_category_dialog\"), \"hide\", function (evt) {\n");
      out.write("            dojo.byId(\"savedMessage\").innerHTML = \"\";\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        dojo.connect(dijit.byId(\"catHolder_rowSelector_-1\"), \"onclick\", function (evt) {\n");
      out.write("            var selectedItems = grid.selection.getSelected();\n");
      out.write("            var perPage = grid.rowsPerPage;\n");
      out.write("            var totalCats = grid.store._numRows;\n");
      out.write("\n");
      out.write("            if(selectedItems.length>1) {\n");
      out.write("\n");
      out.write("                var html = '' +\n");
      out.write("                    '   ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "all")) );
      out.write(" ' + selectedItems.length + ' ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "categories-on-this-page-are-selected")) );
      out.write("';\n");
      out.write("                if (perPage < totalCats) {\n");
      out.write("                    html += ' <a href=\"javascript: selectAllCategories()\" style=\"text-decoration: underline;\"> ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Select-all" )) );
      out.write(" ' + totalCats + ' ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "category-s" )) );
      out.write(".</a>';\n");
      out.write("                }\n");
      out.write("                dojo.byId(\"warningDiv\").innerHTML = html;\n");
      out.write("            } else if(selectedItems.length==1){\n");
      out.write("                dojo.byId(\"warningDiv\").innerHTML = '';\n");
      out.write("            } else {\n");
      out.write("                dojo.byId(\"warningDiv\").innerHTML = '';\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    function selectAllCategories() {\n");
      out.write("        var totalCats = grid.store._numRows;\n");
      out.write("        var html = '' +\n");
      out.write("            '   ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "all" )) );
      out.write(" ' + totalCats + ' ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "categories-on-this-page-are-selected" )) );
      out.write("' +\n");
      out.write("            '   <a href=\"javascript: clearAllCategoriesSelection()\">");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Clear-Selection" )) );
      out.write(".</a>' +\n");
      out.write("            '';\n");
      out.write("        dojo.byId(\"warningDiv\").innerHTML = html;\n");
      out.write("        document.getElementById(\"fullCommand\").value = \"true\";\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function clearAllCategoriesSelection() {\n");
      out.write("        grid.selection.clear();\n");
      out.write("        dojo.byId(\"warningDiv\").innerHTML = '';\n");
      out.write("        document.getElementById(\"fullCommand\").value = \"false\";\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // search handling\n");
      out.write("    function doSearch(reorder, importing) {\n");
      out.write("        var params = dojo.byId(\"catFilter\").value.trim();\n");
      out.write("        params = \"?donothing&inode=\"+currentInodeOrIdentifier+\"&name=\"+encodeURIComponent(currentCatName)+\"&q=\"+encodeURIComponent(params);\n");
      out.write("        if(reorder) {\n");
      out.write("            params = params + \"&reorder=true\";\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        grid.destroy(true);\n");
      out.write("        createStore(params);\n");
      out.write("        createGrid();\n");
      out.write("        grid.startup();\n");
      out.write("\n");
      out.write("        if(!importing) {\n");
      out.write("            dojo.hash(params);\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function doSearchHash(params)  {\n");
      out.write("        grid.destroy(true);\n");
      out.write("        createStore(params);\n");
      out.write("        createGrid();\n");
      out.write("        grid.startup();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function showEditButtonsRow() {\n");
      out.write("        if( typeof changesMadeToPermissions!= \"undefined\"){\n");
      out.write("            if(changesMadeToPermissions == true){\n");
      out.write("                dijit.byId('applyPermissionsChangesDialog').show();\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        dojo.style('editCategoryButtonRow', { display: '' });\n");
      out.write("        changesMadeToPermissions = false;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // clear the search field\n");
      out.write("    function clearCatFilter () {\n");
      out.write("        dijit.byId('catFilter').attr('value', '');\n");
      out.write("        doSearch();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // display addCategory Dialog\n");
      out.write("    function showAddCategory() {\n");
      out.write("        clearAddDialog();\n");
      out.write("        dijit.byId('add_category_dialog').show();\n");
      out.write("        dijit.byId('addCatName').focus();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // display importCategory Dialog\n");
      out.write("    function showImportCategories() {\n");
      out.write("        dijit.byId('importCategoriesOptions').show();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function fillVelocityVarName() {\n");
      out.write("        var relation = dojo.byId(\"addCatName\").value;\n");
      out.write("        var upperCase = false;\n");
      out.write("        var newString = \"\";\n");
      out.write("        for(var i=0;i < relation.length ; i++){\n");
      out.write("            var c = relation.charAt(i);\n");
      out.write("            if(upperCase){\n");
      out.write("                c=c.toUpperCase();\n");
      out.write("            }\n");
      out.write("            else{\n");
      out.write("                c=c.toLowerCase();\n");
      out.write("            }\n");
      out.write("            if(c == ' '){\n");
      out.write("                upperCase = true;\n");
      out.write("            }\n");
      out.write("            else{\n");
      out.write("                upperCase = false;\n");
      out.write("                newString+=c;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        var re = /[^a-zA-Z0-9]+/g;\n");
      out.write("        newString = newString.replace(re, \"\");\n");
      out.write("\n");
      out.write("        dojo.byId(\"addCatVelVarName\").value = newString;\n");
      out.write("\n");
      out.write("        if(newString.length > 0){\n");
      out.write("            document.getElementById(\"VariableIdTitle\").style.display = \"\";\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // replacement for the default js alert dialog\n");
      out.write("    function dialogAlert(txtContent) {\n");
      out.write("        var thisdialog = new dijit.Dialog({ title: \"dotCMS\", content: txtContent });\n");
      out.write("        dojo.body().appendChild(thisdialog.domNode);\n");
      out.write("        thisdialog.startup();\n");
      out.write("        thisdialog.show();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // replacement for the default js confirm dialog\n");
      out.write("    function confirmationDialog(configJson){\n");
      out.write("        var dialog = new dijit.Dialog({title:configJson.title,\n");
      out.write("            content:[\"<div style='width:25em' >\",configJson.message,\"</div>\"].join('')});\n");
      out.write("\n");
      out.write("        dialog.onButtonClickEvent = function(button){\n");
      out.write("            return function(){\n");
      out.write("                button.callBack.apply(this,[]);\n");
      out.write("                dialog.onCancel();\n");
      out.write("            }\n");
      out.write("        };\n");
      out.write("        for(actionButton in configJson.actionButtons){\n");
      out.write("            if(configJson.actionButtons.hasOwnProperty(actionButton)) {\n");
      out.write("                dojo.place(new dijit.form.Button({style: \"position:relative; left:33%; margin:0 4px 10px\",label:configJson.actionButtons[actionButton].label,\n");
      out.write("                    onClick:dialog.onButtonClickEvent.apply(dialog,[configJson.actionButtons[actionButton]])\n");
      out.write("                }).domNode, dialog.containerNode,'after');\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        dialog.startup();\n");
      out.write("        dialog.show();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function confirmDialog(msg, okFunction, cancelFunction) {\n");
      out.write("        confirmationDialog({\n");
      out.write("            title:\"dotCMS\",\n");
      out.write("            message:msg,\n");
      out.write("            actionButtons:[\n");
      out.write("                {label:'No',callBack: cancelFunction},\n");
      out.write("                {label:'Yes',callBack: okFunction}\n");
      out.write("            ]\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function clearAddDialog() {\n");
      out.write("        dojo.byId(\"addCatVelVarName\").value = \"\";\n");
      out.write("        dojo.byId(\"addCatName\").value = \"\";\n");
      out.write("        dojo.byId(\"addCatKey\").value = \"\";\n");
      out.write("        dojo.byId(\"addCatKeywords\").value = \"\";\n");
      out.write("        dojo.byId(\"savedMessage\").innerHTML = \"\";\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    var previousCrumbs = new Array();\n");
      out.write("    var myCrumbs = new Array();\n");
      out.write("\n");
      out.write("    function refreshCrumbs() {\n");
      out.write("        var crumbsArray = new Array();\n");
      out.write("\n");
      out.write("        if (backOrForward) {\n");
      out.write("            crumbsArray = previousCrumbs;\n");
      out.write("        } else {\n");
      out.write("            crumbsArray = myCrumbs;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        if (crumbsArray.length ==0) {\n");
      out.write("            crumbsArray[0] = \"0---------");
      out.print( LanguageUtil.get(pageContext, "Top-Level") );
      out.write("\";\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        //dojo.empty(\"ulNav\");\n");
      out.write("        dojo.forEach(dojo.query(\"#ulNav li\"), function(node, i) {\n");
      out.write("                if(i>1){\n");
      out.write("                    dojo.destroy(node);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        );\n");
      out.write("\n");
      out.write("        for (i = 0; i < crumbsArray.length; i++) {\n");
      out.write("            var inode = crumbsArray[i].split(\"---------\")[0];\n");
      out.write("            var name = crumbsArray[i].split(\"---------\")[1];\n");
      out.write("\n");
      out.write("            if (i + 1 == crumbsArray.length) {\n");
      out.write("                dojo.place(\"<li  style=\\\"cursor:pointer\\\" i class=\\\"lastCrumb\\\" ><b>\"+name+\"</b></li>\", \"ulNav\", \"last\");\n");
      out.write("            }\n");
      out.write("            else{\n");
      out.write("                dojo.place(\"<a id=\\\"a_\"+inode+\"\\\" href=\\\"javascript:rollUp('\"+inode+\"', '\"+name+\"');  \\\"><li  style=\\\"cursor:pointer\\\"  >\"+name+\"</li></a>\", \"ulNav\", \"last\");\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function prepareCrumbs(inode, name) {\n");
      out.write("        buildCrumbs(inode, name);\n");
      out.write("        doSearch();\n");
      out.write("        refreshCrumbs();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function buildCrumbs(inode, name) {\n");
      out.write("        dijit.byId(\"mainTabContainer\").selectChild(dijit.byId(\"TabOne\"));\n");
      out.write("        if(inode ==\"0\"){\n");
      out.write("            currentInodeOrIdentifier=\"\";\n");
      out.write("        }\n");
      out.write("        else{\n");
      out.write("            currentInodeOrIdentifier=inode;\n");
      out.write("        }\n");
      out.write("        currentCatName = name;\n");
      out.write("\n");
      out.write("\t\tvar newCrumbs = new Array();\n");
      out.write("\t\tvar crumbsArray = new Array();\n");
      out.write("\n");
      out.write("\t\tif (backOrForward) {\n");
      out.write("\t\t    crumbsArray = previousCrumbs;\n");
      out.write("\t\t} else {\n");
      out.write("\t\t    crumbsArray = myCrumbs;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("        for (i = 0; i < crumbsArray.length; i++) {\n");
      out.write("            var ix = crumbsArray[i].split(\"---------\")[0];\n");
      out.write("            var nx = crumbsArray[i].split(\"---------\")[1];\n");
      out.write("            if(inode == ix) {\n");
      out.write("                break;\n");
      out.write("            }\n");
      out.write("            newCrumbs[i] = crumbsArray[i];\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        newCrumbs[newCrumbs.length] = inode + \"---------\" + name;\n");
      out.write("        if (backOrForward) {\n");
      out.write("            previousCrumbs = newCrumbs;\n");
      out.write("            myCrumbs = previousCrumbs;\n");
      out.write("\t\t} else {\n");
      out.write("            myCrumbs = newCrumbs;\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("        dijit.byId('catFilter').attr('value', '');\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // drill down of a category, load the children, properties\n");
      out.write("    function drillDown(index) {\n");
      out.write("        previousCrumbs = myCrumbs;\n");
      out.write("        actions = \"breadcrums\";\n");
      out.write("\n");
      out.write("        var inode = grid.store.getValue(grid.getItem(index), 'inode');\n");
      out.write("        var name = grid.store.getValue(grid.getItem(index), 'category_name');\n");
      out.write("        var velVar = grid.store.getValue(grid.getItem(index), 'category_velocity_var_name');\n");
      out.write("        var key = grid.store.getValue(grid.getItem(index), 'category_key');\n");
      out.write("        var keywords = grid.store.getValue(grid.getItem(index), 'keywords');\n");
      out.write("\n");
      out.write("        prepareCrumbs(inode, name);\n");
      out.write("        dojo.byId(\"propertiesNA\").style.display = \"none\";\n");
      out.write("        dojo.byId(\"propertiesDiv\").style.display = \"block\";\n");
      out.write("        dojo.byId(\"permissionNA\").style.display = \"none\";\n");
      out.write("        dojo.byId(\"permissionDiv\").style.display = \"block\";\n");
      out.write("\n");
      out.write("        currentCatName = name;\n");
      out.write("\n");
      out.write("        currentInodeOrIdentifier = inode;\n");
      out.write("        key = key==\"null\"?\"\":key;\n");
      out.write("        keywords = keywords==\"null\"?\"\":keywords;\n");
      out.write("        dojo.byId(\"CatVelVarName\").value = velVar;\n");
      out.write("        dojo.byId(\"CatName\").value = name;\n");
      out.write("        dojo.byId(\"CatKey\").value = key;\n");
      out.write("        dojo.byId(\"CatKeywords\").value = keywords;\n");
      out.write("        dijit.byId('catFilter').attr('value', '');\n");
      out.write("        doSearch();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // roll up of a category, load the children, properties\n");
      out.write("    function rollUp(inode, name) {\n");
      out.write("        previousCrumbs = myCrumbs;\n");
      out.write("        actions = \"breadcrums\";\n");
      out.write("\n");
      out.write("        prepareCrumbs(inode, name);\n");
      out.write("\n");
      out.write("        if(currentInodeOrIdentifier == \"\" || currentInodeOrIdentifier == \"0\"){\n");
      out.write("            dojo.byId(\"propertiesNA\").style.display = \"block\";\n");
      out.write("            dojo.byId(\"propertiesDiv\").style.display = \"none\";\n");
      out.write("            dojo.byId(\"permissionNA\").style.display = \"block\";\n");
      out.write("            dojo.byId(\"permissionDiv\").style.display = \"none\";\n");
      out.write("        }else{\n");
      out.write("            dojo.byId(\"propertiesNA\").style.display = \"none\";\n");
      out.write("            dojo.byId(\"propertiesDiv\").style.display = \"block\";\n");
      out.write("            dojo.byId(\"permissionNA\").style.display = \"none\";\n");
      out.write("            dojo.byId(\"permissionDiv\").style.display = \"block\";\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        CategoryAjax.getCategoryMap(inode,getCategoryMapCallback);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function getCategoryMapCallback(categoryMap){\n");
      out.write("\n");
      out.write("        var inode = categoryMap['inode'];\n");
      out.write("        var name = categoryMap['category_name'];\n");
      out.write("        var velVar = categoryMap['category_velocity_var_name'];\n");
      out.write("        var key = categoryMap['category_key'];\n");
      out.write("        var keywords = categoryMap['keywords'];\n");
      out.write("\n");
      out.write("        key = key==\"null\"?\"\":key;\n");
      out.write("        keywords = keywords==\"null\"?\"\":keywords;\n");
      out.write("        dojo.byId(\"CatVelVarName\").value = velVar;\n");
      out.write("        dojo.byId(\"CatName\").value = name;\n");
      out.write("        dojo.byId(\"CatKey\").value = key;\n");
      out.write("        dojo.byId(\"CatKeywords\").value = keywords;\n");
      out.write("        dijit.byId('catFilter').attr('value', '');\n");
      out.write("        doSearch();\n");
      out.write("\n");
      out.write("    }\n");
      out.write("    // delete muliple or single category, via ajax\n");
      out.write("    function deleteCategories() {\n");
      out.write("\n");
      out.write("\n");
      out.write("        var items = grid.selection.getSelected();\n");
      out.write("        var full = dojo.byId(\"fullCommand\").value;\n");
      out.write("\n");
      out.write("        if(full==\"true\") {\n");
      out.write("            deleteFunction = function() {\n");
      out.write("                var dia = dijit.byId('dotDeleteCategoriesDialog');\n");
      out.write("                dia.show();\n");
      out.write("                CategoryAjax.deleteCategories(currentInodeOrIdentifier, {\n");
      out.write("                    callback:function(result) {\n");
      out.write("                        if(result==0) {\n");
      out.write("                            dojo.byId(\"warningDiv\").innerHTML = '';\n");
      out.write("                        } else if(result==1) {\n");
      out.write("                            dojo.byId(\"warningDiv\").innerHTML = '");
      out.print( LanguageUtil.get(pageContext, "message.category.delete.failed.has.dependencies") );
      out.write("';\n");
      out.write("                            var t = new dojox.timing.Timer();\n");
      out.write("                            t.setInterval(5000);\n");
      out.write("                            t.onTick = function() {\n");
      out.write("                                t.stop();\n");
      out.write("                                dojo.byId(\"warningDiv\").innerHTML = '';\n");
      out.write("                            };\n");
      out.write("                            t.start();\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        dia.hide();\n");
      out.write("                        doSearch(false, true);\n");
      out.write("                        grid.selection.clear();\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("            }\n");
      out.write("\n");
      out.write("        } else {\n");
      out.write("            deleteFunction = function() {\n");
      out.write("                var dia = dijit.byId('dotDeleteCategoriesDialog');\n");
      out.write("                dia.show();\n");
      out.write("\n");
      out.write("                var inodes = new Array();\n");
      out.write("                dojo.forEach(items, function(selectedItem, index) {\n");
      out.write("                    inodes[index] = selectedItem.i.inode;\n");
      out.write("                });\n");
      out.write("\n");
      out.write("                CategoryAjax.deleteSelectedCategories(inodes, {\n");
      out.write("                    callback:function(result) {\n");
      out.write("                        if(result==0) {\n");
      out.write("                            dojo.byId(\"warningDiv\").innerHTML = '';\n");
      out.write("                        } else if(result==1) { // has dependencies\n");
      out.write("                            dojo.byId(\"warningDiv\").innerHTML = '");
      out.print( LanguageUtil.get(pageContext, "message.category.delete.failed.has.dependencies") );
      out.write("';\n");
      out.write("                            var t = new dojox.timing.Timer();\n");
      out.write("                            t.setInterval(5000);\n");
      out.write("                            t.onTick = function() {\n");
      out.write("                                dojo.byId(\"warningDiv\").innerHTML = '';\n");
      out.write("                                t.stop();\n");
      out.write("                            }\n");
      out.write("                            t.start();\n");
      out.write("                        } else if (result==2) {\n");
      out.write("                            dojo.byId(\"warningDiv\").innerHTML = '';\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        grid.selection.clear();\n");
      out.write("                        doSearch(false, true);\n");
      out.write("                        dia.hide();\n");
      out.write("                    }\n");
      out.write("                });\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("            };\n");
      out.write("\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        if (items.length) {\n");
      out.write("            confirmDialog('");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "message.category.delete.categories")) );
      out.write("',\n");
      out.write("                deleteFunction, function() {return false;});\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    // add a new category via ajax\n");
      out.write("    // boolean save, indicates if saving or updating\n");
      out.write("    function saveOrUpdateCategory(save) {\n");
      out.write("        var prefix = save?\"add\":\"\";\n");
      out.write("        var name = dojo.byId(prefix+\"CatName\").value;\n");
      out.write("        var formName = save?'addCatPropertiesForm':'updateCatPropertiesForm';\n");
      out.write("        dojo.byId(\"savedMessage\").innerHTML = \"\";\n");
      out.write("\n");
      out.write("        if(!dijit.byId(formName).validate()) {\n");
      out.write("            return;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        var velVar = dojo.byId(prefix+\"CatVelVarName\").value;\n");
      out.write("        var key = dojo.byId(prefix+\"CatKey\").value;\n");
      out.write("        var keywords = dojo.byId(prefix+\"CatKeywords\").value;\n");
      out.write("        CategoryAjax.saveOrUpdateCategory(save, currentInodeOrIdentifier, name, velVar, key, keywords, {\n");
      out.write("            callback:function(result) {\n");
      out.write("                doSearch(false, true);\n");
      out.write("                grid.selection.clear();\n");
      out.write("\n");
      out.write("                var message = \"\";\n");
      out.write("                var messageStyle = \"color:green; font-size:11px;\";\n");
      out.write("\n");
      out.write("                switch (result) {\n");
      out.write("                    case 0:\n");
      out.write("                        message = `");
      out.print( LanguageUtil.get(pageContext, "message.category.add") );
      out.write("`;\n");
      out.write("                        clearAddDialog();\n");
      out.write("                        if(!save) {\n");
      out.write("                            message = `");
      out.print( LanguageUtil.get(pageContext, "message.category.update") );
      out.write("`;\n");
      out.write("                            showDotCMSSystemMessage(message);\n");
      out.write("                        }\n");
      out.write("                        break;\n");
      out.write("                    case 1:\n");
      out.write("                        message = `");
      out.print( LanguageUtil.get(pageContext, "message.category.permission.error") );
      out.write("`;\n");
      out.write("                        messageStyle = \"color:red; font-size:11px;\";\n");
      out.write("                        error = true;\n");
      out.write("                        clearAddDialog();\n");
      out.write("                        break;\n");
      out.write("                    case 2:\n");
      out.write("                        message = `");
      out.print( LanguageUtil.get(pageContext, "error.category.folder.taken") );
      out.write("`;\n");
      out.write("                        messageStyle = \"color:red; font-size:11px;\";\n");
      out.write("                        break;\n");
      out.write("                    default:\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                dojo.byId(\"savedMessage\").innerHTML = message;\n");
      out.write("                dojo.byId(\"savedMessage\").style = messageStyle;\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function exportCategories() {\n");
      out.write("        var filter = dojo.byId(\"catFilter\").value;\n");
      out.write("        var downloadPdfIframeName = \"downloadPdfIframe\";\n");
      out.write("        var iframe = dojo.io.iframe.create(downloadPdfIframeName);\n");
      out.write("        dojo.io.iframe.setSrc(iframe, \"/categoriesServlet?inode=\"+currentInodeOrIdentifier+\"&q=\"+filter+\"&action=export\", true);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function importCategories() {\n");
      out.write("\n");
      out.write("        var file = dwr.util.getValue('uploadFile');\n");
      out.write("        var filter = dojo.byId(\"catFilter\").value;\n");
      out.write("        var merge = dojo.byId(\"radioTwo\");\n");
      out.write("\n");
      out.write("        var exportType = \"replace\";\n");
      out.write("        if(merge.checked) {\n");
      out.write("            exportType = \"merge\";\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        CategoryAjax.importCategories(currentInodeOrIdentifier, filter, file, exportType, function(result) {\n");
      out.write("            var dia = dijit.byId('importCategoriesOptions');\n");
      out.write("\n");
      out.write("            if(result==0) {\n");
      out.write("                dojo.byId(\"warningDiv\").innerHTML = '';\n");
      out.write("            }  else if (result==1) {\n");
      out.write("                dojo.byId(\"warningDiv\").innerHTML = `");
      out.print( LanguageUtil.get(pageContext, "message.category.delete.failed.has.dependencies") );
      out.write("`;\n");
      out.write("                var t = new dojox.timing.Timer();\n");
      out.write("                t.setInterval(5000);\n");
      out.write("                t.onTick = function() {\n");
      out.write("                    dojo.byId(\"warningDiv\").innerHTML = '';\n");
      out.write("                    t.stop();\n");
      out.write("                }\n");
      out.write("                t.start();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            dia.hide();\n");
      out.write("            doSearch(false, true);\n");
      out.write("            grid.selection.clear();\n");
      out.write("\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("\n");
      out.write("    function initPermission() {\n");
      out.write("        var nameField = dojo.byId(\"permCatName\");\n");
      out.write("        nameField.innerHTML = currentCatName;\n");
      out.write("\n");
      out.write("        PermissionAjax.getAsset(currentInodeOrIdentifier, {\n");
      out.write("            callback:function(asset) {\n");
      out.write("                assetId = asset.id;\n");
      out.write("                assetType =asset.type;\n");
      out.write("                isParentPermissionable = asset.isParentPermissionable;\n");
      out.write("                isFolder = asset.isFolder;\n");
      out.write("                isHost = asset.isHost;\n");
      out.write("                doesUserHavePermissionsToEdit = asset.doesUserHavePermissionsToEdit;\n");
      out.write("                isNewAsset = assetId == 0 || assetId == '' || !assetId;\n");
      out.write("\n");
      out.write("                if(isFolder){\n");
      out.write("                    contentTemplateString = dojo._getText('/html/portlet/ext/common/edit_permissions_accordion_folder_entry.html');\n");
      out.write("                }\n");
      out.write("                else if(isHost){\n");
      out.write("                    contentTemplateString = dojo._getText('/html/portlet/ext/common/edit_permissions_accordion_entry.html');\n");
      out.write("                }\n");
      out.write("                else{\n");
      out.write("                    contentTemplateString = dojo._getText('/html/portlet/ext/common/edit_permissions_accordion_empty_entry.html');\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                dojo.style(dijit.byId('savingPermissionsDialog').closeButtonNode, 'visibility', 'hidden');\n");
      out.write("                loadPermissions();\n");
      out.write("            }\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function alterFocus(toBlur, toFocus) {\n");
      out.write("        if(toBlur.id!=\"addCatName\" &&\n");
      out.write("            toBlur.id!=\"addCatKey\" &&\n");
      out.write("            toBlur.id!=\"addCatKeywords\" &&\n");
      out.write("            toBlur.id!=\"\" &&\n");
      out.write("            toBlur.id.indexOf(\"dijit_form_NumberTextBox\")) {\n");
      out.write("            toBlur.blur();\n");
      out.write("            toFocus.focus();\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function remoteSyncronization () {\n");
      out.write("        pushHandler.showCategoryDialog();\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function addToBundle () {\n");
      out.write("        pushHandler.showAddToBundleDialog('CAT', '");
      out.print(LanguageUtil.get(pageContext, "Add-To-Bundle"));
      out.write("');\n");
      out.write("    }\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      //  liferay:box
      com.dotcms.repackage.com.liferay.taglib.BoxTag _jspx_th_liferay_005fbox_005f0 = (com.dotcms.repackage.com.liferay.taglib.BoxTag) _005fjspx_005ftagPool_005fliferay_005fbox_0026_005ftop_005fbottom.get(com.dotcms.repackage.com.liferay.taglib.BoxTag.class);
      boolean _jspx_th_liferay_005fbox_005f0_reused = false;
      try {
        _jspx_th_liferay_005fbox_005f0.setPageContext(_jspx_page_context);
        _jspx_th_liferay_005fbox_005f0.setParent(null);
        // /html/portlet/ext/categories/view_categories.jsp(805,0) name = top type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_liferay_005fbox_005f0.setTop("/html/common/box_top.jsp");
        // /html/portlet/ext/categories/view_categories.jsp(805,0) name = bottom type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_liferay_005fbox_005f0.setBottom("/html/common/box_bottom.jsp");
        int _jspx_eval_liferay_005fbox_005f0 = _jspx_th_liferay_005fbox_005f0.doStartTag();
        if (_jspx_eval_liferay_005fbox_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          if (_jspx_eval_liferay_005fbox_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = org.apache.jasper.runtime.JspRuntimeLibrary.startBufferedBody(_jspx_page_context, _jspx_th_liferay_005fbox_005f0);
          }
          do {
            out.write('\n');
            out.write('	');
            //  liferay:param
            com.dotcms.repackage.com.liferay.taglib.ParamTag _jspx_th_liferay_005fparam_005f0 = (com.dotcms.repackage.com.liferay.taglib.ParamTag) _005fjspx_005ftagPool_005fliferay_005fparam_0026_005fvalue_005fname_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.ParamTag.class);
            boolean _jspx_th_liferay_005fparam_005f0_reused = false;
            try {
              _jspx_th_liferay_005fparam_005f0.setPageContext(_jspx_page_context);
              _jspx_th_liferay_005fparam_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_liferay_005fbox_005f0);
              // /html/portlet/ext/categories/view_categories.jsp(806,1) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_liferay_005fparam_005f0.setName("box_title");
              // /html/portlet/ext/categories/view_categories.jsp(806,1) name = value type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
              _jspx_th_liferay_005fparam_005f0.setValue( LanguageUtil.get(pageContext,"view-categories") );
              int _jspx_eval_liferay_005fparam_005f0 = _jspx_th_liferay_005fparam_005f0.doStartTag();
              if (_jspx_th_liferay_005fparam_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                return;
              }
              _005fjspx_005ftagPool_005fliferay_005fparam_0026_005fvalue_005fname_005fnobody.reuse(_jspx_th_liferay_005fparam_005f0);
              _jspx_th_liferay_005fparam_005f0_reused = true;
            } finally {
              org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_005fparam_005f0, _jsp_getInstanceManager(), _jspx_th_liferay_005fparam_005f0_reused);
            }
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\t<div class=\"portlet-main view-categories\">\n");
            out.write("\n");
            out.write("\t\t<!-- START Actions -->\n");
            out.write("\t\t<div id=\"oneandtwo\" data-dojo-type=\"dijit/form/DropDownButton\" data-dojo-props='iconClass:\"actionIcon\", class:\"dijitDropDownActionButton\"'>\n");
            out.write("\t\t\t<span></span>\n");
            out.write("\n");
            out.write("\t\t\t<div data-dojo-type=\"dijit/Menu\" class=\"contentlet-menu-actions\" id=\"oneandtwothree\">\n");
            out.write("\t\t\t\t<div data-dojo-type=\"dijit/MenuItem\" data-dojo-props=\"onClick: showAddCategory\">\n");
            out.write("\t\t\t\t\t");
            out.print( LanguageUtil.get(pageContext, "Add") );
            out.write("\n");
            out.write("\t\t\t\t</div>\n");
            out.write("\t\t\t\t<div data-dojo-type=\"dijit/MenuItem\" data-dojo-props=\"onClick: deleteCategories\">\n");
            out.write("\t\t\t\t\t");
            out.print( LanguageUtil.get(pageContext, "delete") );
            out.write("\n");
            out.write("\t\t\t\t</div>\n");
            out.write("\t\t\t\t<div data-dojo-type=\"dijit/MenuItem\" data-dojo-props=\"onClick: showImportCategories\">\n");
            out.write("\t\t\t\t\t");
            out.print( LanguageUtil.get(pageContext, "import") );
            out.write("\n");
            out.write("\t\t\t\t</div>\n");
            out.write("\t\t\t\t<div data-dojo-type=\"dijit/MenuItem\" data-dojo-props=\"onClick: exportCategories\">\n");
            out.write("\t\t\t\t\t");
            out.print( LanguageUtil.get(pageContext, "export") );
            out.write("\n");
            out.write("\t\t\t\t</div>\n");
            out.write("\t\t\t\t");
 if ( enterprise ) { 
            out.write("\n");
            out.write("\t\t\t\t");
 if ( sendingEndpoints ) { 
            out.write("\n");
            out.write("\t\t\t\t<div data-dojo-type=\"dijit/MenuItem\" onClick=\"remoteSyncronization();\">\n");
            out.write("\t\t\t\t\t");
            out.print( LanguageUtil.get(pageContext,"Remote-Syncronization") );
            out.write("\n");
            out.write("\t\t\t\t</div>\n");
            out.write("\t\t\t\t");
}
            out.write("\n");
            out.write("\t\t\t\t<div data-dojo-type=\"dijit/MenuItem\" onClick=\"addToBundle();\">\n");
            out.write("\t\t\t\t\t");
            out.print( LanguageUtil.get(pageContext,"Add-To-Bundle") );
            out.write("\n");
            out.write("\t\t\t\t</div>\n");
            out.write("\t\t\t\t");
}
            out.write("\n");
            out.write("\t\t\t</div>\n");
            out.write("\t\t</div>\n");
            out.write("\t\t<!-- END Actions -->\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\t\t<!--  START TABS -->\n");
            out.write("\t\t<div id=\"mainTabContainer\" dolayout=\"false\" dojoType=\"dijit.layout.TabContainer\">\n");
            out.write("\n");
            out.write("\t\t\t<!-- START Children Tab -->\n");
            out.write("\t\t\t<div id=\"TabOne\" dojoType=\"dijit.layout.ContentPane\"  title=\"");
            out.print(LanguageUtil.get(pageContext, "children"));
            out.write("\">\n");
            out.write("\t\t\t\t<div class=\"portlet-toolbar\">\n");
            out.write("\t\t\t\t\t<div class=\"portlet-toolbar__actions-primary\">\n");
            out.write("\t\t\t\t\t\t");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");


	boolean inPopupIFrame = UtilMethods.isSet(ParamUtil.getString(request, WebKeys.POPUP)) ||(UtilMethods.isSet(ParamUtil.getString(request, WebKeys.IN_FRAME)) && "true".equals(ParamUtil.getString(request, WebKeys.IN_FRAME)));
    boolean isAngularFrame = (UtilMethods.isSet(request.getSession().getAttribute(WebKeys.IN_FRAME)) && (Boolean)request.getSession().getAttribute(WebKeys.IN_FRAME)) && UtilMethods.isSet(request.getSession().getAttribute(WebKeys.FRAME)) && !UtilMethods.isSet(ParamUtil.getString(request, WebKeys.HIDE_SUBNAV));


		UserAPI userAPI = APILocator.getUserAPI();
		HostWebAPI hostApi = WebAPILocator.getHostWebAPI();
	
		Boolean dontDisplayAllHostsOption = (Boolean) request
				.getAttribute(com.dotmarketing.util.WebKeys.DONT_DISPLAY_SUBNAV_ALL_HOSTS);
		if (dontDisplayAllHostsOption == null) {
			dontDisplayAllHostsOption = false;
		}
	
		boolean showHostSelector = request.getAttribute("SHOW_HOST_SELECTOR") != null;
		String hostId = (String)request.getAttribute("_crumbHost");
	
		List<CrumbTrailEntry> crumbTrailEntries = (request
				.getAttribute(com.dotmarketing.util.WebKeys.CMS_CRUMBTRAIL_OPTIONS) != null) ? (List<CrumbTrailEntry>) request
				.getAttribute(com.dotmarketing.util.WebKeys.CMS_CRUMBTRAIL_OPTIONS)
				: new ArrayList<CrumbTrailEntry>();
				
	
	    if(!UtilMethods.isSet(hostId)){
		   hostId = (String) session.getAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID);
	    }
		Host currentHost = null;
		String hostName = null;
	
		try{
			currentHost = hostApi.find(hostId, user, false);
			hostName = currentHost.getTitle();
		}
		catch(Exception e){
			try{
				currentHost=hostApi.findDefaultHost(user, false);
				hostName = currentHost.getTitle();
			}
			catch(Exception ex){
				com.dotmarketing.util.Logger.error(this.getClass(), "user does not have a default host");
			}
		}
		
	
	
		String _browserCrumbUrl = null;
		boolean canManageHosts = false;
		String _hostManagerUrl = null;
	
		if(layouts ==null){
			List<Layout> userHasLayouts = (List<Layout>) APILocator.getLayoutAPI().loadLayoutsForUser(user);
			layouts = userHasLayouts.toArray(new Layout[userHasLayouts.size()]);
		}
		// if we have a host, get the url for the browser
		for (int i = 0; i < layouts.length; i++) {
			List<String> portletIDs = layouts[i].getPortletIds();
			for (String x : portletIDs) {
				if ("site-browser".equals(x)) {
					_browserCrumbUrl = new PortletURLImpl(request, x, layouts[i].getId(), false).toString();
				}
				if ("sites".equals(x)) {
					canManageHosts = true;
					_hostManagerUrl = new PortletURLImpl(request, x, layouts[i].getId(), false).toString();
				}
			}
		}
	

            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("<div class=\"clear\"></div>\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\t\t\t\t\t\t<!-- ++++++++++++++++++++++++++++  -->\n");
            out.write("\t\t\t\t\t\t<!-- +++++ Start breadcrumps ++++  -->\n");
            out.write("\n");
            out.write("\t\t\t\t\t\t");

							if (0 < crumbTrailEntries.size()) {

								boolean _amITheFirst = true;
						
            out.write("\n");
            out.write("\n");
            out.write("\t\t\t\t\t\t<div class=\"portlet-toolbar\">\n");
            out.write("\t\t\t\t\t\t\t<div class=\"subNavCrumbTrail\" id=\"subNavCrumbTrail\">\n");
            out.write("\t\t\t\t\t\t\t\t<ul id=\"ulNav\">\n");
            out.write("\t\t\t\t\t\t\t\t\t");
 if (!showHostSelector) {  _amITheFirst = false; 
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t\t<li id=\"selectHostDiv\"\n");
            out.write("\t\t\t\t\t\t\t\t\t\t\t");
if(UtilMethods.isSet(_browserCrumbUrl)){ 
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t\t\tonclick=\"window.location='");
            out.print(_browserCrumbUrl);
            out.write("';\"\n");
            out.write("\t\t\t\t\t\t\t\t\t\t\t");
} 
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t\t>\n");
            out.write("\t\t\t\t\t\t\t\t\t\t<span class=\"hostStoppedIcon\" style=\"float:left;margin-right:5px;\"></span>\n");
            out.write("\t\t\t\t\t\t\t\t\t\t");
            out.print(LanguageUtil.get(pageContext, "Global-Page"));
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t\t</li>\n");
            out.write("\t\t\t\t\t\t\t\t\t");
 } 
            out.write("\n");
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t\t");
 for (CrumbTrailEntry crumbTrailEntry : crumbTrailEntries) {
										if (UtilMethods.isSet(crumbTrailEntry.getLink())) { 
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t\t<li style=\"cursor: pointer\"\n");
            out.write("\t\t\t\t\t\t\t\t\t\t\t");
if(_amITheFirst){
            out.write(" id=\"selectHostDiv\"");
} 
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t\t>\n");
            out.write("\t\t\t\t\t\t\t\t\t\t");
 if (_amITheFirst) { 
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t\t\t<span class=\"publishIcon\"></span>\n");
            out.write("\t\t\t\t\t\t\t\t\t\t");
 }
											_amITheFirst = false;
										
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t\t\t<a href=\"\n");
            out.write("\t\t\t\t\t\t\t\t\t\t\t");
            out.print( crumbTrailEntry.getLink() );
            out.write("\"\n");
            out.write("\t\t\t\t\t\t\t\t\t\t>\n");
            out.write("\t\t\t\t\t\t\t\t\t\t\t");
            out.print(crumbTrailEntry.getTitle());
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t\t\t</a>\n");
            out.write("\t\t\t\t\t\t\t\t\t</li>\n");
            out.write("\t\t\t\t\t\t\t\t\t");

									} else {
									
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t\t<li class=\"lastCrumb\" id=\"lastCrumb\"><span>");
            out.print(crumbTrailEntry.getTitle());
            out.write("</span></li>\n");
            out.write("\t\t\t\t\t\t\t\t\t");

										}
									
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t\t");

										}
									
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t</ul>\n");
            out.write("\t\t\t\t\t\t\t\t");

									if (showHostSelector) {
								
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t<div class=\"changeHost\" onclick=\"dijit.popup.open({popup: myDialog, around: dojo.byId('changeHostId')})\">\n");
            out.write("\t\t\t\t\t\t\t\t\t<span id=\"changeHostId\">");
            out.print(LanguageUtil.get(pageContext, "Change-Host"));
            out.write("</span>\n");
            out.write("\t\t\t\t\t\t\t\t\t<span class=\"chevronExpandIcon\"></span>\n");
            out.write("\t\t\t\t\t\t\t\t</div>\n");
            out.write("\t\t\t\t\t\t\t\t");

									}
								
            out.write("\n");
            out.write("\t\t\t\t\t\t\t\t<div class=\"clear\"></div>\n");
            out.write("\n");
            out.write("\t\t\t\t\t\t\t</div>\n");
            out.write("\t\t\t\t\t\t</div>\n");
            out.write("\n");
            out.write("\t\t\t\t\t\t");

							}
						
            out.write("\n");
            out.write("\n");
            out.write("\t\t\t\t\t\t<script type=\"text/javascript\">\n");
            out.write("\n");
            out.write("                            function showHostPreview() {\n");
            out.write("                                window.location = '");
            out.print(_browserCrumbUrl);
            out.write("';\n");
            out.write("                            }\n");
            out.write("                            function updateCMSSelectedHosts() {\n");
            out.write("                                if( dijit.byId('subNavHost').attr('value')!=null && dijit.byId('subNavHost').attr('value')!=''){\n");
            out.write("                                    window.location.href = \"/html/portlet/ext/common/sub_nav_refresh_host.jsp?referer=\" + escape(window.location) + \"&host_id=\" + dijit.byId('subNavHost').attr('value');\n");
            out.write("                                }\n");
            out.write("                            }\n");
            out.write("\t\t\t\t\t\t</script>\n");
            out.write("\n");
            out.write("\t\t\t\t\t\t<!-- ++++++ End breadcrumps +++++  -->\n");
            out.write("\t\t\t\t\t\t<!-- ++++++++++++++++++++++++++++  -->\n");
            out.write("\n");
            out.write("\n");
            out.write("\t\t\t\t\t</div>\n");
            out.write("\n");
            out.write("\t\t\t\t\t<div class=\"portlet-toolbar__info\">\n");
            out.write("\t\t\t\t\t\t<div id=\"warningDiv\" style=\"color: red;\"></div>\n");
            out.write("\t\t\t\t\t</div>\n");
            out.write("\t\t\t\t\t<div class=\"portlet-toolbar__actions-secondary\">\n");
            out.write("\t\t\t\t\t\t<div class=\"inline-form\">\n");
            out.write("\t\t\t\t\t\t\t<input  name=\"catFilter\" id=\"catFilter\" onkeyup=\"doSearch(false, true);\" type=\"text\" dojoType=\"dijit.form.TextBox\" placeholder=\"");
            out.print( LanguageUtil.get(pageContext, "message.filter.categories") );
            out.write("\">\n");
            out.write("\t\t\t\t\t\t\t<button dojoType=\"dijit.form.Button\" onclick=\"clearCatFilter()\" type=\"button\">");
            out.print( LanguageUtil.get(pageContext, "Clear") );
            out.write("</button>\n");
            out.write("\t\t\t\t\t\t</div>\n");
            out.write("\t\t\t\t\t</div>\n");
            out.write("\t\t\t\t</div>\n");
            out.write("\n");
            out.write("\t\t\t\t<div id=\"catHolder\" style=\"text-align: center; \" class=\"claro\"></div>\n");
            out.write("\n");
            out.write("\t\t\t\t<div style=\"text-align: right; margin: 16px 0\">\n");
            out.write("\t\t\t\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" onClick=\"doSearch(true);\" iconClass=\"resetIcon\">");
            out.print( LanguageUtil.get(pageContext,"Reorder") );
            out.write("</button>\n");
            out.write("\t\t\t\t</div>\n");
            out.write("\t\t\t\t<input type=\"hidden\" name=\"fullCommand\" id=\"fullCommand\" value=\"\">\n");
            out.write("\t\t\t</div>\n");
            out.write("\t\t\t<!-- END Children Tab -->\n");
            out.write("\n");
            out.write("\t\t\t<!-- START Properties Tab -->\n");
            out.write("\t\t\t<div id=\"TabTwo\" dojoType=\"dijit.layout.ContentPane\" title=\"");
            out.print(LanguageUtil.get(pageContext, "properties"));
            out.write("\">\n");
            out.write("\t\t\t\t<div id=\"propertiesNA\" style=\"height: 300px; text-align: center;  position:relative\">\n");
            out.write("\t\t\t\t\t<span style=\"position:absolute; top:50%; left: 50%; height:10em; margin-top:-2em; margin-left:-10em\">");
            out.print( LanguageUtil.get(pageContext, "message.category.toplevel.na") );
            out.write("</span>\n");
            out.write("\t\t\t\t</div>\n");
            out.write("\t\t\t\t<div id=\"propertiesDiv\" style=\"display: none\">\n");
            out.write("\t\t\t\t\t<form id=\"updateCatPropertiesForm\" dojoType=\"dijit.form.Form\">\n");
            out.write("\t\t\t\t\t\t<dl >\n");
            out.write("\t\t\t\t\t\t\t<dt>\n");
            out.write("\t\t\t\t\t\t\t\t");
            out.print( LanguageUtil.get(pageContext, "Variable-ID") );
            out.write(":\n");
            out.write("\t\t\t\t\t\t\t</dt>\n");
            out.write("\t\t\t\t\t\t\t<dd style=\"clear: none;\">\n");
            out.write("\t\t\t\t\t\t\t\t<input type=\"hidden\" id=\"\"/>\n");
            out.write("\t\t\t\t\t\t\t\t<input type=\"text\" dojoType=\"dijit.form.TextBox\" id=\"CatVelVarName\" readonly=\"readonly\" name=\"categoryVarName\" maxlength=\"50\" size=\"30\"  value=\"\" />\n");
            out.write("\t\t\t\t\t\t\t</dd>\n");
            out.write("\t\t\t\t\t\t\t<dt>\n");
            out.write("\t\t\t\t\t\t\t\t");
            out.print( LanguageUtil.get(pageContext, "category-name") );
            out.write(":\n");
            out.write("\t\t\t\t\t\t\t</dt>\n");
            out.write("\t\t\t\t\t\t\t<dd>\n");
            out.write("\t\t\t\t\t\t\t\t<input type=\"text\" required=\"true\" invalidMessage=\"Required.\" dojoType=\"dijit.form.ValidationTextBox\" id=\"CatName\" name=\"categoryName\" maxlength=\"50\" size=\"30\"  value=\"\" />\n");
            out.write("\t\t\t\t\t\t\t</dd>\n");
            out.write("\t\t\t\t\t\t\t<dt>\n");
            out.write("\t\t\t\t\t\t\t\t");
            out.print( LanguageUtil.get(pageContext, "category-unique-key") );
            out.write(":\n");
            out.write("\t\t\t\t\t\t\t</dt>\n");
            out.write("\t\t\t\t\t\t\t<dd>\n");
            out.write("\t\t\t\t\t\t\t\t<input type=\"text\" dojoType=\"dijit.form.TextBox\" id=\"CatKey\" name=\"key\" size=\"30\" maxlength=\"255\" value=\"\" />\n");
            out.write("\t\t\t\t\t\t\t</dd>\n");
            out.write("\n");
            out.write("\t\t\t\t\t\t\t<dt>\n");
            out.write("\t\t\t\t\t\t\t\t");
            out.print( LanguageUtil.get(pageContext, "keywords") );
            out.write(":\n");
            out.write("\t\t\t\t\t\t\t</dt>\n");
            out.write("\t\t\t\t\t\t\t<dd>\n");
            out.write("\t\t\t\t\t\t\t\t<textarea dojoType=\"dijit.form.Textarea\" id=\"CatKeywords\" name=\"keywords\" style=\"width:250px; min-height:40px;\"></textarea>\n");
            out.write("\t\t\t\t\t\t\t</dd>\n");
            out.write("\t\t\t\t\t\t</dl>\n");
            out.write("\t\t\t\t\t</form>\n");
            out.write("\t\t\t\t\t<div class=\"buttonRow\" id=\"editCategoryButtonRow\">\n");
            out.write("\t\t\t\t\t\t<button dojoType=\"dijit.form.Button\" onclick=\"saveOrUpdateCategory(false);\" iconClass=\"saveIcon\" type=\"button\">\n");
            out.write("\t\t\t\t\t\t\t");
            out.print( LanguageUtil.get(pageContext, "save") );
            out.write("\n");
            out.write("\t\t\t\t\t\t</button>\n");
            out.write("\t\t\t\t\t</div>\n");
            out.write("\t\t\t\t</div>\n");
            out.write("\t\t\t</div>\n");
            out.write("\t\t\t<!-- END Properties Tab -->\n");
            out.write("\n");
            out.write("\t\t\t<!-- START Permission Tab -->\n");
            out.write("\t\t\t<div id=\"TabThree\" dojoType=\"dijit.layout.ContentPane\" title=\"");
            out.print(LanguageUtil.get(pageContext, "permissions"));
            out.write("\" >\n");
            out.write("\t\t\t\t<div id=\"permissionNA\" style=\"height: 300px; text-align: center;  position:relative\">\n");
            out.write("\t\t\t\t\t<span style=\"position:absolute; top:50%; left: 50%; height:10em; margin-top:-2em; margin-left:-10em\">");
            out.print( LanguageUtil.get(pageContext, "message.category.toplevel.na") );
            out.write("</span>\n");
            out.write("\t\t\t\t</div>\n");
            out.write("\t\t\t\t<div id=\"permissionDiv\" style=\"display: none\">\n");
            out.write("\t\t\t\t\t");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("<script type=\"text/javascript\" src=\"/dwr/interface/PermissionAjax.js\"></script>\n");
            out.write("<script type=\"text/javascript\" src=\"/html/js/dotcms/dijit/form/RolesFilteringSelect.js\"></script>\n");
            out.write("<script type=\"text/javascript\"><!--\n");
            out.write("\n");
            out.write("\tdojo.require('dijit.layout.AccordionContainer');\n");
            out.write("\tdojo.require('dijit.layout.ContentPane');\n");
            out.write("\tdojo.require('dotcms.dijit.form.RolesFilteringSelect');\n");
            out.write("\tdojo.require('dotcms.dojo.data.UsersReadStore');\n");
            out.write("\n");
            out.write("\t//Global variables\n");
            out.write('\n');
            out.write('\n');
            out.write('	');
	Contentlet contentletAux = ((Contentlet)request.getAttribute(com.dotmarketing.util.WebKeys.CONTENTLET_EDIT)); 
            out.write("\n");
            out.write("\n");
            out.write("\tvar languageId = '");
            out.print( ((UtilMethods.isSet(contentletAux) && UtilMethods.isSet(contentletAux.getLanguageId())) ? contentletAux.getLanguageId() : "") );
            out.write("';\n");
            out.write("\tvar assetId;\n");
            out.write("\tvar assetType;\n");
            out.write("\tvar isParentPermissionable;\n");
            out.write("\tvar isFolder;\n");
            out.write("\tvar isHost;\n");
            out.write("\tvar doesUserHavePermissionsToEdit;\n");
            out.write("\tvar isNewAsset;\n");
            out.write("\tvar contentTemplateString;\n");
            out.write("\n");
            out.write("    var accordionContainer;\n");
            out.write("\n");
            out.write("    var currentPermissions;\n");
            out.write("\tvar inheritingPermissions = false;\n");
            out.write("\tvar changesMadeToPermissions = false;\n");
            out.write("\n");
            out.write("\t//I18n messages\n");
            out.write("\tvar roleAlreadyInListMesg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "role-already-in-list")) );
            out.write("';\n");
            out.write("\tvar globalPath = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "global-permission-path")) );
            out.write("';\n");
            out.write("\tvar permissionsSavedMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "permissions-saved")) );
            out.write("'\n");
            out.write("    var noPermissionsSavedMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "no-permissions-saved")) );
            out.write("'\n");
            out.write("\tvar removeIndividualPermissionConfirm = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "remove-individual-permissions-confirm")) );
            out.write("'\n");
            out.write("\tvar newAssetPermissionsMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "new-asset-permissions-message")) );
            out.write("'\n");
            out.write("\tvar noPermissionsMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "no-permissions-message")) );
            out.write("'\n");
            out.write("\tvar roleLockedForPermissions = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "role-locked-to-permissions")) );
            out.write("'\n");
            out.write("\tvar roleNotRequiredPermissions = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "role-pageContext-lacks-permission")) );
            out.write("'\n");
            out.write("\tvar cascadePermissionsConfirm = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "cascade-permissions-confirm-msg")) );
            out.write("'\n");
            out.write("\tvar hostsWillInheritMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Hosts")) );
            out.write("';\n");
            out.write("\tvar foldersWillInheritMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Folders")) );
            out.write("';\n");
            out.write("\tvar containersWillInheritMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Containers")) );
            out.write("';\n");
            out.write("\tvar templatesWillInheritMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Templates")) );
            out.write("';\n");
            out.write("\tvar templateLayoutsWillInheritMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Template-Layouts")) );
            out.write("';\n");
            out.write("\tvar pagesWillInheritMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Pages")) );
            out.write("';\n");
            out.write("\tvar linksWillInheritMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Links")) );
            out.write("';\n");
            out.write("\tvar contentWillInheritMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Content-Files")) );
            out.write("';\n");
            out.write("\tvar permissionsOnChildrenMsg1 = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Permissions-on-Children1")) );
            out.write("';\n");
            out.write("\tvar permissionsOnChildrenMsg2 = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Permissions-on-Children2")) );
            out.write("';\n");
            out.write("\tvar structureWillInheritMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Structure")) );
            out.write("';\n");
            out.write("\tvar rulesWillInheritMsg = '");
            out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Rules")) );
            out.write("';\n");
            out.write("\n");
            out.write("\t//HTML Templates\n");
            out.write("\tvar inheritedSourcesTemplate = '<span class=\"${icon}\"></span> ${path}';\n");
            out.write("\tvar titleTemplateString = dojo._getText('/html/portlet/ext/common/edit_permissions_accordion_title.html');\n");
            out.write("\n");
            out.write("\n");
            out.write("\t//Global constants\n");
            out.write("\tvar viewPermission = ");
            out.print( PermissionAPI.PERMISSION_READ );
            out.write(";\n");
            out.write("\tvar editPermission = ");
            out.print( PermissionAPI.PERMISSION_WRITE );
            out.write(";\n");
            out.write("\tvar publishPermission = ");
            out.print( PermissionAPI.PERMISSION_PUBLISH );
            out.write(";\n");
            out.write("\tvar editPermissionsPermission = ");
            out.print( PermissionAPI.PERMISSION_EDIT_PERMISSIONS );
            out.write(";\n");
            out.write("\tvar addChildrenPermission = ");
            out.print( PermissionAPI.PERMISSION_CAN_ADD_CHILDREN );
            out.write(";\n");
            out.write("\n");
            out.write("\tvar hostClassName = '");
            out.print( Host.class.getCanonicalName() );
            out.write("'\n");
            out.write("\tvar folderClassName = '");
            out.print( Folder.class.getCanonicalName() );
            out.write("'\n");
            out.write("\tvar containerClassName = '");
            out.print( Container.class.getCanonicalName() );
            out.write("'\n");
            out.write("\tvar templateClassName = '");
            out.print( Template.class.getCanonicalName() );
            out.write("'\n");
            out.write("\tvar templateLayoutClassName = '");
            out.print( TemplateLayout.class.getCanonicalName() );
            out.write("'\n");
            out.write("\tvar pageClassName = '");
            out.print( IHTMLPage.class.getCanonicalName() );
            out.write("'\n");
            out.write("\tvar linkClassName = '");
            out.print( Link.class.getCanonicalName() );
            out.write("'\n");
            out.write("\tvar contentClassName = '");
            out.print( Contentlet.class.getCanonicalName() );
            out.write("';\n");
            out.write("\tvar structureClassName = '");
            out.print( Structure.class.getCanonicalName() );
            out.write("';\n");
            out.write("\tvar rulesClassName = '");
            out.print( Rule.class.getCanonicalName() );
            out.write("';\n");
            out.write("\n");
            out.write("\tvar dijits = [];\n");
            out.write("\n");
            out.write("\tfunction loadPermissions () {\n");
            out.write("\n");
            out.write("\t\tif(isNewAsset) {\n");
            out.write("\t\t\tdojo.style('loadingPermissionsAccordion', { display: 'none' });\n");
            out.write("\t\t\tdojo.style('assetPermissionsWrapper', { display: 'none' });\n");
            out.write("\t\t\tdojo.style('assetPermissionsMessageWrapper', { display: '' });\n");
            out.write("\t\t\tdojo.byId('assetPermissionsMessageWrapper').innerHTML = newAssetPermissionsMsg;\n");
            out.write("\t\t\talert(newAssetPermissionsMsg);\n");
            out.write("\t\t\treturn;\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tdojo.style('loadingPermissionsAccordion', { display: '' });\n");
            out.write("\t\tdojo.style('assetPermissionsWrapper', { display: 'none' });\n");
            out.write("\n");
            out.write("\t\tif(dijit.byId('permissionsAccordionContainer')) {\n");
            out.write("\t\t\t//Manually destroying widgets since Accordion destroy recursive does not take care of all\n");
            out.write("\t\t\tvar container = dijit.byId('permissionsAccordionContainer');\n");
            out.write("\t\t\ttry{\n");
            out.write("\t\t\t    container.destroyDescendants(true);\n");
            out.write("\t\t\t}catch(ex){\n");
            out.write("\t\t\t\tconsole.log('loadPermissions: error removing permissions container: ' + ex);\n");
            out.write("\t\t\t}\n");
            out.write("\t\t\ttry{\n");
            out.write("\t\t\t\tcontainer.destroyRecursive(true);\n");
            out.write("\t\t\t}catch(ex){\n");
            out.write("\t\t\t\tconsole.log('loadPermissions: error removing permissions container: ' + ex);\n");
            out.write("\t\t\t}\n");
            out.write("\t\t}\n");
            out.write("\t\t//http://jira.dotmarketing.net/browse/DOTCMS-6214\n");
            out.write("\t\tdestroyChecks();\n");
            out.write("\t\tPermissionAjax.getAssetPermissions(assetId, languageId, { callback: renderPermissionsCallback, scope: this });\n");
            out.write("\n");
            out.write("\t\tif(isParentPermissionable)\n");
            out.write("\t\t\tdojo.style('cascadeChangesChkWrapper', { display: '' });\n");
            out.write("\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction renderPermissionsCallback(permissions) {\n");
            out.write("\n");
            out.write("\t\tif(!doesUserHavePermissionsToEdit) {\n");
            out.write("\t\t\tdojo.style('assetPermissionsMessageWrapper', { display: '' });\n");
            out.write("\t\t\tdojo.byId('assetPermissionsMessageWrapper').innerHTML = noPermissionsMsg;\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tcurrentPermissions = permissions;\n");
            out.write("\n");
            out.write("\t\tsetupInheritanceOptions();\n");
            out.write("\n");
            out.write("\t\taccordionContainer = new dijit.layout.AccordionContainer({\n");
            out.write("\t\t\tlayout: function () {\n");
            out.write("\t\t\t\t// Implement _LayoutWidget.layout() virtual method.\n");
            out.write("\t\t\t\t// Set the height of the open pane based on what room remains.\n");
            out.write("\n");
            out.write("\t\t\t\tvar openPane = this.selectedChildWidget;\n");
            out.write("\n");
            out.write("\t\t\t\t// get cumulative height of all the title bars\n");
            out.write("\t\t\t\tvar totalCollapsedHeight = 0;\n");
            out.write("\t\t\t\tdojo.forEach(this.getChildren(), function(child){\n");
            out.write("\t\t\t\t\ttotalCollapsedHeight += child._buttonWidget.getTitleHeight();\n");
            out.write("\t\t\t\t\tif((!isFolder && !isHost) || (inheritingPermissions)) {\n");
            out.write("\t\t\t\t\t\tdojo.style(child.containerNode, { padding: '0' });\n");
            out.write("\t\t\t\t\t}\n");
            out.write("\t\t\t\t});\n");
            out.write("\t\t\t\tvar mySize = this._contentBox;\n");
            out.write("\t\t\t\tif((isFolder || isHost) && !inheritingPermissions) {\n");
            out.write("\t\t\t\t\tthis._verticalSpace = 200;\n");
            out.write("\t\t\t\t} else {\n");
            out.write("\t\t\t\t\tthis._verticalSpace = 0;\n");
            out.write("\t\t\t\t}\n");
            out.write("\n");
            out.write("\t\t\t\t// Memo size to make displayed child\n");
            out.write("\t\t\t\tthis._containerContentBox = {\n");
            out.write("\t\t\t\t\th: this._verticalSpace,\n");
            out.write("\t\t\t\t\tw: mySize.w\n");
            out.write("\t\t\t\t};\n");
            out.write("\n");
            out.write("\t\t\t\tif(openPane){\n");
            out.write("\t\t\t\t\topenPane.resize(this._containerContentBox);\n");
            out.write("\t\t\t\t}\n");
            out.write("\t\t\t}\n");
            out.write("        },\n");
            out.write("        \"permissionsAccordionContainer\");\n");
            out.write("\n");
            out.write("\t\tdojo.forEach(permissions, function(role) {\n");
            out.write("\t\t\taddTemplatePermissionOptions(role, role.permissions);\n");
            out.write("\t\t\taddPermissionsAccordionPane(role);\n");
            out.write("\t\t})\n");
            out.write("\n");
            out.write("\t\ttry{\n");
            out.write("\t    accordionContainer.startup();\n");
            out.write("\t\t}catch(ex){}\n");
            out.write("\n");
            out.write("\t\tdojo.forEach(permissions, function(role) {\n");
            out.write("\t\t\ttry{\n");
            out.write("\t\t    initPermissionsAccordionPane(role);\n");
            out.write("\t\t\t}catch(ex){}\n");
            out.write("\t\t})\n");
            out.write("\n");
            out.write("\t\tdojo.style('loadingPermissionsAccordion', { display: 'none' });\n");
            out.write("\t\tdojo.style('assetPermissionsWrapper', { display: '' });\n");
            out.write("\n");
            out.write("\t\tif(!doesUserHavePermissionsToEdit) {\n");
            out.write("\t\t\tdojo.style('permissionsTabFt', { display: 'none' });\n");
            out.write("\t\t\tdojo.style('resetPermissionActions', { display: 'none' });\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tif(permissions.length == 0) {\n");
            out.write("\t\t\tdojo.style('inheritingFrom', { display: 'none' })\n");
            out.write("\t\t\tdojo.style('noPermissionsMessage', { display: '' })\n");
            out.write("\t\t\tdojo.style('permissionsAccordionContainer', { display: 'none' })\n");
            out.write("\t\t\tdojo.style('permissionsTabFt', { display: '' });\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tif(inheritingPermissions && permissions.length > 0) {\n");
            out.write("\t\t\tdojo.style('permissionsActions', { display: 'none' });\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tadjustAccordionHeigth();\n");
            out.write("\t\tif(!inheritingPermissions && (isHost || isFolder)){\n");
            out.write("\t\t\tdojo.query(\".accordionEntry\").forEach(function(node, index, arr){\n");
            out.write("\t\t\t\tnode.className = \"permissionTable\";\n");
            out.write("\t\t\t });\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\t\t}\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction setupInheritanceOptions () {\n");
            out.write("\t\tdojo.byId('inheritingFromSources').innerHTML = '';\n");
            out.write("\t\tif(allInheritedPermissions(currentPermissions)) {\n");
            out.write("\t\t\tvar sources = listOfInheritedSources();\n");
            out.write("\t\t\tdojo.forEach(sources, function (source) {\n");
            out.write("\t\t\t\tsource.icon = 'shimIcon';\n");
            out.write("\t\t\t\tif(source.type == 'host') {\n");
            out.write("\t\t\t\t\tsource.icon = 'publishIcon'\n");
            out.write("\t\t\t\t} else if(source.type == 'structure') {\n");
            out.write("\t\t\t\t\tsource.icon = 'structureIcon'\n");
            out.write("\t\t\t\t} else if(source.type == 'folder') {\n");
            out.write("\t\t\t\t\tsource.icon = 'folderSelectedIcon'\n");
            out.write("\t\t\t\t} else if(source.type == 'category') {\n");
            out.write("\t\t\t\t\tsource.icon = 'fixIcon'\n");
            out.write("\t\t\t\t}\n");
            out.write("\t\t\t\tif(source.path == 'SYSTEM_HOST') source.path = globalPath;\n");
            out.write("\n");
            out.write("\t\t\t\tvar html = dojo.string.substitute(inheritedSourcesTemplate, source);\n");
            out.write("\t\t\t\tdojo.place(html, 'inheritingFromSources', 'last');\n");
            out.write("\t\t\t});\n");
            out.write("\t\t\tdojo.style('permissionsTabFt', { display: 'none' });\n");
            out.write("\t\t\tdojo.style('inheritingFrom', { display: '' });\n");
            out.write("\t\t\tdojo.style('permissionIndividuallyButtonWrapper', { display: '' });\n");
            out.write("\t\t\tdojo.style('resetPermissionButtonWrapper', { display: 'none' });\n");
            out.write("\t\t\tinheritingPermissions = true;\n");
            out.write("\n");
            out.write("\t\t} else {\n");
            out.write("\t\t\tdojo.style('permissionsTabFt', { display: '' });\n");
            out.write("\t\t\tdojo.style('inheritingFrom', { display: 'none' });\n");
            out.write("\t\t\tdojo.style('permissionIndividuallyButtonWrapper', { display: 'none' });\n");
            out.write("\t\t\tdojo.style('resetPermissionButtonWrapper', { display: '' });\n");
            out.write("\t\t\tinheritingPermissions = false;\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\n");
            out.write("\tfunction allInheritedPermissions(permissions) {\n");
            out.write("\t\tfor(var i = 0; i < permissions.length; i++) {\n");
            out.write("\t\t\tvar permission = permissions[i];\n");
            out.write("\t\t\tif(!permission.inherited)\n");
            out.write("\t\t\t\treturn false;\n");
            out.write("\t\t}\n");
            out.write("\t\treturn true;\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction listOfInheritedSources() {\n");
            out.write("\t\tvar sourcesLoaded = [];\n");
            out.write("\t\tvar sources = [];\n");
            out.write("\t\tfor(var i = 0; i < currentPermissions.length; i++) {\n");
            out.write("\t\t\tvar role = currentPermissions[i];\n");
            out.write("\t\t\tif(role.inherited) {\n");
            out.write("\t\t\t\tif(sourcesLoaded[role.inheritedFromId] == null) {\n");
            out.write("\t\t\t\t\tsources.push({ path: role.inheritedFromPath, type: role.inheritedFromType });\n");
            out.write("\t\t\t\t\tsourcesLoaded[role.inheritedFromId] = role.id;\n");
            out.write("\t\t\t\t}\n");
            out.write("\t\t\t}\n");
            out.write("\t\t}\n");
            out.write("\t\treturn sources;\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction adjustAccordionHeigth() {\n");
            out.write("\t\tvar container = dijit.byId('permissionsAccordionContainer');\n");
            out.write("\t\tcontainer.resize();\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction addPermissionsAccordionPane(role) {\n");
            out.write("\n");
            out.write("\t\tdijit.registry.remove();\n");
            out.write("\n");
            out.write("\t\tvar title = dojo.string.substitute(titleTemplateString, role);\n");
            out.write("\t\tvar content = dojo.string.substitute(contentTemplateString, role);\n");
            out.write("\n");
            out.write("\t\tvar contentPane = new dijit.layout.ContentPane({\n");
            out.write("\t        title: title,\n");
            out.write("\t        content: content,\n");
            out.write("\t\t\tid: 'permissionsAccordionPane-' + role.id\n");
            out.write("\t    })\n");
            out.write("\t\taccordionContainer.addChild(contentPane)\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction initPermissionsAccordionPane(role) {\n");
            out.write("\t\tdijits.push(dojo.parser.parse(dojo.byId('permissionTitleTableWrapper-' + role.id)));\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction applyPermissionChanges () {\n");
            out.write("\n");
            out.write("\t\t// check if there is changes\n");
            out.write("\t\tif(dijit.byId('cascadeChangesCheckbox').attr('value')==false) {\n");
            out.write("\t\t\tvar changes=false;\n");
            out.write("\t\t\tfor(var i = 0; i < currentPermissions.length; i++) {\n");
            out.write("\t            var role = currentPermissions[i];\n");
            out.write("\t            changes=changes || thereIsPermissionCheckChanges(role);\n");
            out.write("\t\t\t}\n");
            out.write("\t\t\tif(!changes) {\n");
            out.write("\t            showDotCMSSystemMessage(noPermissionsSavedMsg);\n");
            out.write("\t            return;\n");
            out.write("\t        }\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tchangesMadeToPermissions =false;\n");
            out.write("\t\tvar cascade = false;\n");
            out.write("\t\tif(isParentPermissionable) {\n");
            out.write("\t\t\tcascade = dijit.byId('cascadeChangesCheckbox').attr('value') == 'on';\n");
            out.write("\t\t\tdijit.byId('cascadeChangesCheckbox').attr('value', false);\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tif(cascade && !confirm(cascadePermissionsConfirm))\n");
            out.write("\t\t\treturn;\n");
            out.write("\n");
            out.write("\t\tvar permissionsToSubmit = [];\n");
            out.write("\t\tfor(var i = 0; i < currentPermissions.length; i++) {\n");
            out.write("\t\t\tvar role = currentPermissions[i];\n");
            out.write("\t\t\tvar rolePermission = { roleId: role.id }\n");
            out.write("\t\t\trolePermission.individualPermission = retrievePermissionChecks(role.id);\n");
            out.write("\t\t\tif(isFolder || isHost) {\n");
            out.write("\t\t\t\trolePermission.foldersPermission = retrievePermissionChecks(role.id, 'folders');\n");
            out.write("\t\t\t\trolePermission.containersPermission = retrievePermissionChecks(role.id, 'containers');\n");
            out.write("\t\t\t\trolePermission.templatesPermission = retrievePermissionChecks(role.id, 'templates');\n");
            out.write("\t\t\t\trolePermission.templateLayoutsPermission = retrievePermissionChecks(role.id, 'template-layouts');\n");
            out.write("\t\t\t\trolePermission.pagesPermission = retrievePermissionChecks(role.id, 'pages');\n");
            out.write("\t\t\t\trolePermission.linksPermission = retrievePermissionChecks(role.id, 'links');\n");
            out.write("\t\t\t\trolePermission.contentPermission = retrievePermissionChecks(role.id, 'content');\n");
            out.write("\t\t\t\trolePermission.structurePermission = retrievePermissionChecks(role.id, 'structure');\n");
            out.write("\t\t\t\trolePermission.rulesPermission = retrievePermissionChecks(role.id, 'rules');\n");
            out.write("\t\t\t}\n");
            out.write("\t\t\tpermissionsToSubmit.push(rolePermission)\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tif(window.scrollTo)\n");
            out.write("\t\t\twindow.scrollTo(0,0);\t// To show lightbox effect(IE) and save content errors.\n");
            out.write("\t\tdijit.byId('savingPermissionsDialog').show();\n");
            out.write("\n");
            out.write("\t\tPermissionAjax.saveAssetPermissions(assetId, languageId, permissionsToSubmit, cascade, dojo.hitch(this, savePermissionsCallback, assetId, permissionsToSubmit, cascade));\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction savePermissionsCallback(assetId, permissionsToSubmit, cascade) {\n");
            out.write("\t\tdijit.byId('savingPermissionsDialog').hide();\n");
            out.write("\n");
            out.write("\t\tshowDotCMSSystemMessage(permissionsSavedMsg);\n");
            out.write("\n");
            out.write("\t\tloadPermissions();\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction removePermissionsRoleAccordion(role) {\n");
            out.write("\n");
            out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits(null, role.roleId))\n");
            out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('folders', role.roleId))\n");
            out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('containers', role.roleId))\n");
            out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('templates', role.roleId))\n");
            out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('template-layouts', role.roleId))\n");
            out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('pages', role.roleId))\n");
            out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('links', role.roleId))\n");
            out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('content', role.roleId))\n");
            out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('structure', role.roleId))\n");
            out.write("\t\tdestroyCheckboxes(getPermissionCheckboxDijits('rules', role.roleId))\n");
            out.write("\n");
            out.write("\t\tvar containerPane = dijit.byId('permissionsAccordionPane-' + role.roleId);\n");
            out.write("\t\taccordionContainer.removeChild(containerPane);\n");
            out.write("\t\tcontainerPane.destroy();\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction destroyCheckboxes(checkboxesList) {\n");
            out.write("\t\tif(checkboxesList.addChildrenPermissionCheckbox) checkboxesList.addChildrenPermissionCheckbox.destroy();\n");
            out.write("\t\tif(checkboxesList.editPermissionCheckbox) checkboxesList.editPermissionCheckbox.destroy();\n");
            out.write("\t\tif(checkboxesList.editPermissionsPermissionCheckbox) checkboxesList.editPermissionsPermissionCheckbox.destroy();\n");
            out.write("\t\tif(checkboxesList.publishPermissionCheckbox) checkboxesList.publishPermissionCheckbox.destroy();\n");
            out.write("\t\tif(checkboxesList.viewPermissionCheckbox) checkboxesList.viewPermissionCheckbox.destroy();\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction checkRolePermissionsRemoved(permissionSet) {\n");
            out.write("\n");
            out.write("\t\tvar rolesRemoved = new Array();\n");
            out.write("\t\tfor(var i = 0; i < permissionSet.length; i++) {\n");
            out.write("\n");
            out.write("\t\t\tvar rolePermission = permissionSet[i];\n");
            out.write("\t\t\tif((rolePermission.individualPermission |\n");
            out.write("\t\t\t\t\trolePermission.foldersPermission |\n");
            out.write("\t\t\t\t\trolePermission.containersPermission |\n");
            out.write("\t\t\t\t\trolePermission.templatesPermission |\n");
            out.write("\t\t\t\t\trolePermission.templateLayoutsPermission |\n");
            out.write("\t\t\t\t\trolePermission.pagesPermission |\n");
            out.write("\t\t\t\t\trolePermission.linksPermission |\n");
            out.write("\t\t\t\t\trolePermission.contentPermission |\n");
            out.write("\t\t\t\t\trolePermission.structurePermission |\n");
            out.write("\t\t\t\t\trolePermission.rulesPermission) == 0) {\n");
            out.write("\t\t\t\trolesRemoved.push(rolePermission);\n");
            out.write("\t\t\t}\n");
            out.write("\n");
            out.write("\t\t}\n");
            out.write("\t\treturn rolesRemoved;\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction retrievePermissionChecks(id, type) {\n");
            out.write("\n");
            out.write("\t\tvar permission = 0;\n");
            out.write("\n");
            out.write("\t\tvar prefix = '';\n");
            out.write("\t\tif(type) prefix = type + \"-\";\n");
            out.write("\n");
            out.write("\t\tif(isPermissionChecked(prefix + 'view-permission-' + id))\n");
            out.write("\t\t\tpermission = permission | viewPermission;\n");
            out.write("\t\tif(isPermissionChecked(prefix + 'add-children-permission-' + id))\n");
            out.write("\t\t\tpermission = permission | addChildrenPermission;\n");
            out.write("\t\tif(isPermissionChecked(prefix + 'edit-permission-' + id))\n");
            out.write("\t\t\tpermission = permission | editPermission;\n");
            out.write("\t\tif(isPermissionChecked(prefix + 'publish-permission-' + id))\n");
            out.write("\t\t\tpermission = permission | publishPermission;\n");
            out.write("\t\tif(isPermissionChecked(prefix + 'edit-permissions-permission-' + id))\n");
            out.write("\t\t\tpermission = permission | editPermissionsPermission;\n");
            out.write("\n");
            out.write("\t\treturn permission;\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction isPermissionChecked(id){\n");
            out.write("\t\tif (dijit.byId(id) && dijit.byId(id).attr('value') == 'on'){\n");
            out.write("\t\t\t// Check if the checkbox element is visible (https://github.com/dotCMS/core/issues/9659)\n");
            out.write("\t\t\tvar elem = document.getElementById(id);\n");
            out.write("\t\t\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n");
            out.write("\t\t} else {\n");
            out.write("\t\t\treturn false;\n");
            out.write("\t\t}\n");
            out.write("\t}\n");
            out.write("\t\n");
            out.write("\tfunction thereIsPermissionCheckChanges(item) {\n");
            out.write("\t\tvar id=item.id;\n");
            out.write("\n");
            out.write("        // check individual permission changes\n");
            out.write("        if(dijit.byId('view-permission-' + id) &&\n");
            out.write("                ((dijit.byId('view-permission-' + id).attr('value') == 'on' && item.viewPermissionChecked==\"\") ||\n");
            out.write("                 (dijit.byId('view-permission-' + id).attr('value') == false && item.viewPermissionChecked!=\"\")))\n");
            out.write("            return true;\n");
            out.write("        if(dijit.byId('add-children-permission-' + id) &&\n");
            out.write("                ((dijit.byId('add-children-permission-' + id).attr('value') == 'on' && item.addChildrenPermissionChecked==\"\") ||\n");
            out.write("                 (dijit.byId('add-children-permission-' + id).attr('value') == false && item.addChildrenPermissionChecked!=\"\")))\n");
            out.write("            return true;\n");
            out.write("        if(dijit.byId('edit-permission-' + id) &&\n");
            out.write("                ((dijit.byId('edit-permission-' + id).attr('value') == 'on' && item.editPermissionChecked==\"\") ||\n");
            out.write("                 (dijit.byId('edit-permission-' + id).attr('value') == false && item.editPermissionChecked!=\"\")))\n");
            out.write("            return true;\n");
            out.write("        if(dijit.byId('edit-permission-' + id) &&\n");
            out.write("                ((dijit.byId('edit-permission-' + id).attr('value') == 'on' && item.editPermissionChecked==\"\") ||\n");
            out.write("                 (dijit.byId('edit-permission-' + id).attr('value') == false && item.editPermissionChecked!=\"\")))\n");
            out.write("            return true;\n");
            out.write("        if(dijit.byId('publish-permission-' + id) &&\n");
            out.write("                ((dijit.byId('publish-permission-' + id).attr('value') == 'on' && item.publishPermissionChecked==\"\") ||\n");
            out.write("                 (dijit.byId('publish-permission-' + id).attr('value') == false && item.publishPermissionChecked!=\"\")))\n");
            out.write("            return true;\n");
            out.write("        if(dijit.byId('edit-permissions-permission-' + id) &&\n");
            out.write("                ((dijit.byId('edit-permissions-permission-' + id).attr('value') == 'on' && item.editPermissionsPermissionChecked==\"\") ||\n");
            out.write("                 (dijit.byId('edit-permissions-permission-' + id).attr('value') == false && item.editPermissionsPermissionChecked!=\"\")))\n");
            out.write("            return true;\n");
            out.write("\n");
            out.write("        var changedType=function(item,type) {\n");
            out.write("            if(dijit.byId(type+'-view-permission-' + id) &&\n");
            out.write("                    ((dijit.byId(type+'-view-permission-' + id).attr('value') == 'on' && item[type+'ViewPermissionChecked']==\"\") ||\n");
            out.write("                     (dijit.byId(type+'-view-permission-' + id).attr('value') == false && item[type+'ViewPermissionChecked']!=\"\")))\n");
            out.write("                return true;\n");
            out.write("            if(dijit.byId(type+'-add-children-permission-' + id) &&\n");
            out.write("                    ((dijit.byId(type+'-add-children-permission-' + id).attr('value') == 'on' && item[type+'AddChildrenPermissionChecked']==\"\") ||\n");
            out.write("                     (dijit.byId(type+'-add-children-permission-' + id).attr('value') == false && item[type+'AddChildrenPermissionChecked']!=\"\")))\n");
            out.write("                return true;\n");
            out.write("            if(dijit.byId(type+'-edit-permission-' + id) &&\n");
            out.write("                    ((dijit.byId(type+'-edit-permission-' + id).attr('value') == 'on' && item[type+'EditPermissionChecked']==\"\") ||\n");
            out.write("                     (dijit.byId(type+'-edit-permission-' + id).attr('value') == false && item[type+'EditPermissionChecked']!=\"\")))\n");
            out.write("                return true;\n");
            out.write("            if(dijit.byId(type+'-edit-permission-' + id) &&\n");
            out.write("                    ((dijit.byId(type+'-edit-permission-' + id).attr('value') == 'on' && item[type+'EditPermissionChecked']==\"\") ||\n");
            out.write("                     (dijit.byId(type+'-edit-permission-' + id).attr('value') == false && item[type+'EditPermissionChecked']!=\"\")))\n");
            out.write("                return true;\n");
            out.write("            if(dijit.byId(type+'-publish-permission-' + id) &&\n");
            out.write("                    ((dijit.byId(type+'-publish-permission-' + id).attr('value') == 'on' && item[type+'PublishPermissionChecked']==\"\") ||\n");
            out.write("                     (dijit.byId(type+'-publish-permission-' + id).attr('value') == false && item[type+'PublishPermissionChecked']!=\"\")))\n");
            out.write("                return true;\n");
            out.write("            if(dijit.byId(type+'-edit-permissions-permission-' + id) &&\n");
            out.write("                    ((dijit.byId(type+'-edit-permissions-permission-' + id).attr('value') == 'on' && item[type+'EditPermissionsPermissionChecked']==\"\") ||\n");
            out.write("                     (dijit.byId(type+'-edit-permissions-permission-' + id).attr('value') == false && item[type+'EditPermissionsPermissionChecked']!=\"\")))\n");
            out.write("                return true;\n");
            out.write("        }\n");
            out.write("\n");
            out.write("        types=['hosts','folders','containers','templates', 'template-layouts','pages','links','structure','content','categories', 'rules'];\n");
            out.write("\n");
            out.write("        for(var i=0;i<types.length;i++)\n");
            out.write("            if(changedType(item,types[i]))\n");
            out.write("                return true;\n");
            out.write("\n");
            out.write("        return false;\n");
            out.write("    }\n");
            out.write("\n");
            out.write("\tfunction viewPermissionChanged (type, id) {\n");
            out.write("       changesMadeToPermissions=true;\n");
            out.write("\t\tvar checkboxes = getPermissionCheckboxDijits(type, id);\n");
            out.write("\n");
            out.write("\t\tif(checkboxes.viewPermissionCheckbox.attr('value') != 'on') {\n");
            out.write("\t\t\tif(checkboxes.addChildrenPermissionCheckbox) checkboxes.addChildrenPermissionCheckbox.attr('value', false);\n");
            out.write("\t\t\tif(checkboxes.editPermissionCheckbox) checkboxes.editPermissionCheckbox.attr('value', false);\n");
            out.write("\t\t\tif(checkboxes.publishPermissionCheckbox) checkboxes.publishPermissionCheckbox.attr('value', false);\n");
            out.write("\t\t\tif(checkboxes.editPermissionsPermissionCheckbox) checkboxes.editPermissionsPermissionCheckbox.attr('value', false);\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction addChildrenPermissionChanged (type, id) {\n");
            out.write("\t\tchangesMadeToPermissions=true;\n");
            out.write("\t\tvar checkboxes = getPermissionCheckboxDijits(type, id);\n");
            out.write("\n");
            out.write("\t\tif(checkboxes.addChildrenPermissionCheckbox.attr('value') == 'on') {\n");
            out.write("\t\t\tif(checkboxes.viewPermissionCheckbox) checkboxes.viewPermissionCheckbox.attr('value', 'on');\n");
            out.write("\t\t}\n");
            out.write("\t\telse {\n");
            out.write("\t\t\tif(checkboxes.editPermissionCheckbox) checkboxes.editPermissionCheckbox.attr('value', false);\n");
            out.write("\t\t\tif(checkboxes.publishPermissionCheckbox) checkboxes.publishPermissionCheckbox.attr('value', false);\n");
            out.write("\t\t\tif(checkboxes.editPermissionsPermissionCheckbox) checkboxes.editPermissionsPermissionCheckbox.attr('value', false);\n");
            out.write("\t\t}\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction editPermissionChanged (type, id) {\n");
            out.write("\t\tchangesMadeToPermissions=true;\n");
            out.write("\t\tvar checkboxes = getPermissionCheckboxDijits(type, id);\n");
            out.write("\n");
            out.write("\t\tif(checkboxes.editPermissionCheckbox.attr('value') == 'on') {\n");
            out.write("\t\t\tif(checkboxes.viewPermissionCheckbox) checkboxes.viewPermissionCheckbox.attr('value', 'on');\n");
            out.write("\t\t\tif(checkboxes.addChildrenPermissionCheckbox) checkboxes.addChildrenPermissionCheckbox.attr('value', 'on');\n");
            out.write("\t\t} else {\n");
            out.write("\t\t\tif(checkboxes.publishPermissionCheckbox) checkboxes.publishPermissionCheckbox.attr('value', false);\n");
            out.write("\t\t\tif(checkboxes.editPermissionsPermissionCheckbox) checkboxes.editPermissionsPermissionCheckbox.attr('value', false);\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction publishPermissionChanged (type, id) {\n");
            out.write("\t\tchangesMadeToPermissions=true;\n");
            out.write("\t\tvar checkboxes = getPermissionCheckboxDijits(type, id);\n");
            out.write("\n");
            out.write("\t\tif(checkboxes.publishPermissionCheckbox.attr('value') == 'on') {\n");
            out.write("\t\t\tif(checkboxes.viewPermissionCheckbox) checkboxes.viewPermissionCheckbox.attr('value', 'on');\n");
            out.write("\t\t\tif(checkboxes.addChildrenPermissionCheckbox) checkboxes.addChildrenPermissionCheckbox.attr('value', 'on');\n");
            out.write("\t\t\tif(checkboxes.editPermissionCheckbox) checkboxes.editPermissionCheckbox.attr('value', 'on');\n");
            out.write("\t\t} else {\n");
            out.write("\t\t\tif(checkboxes.editPermissionsPermissionCheckbox) checkboxes.editPermissionsPermissionCheckbox.attr('value', false);\n");
            out.write("\t\t}\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction editPermissionsPermissionChanged (type, id) {\n");
            out.write("\t\tchangesMadeToPermissions=true;\n");
            out.write("\t\tvar checkboxes = getPermissionCheckboxDijits(type, id);\n");
            out.write("\n");
            out.write("\t\tif(checkboxes.editPermissionsPermissionCheckbox.attr('value') == 'on') {\n");
            out.write("\t\t\tif(checkboxes.viewPermissionCheckbox) checkboxes.viewPermissionCheckbox.attr('value', 'on');\n");
            out.write("\t\t\tif(checkboxes.addChildrenPermissionCheckbox) checkboxes.addChildrenPermissionCheckbox.attr('value', 'on');\n");
            out.write("\t\t\tif(checkboxes.editPermissionCheckbox) checkboxes.editPermissionCheckbox.attr('value', 'on');\n");
            out.write("\t\t\tif(checkboxes.publishPermissionCheckbox) checkboxes.publishPermissionCheckbox.attr('value', 'on');\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction addRoleToPermissions(role) {\n");
            out.write("\n");
            out.write("\t\tdojo.style('permissionsAccordionContainer', { display: '' })\n");
            out.write("\n");
            out.write("\t\tif(!role)\n");
            out.write("\t\t\trole = dijit.byId('permissionsRoleSelector').attr('selectedItem');\n");
            out.write("\n");
            out.write("\t\trole.id = norm(role.id);\n");
            out.write("\t\trole.DBFQN = norm(role.DBFQN);\n");
            out.write("\t\trole.FQN = norm(role.FQN);\n");
            out.write("\t\trole.description = norm(role.description);\n");
            out.write("\t\trole.editLayouts = norm(role.editLayouts);\n");
            out.write("\t\trole.editPermissions = norm(role.editPermissions);\n");
            out.write("\t\trole.editUsers = norm(role.editUsers);\n");
            out.write("\t\trole.locked = norm(role.locked);\n");
            out.write("\t\trole.name = norm(role.name);\n");
            out.write("\t\trole.roleKey = norm(role.roleKey);\n");
            out.write("\t\trole.system = norm(role.system);\n");
            out.write("\n");
            out.write("\t\tif(!role.editPermissions) {\n");
            out.write("\t\t\talert(roleNotRequiredPermissions);\n");
            out.write("\t\t\treturn;\n");
            out.write("\t\t}\n");
            out.write("\t\tif(role.locked) {\n");
            out.write("\t\t\talert(roleLockedForPermissions);\n");
            out.write("\t\t\treturn;\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tif(findRole(role.id, currentPermissions)) {\n");
            out.write("\t\t\talert(roleAlreadyInListMesg);\n");
            out.write("\t\t\treturn;\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\trole.permissions = [];\n");
            out.write("\t\tcurrentPermissions.push(role);\n");
            out.write("\t\taddTemplatePermissionOptions(role, role.permissions);\n");
            out.write("\t\taddPermissionsAccordionPane(role);\n");
            out.write("\t    initPermissionsAccordionPane(role);\n");
            out.write("\t\tadjustAccordionHeigth();\n");
            out.write("\t\tselectAccordionPane(role.id);\n");
            out.write("\n");
            out.write("\t\tdojo.query(\".accordionEntry\").forEach(function(node, index, arr){\n");
            out.write("\t\t\tnode.className = \"permissionTable\";\n");
            out.write("\t\t });\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction addUserToPermissions() {\n");
            out.write("\t\tif(dijit.byId('permissionsUserSelector').attr('value') == '') {\n");
            out.write("\t\t\treturn;\n");
            out.write("\t\t}\n");
            out.write("\t\tvar userId = dijit.byId('permissionsUserSelector').attr('value').split('-')[1];\n");
            out.write("\t\tRoleAjax.getUserRole(userId, addUserToPermissionCallback);\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction addUserToPermissionCallback(role) {\n");
            out.write("\t\taddRoleToPermissions(role);\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction selectAccordionPane(id) {\n");
            out.write("\t\taccordionContainer.selectChild(dijit.byId('permissionsAccordionPane-' + id));\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction permissionsIndividually () {\n");
            out.write("\n");
            out.write("\t   if(assetType == 'com.dotmarketing.portlets.folders.model.Folder' ||\n");
            out.write("\t\t\t   assetType == 'com.dotmarketing.beans.Host') {\n");
            out.write("\t\t\tdijit.byId('savingPermissionsDialog').show();\n");
            out.write("\t\t\tchangesMadeToPermissions=false;\n");
            out.write("\t\t\tPermissionAjax.permissionIndividually(assetId, languageId, permissionIndividuallyCallback);\n");
            out.write("\n");
            out.write("\t   }else{\n");
            out.write("\n");
            out.write("\t\tdojo.forEach(currentPermissions, function (role) {\n");
            out.write("\t\t\tif(!role.editPermissions) {\n");
            out.write("\t\t\t\treturn;\n");
            out.write("\t\t\t}\n");
            out.write("\t\t\tif(role.locked) {\n");
            out.write("\t\t\t\treturn;\n");
            out.write("\t\t\t}\n");
            out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits(null, role.id))\n");
            out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('folders', role.id))\n");
            out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('containers', role.id))\n");
            out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('templates', role.id))\n");
            out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('template-layouts', role.id))\n");
            out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('pages', role.id))\n");
            out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('links', role.id))\n");
            out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('content', role.id))\n");
            out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('structure', role.id))\n");
            out.write("\t\t\tenableCheckboxes(getPermissionCheckboxDijits('rules', role.id))\n");
            out.write("\t\t});\n");
            out.write("\t\tdojo.style('permissionsTabFt', { display: '' });\n");
            out.write("\t\tdojo.style('inheritingFrom', { display: 'none' });\n");
            out.write("\t\tdojo.style('permissionIndividuallyButtonWrapper', { display: 'none' });\n");
            out.write("\t\tdojo.style('resetPermissionButtonWrapper', { display: '' });\n");
            out.write("\t\tdojo.style('permissionsActions', { display: '' });\n");
            out.write("\t\tdojo.query(\".accordionEntry\").forEach(function(node, index, arr){\n");
            out.write("\t\t\tnode.className = \"permissionTable\";\n");
            out.write("\t\t });\n");
            out.write("\n");
            out.write("\n");
            out.write("\t\tvar cont = dijit.byId('permissionsAccordionContainer');\n");
            out.write("\n");
            out.write("\t\tcont.layout=function () {\n");
            out.write("\t\t\t// Implement _LayoutWidget.layout() virtual method.\n");
            out.write("\t\t\t// Set the height of the open pane based on what room remains.\n");
            out.write("\n");
            out.write("\t\t\tvar openPane = this.selectedChildWidget;\n");
            out.write("\n");
            out.write("\t\t\t// get cumulative height of all the title bars\n");
            out.write("\t\t\tvar totalCollapsedHeight = 0;\n");
            out.write("\t\t\tdojo.forEach(this.getChildren(), function(child){\n");
            out.write("\t\t\t\ttotalCollapsedHeight += child._buttonWidget.getTitleHeight();\n");
            out.write("\t\t\t\tif((!isFolder && !isHost)) {\n");
            out.write("\t\t\t\t\tdojo.style(child.containerNode, { padding: '0' });\n");
            out.write("\t\t\t\t}\n");
            out.write("\t\t\t});\n");
            out.write("\t\t\tvar mySize = this._contentBox;\n");
            out.write("\t\t\tif(isFolder || isHost) {\n");
            out.write("\t\t\t\tthis._verticalSpace = 200;\n");
            out.write("\t\t\t} else {\n");
            out.write("\t\t\t\tthis._verticalSpace = 0;\n");
            out.write("\t\t\t}\n");
            out.write("\n");
            out.write("\t\t\t// Memo size to make displayed child\n");
            out.write("\t\t\tthis._containerContentBox = {\n");
            out.write("\t\t\t\th: this._verticalSpace,\n");
            out.write("\t\t\t\tw: mySize.w\n");
            out.write("\t\t\t};\n");
            out.write("\n");
            out.write("\t\t\tif(openPane){\n");
            out.write("\t\t\t\topenPane.resize(this._containerContentBox);\n");
            out.write("\t\t\t}\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\n");
            out.write("\t\tadjustAccordionHeigth();\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\t\tinheritingPermissions = false;\n");
            out.write("\t\tchangesMadeToPermissions=true;\n");
            out.write("\t   }\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction enableCheckboxes (checkboxes) {\n");
            out.write("\n");
            out.write("\t\tif(checkboxes.viewPermissionCheckbox)\n");
            out.write("\t\t\tcheckboxes.viewPermissionCheckbox.attr('disabled', false);\n");
            out.write("\t\tif(checkboxes.addChildrenPermissionCheckbox)\n");
            out.write("\t\t\tcheckboxes.addChildrenPermissionCheckbox.attr('disabled', false);\n");
            out.write("\t\tif(checkboxes.editPermissionCheckbox)\n");
            out.write("\t\t\tcheckboxes.editPermissionCheckbox.attr('disabled', false);\n");
            out.write("\t\tif(checkboxes.publishPermissionCheckbox)\n");
            out.write("\t\t\tcheckboxes.publishPermissionCheckbox.attr('disabled', false);\n");
            out.write("\t\tif(checkboxes.editPermissionsPermissionCheckbox)\n");
            out.write("\t\t\tcheckboxes.editPermissionsPermissionCheckbox.attr('disabled', false);\n");
            out.write("\t\tif(dijit.byId('cascadeChangesCheckbox'))\n");
            out.write("\t\t\tdijit.byId('cascadeChangesCheckbox').attr('disabled', false);\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction resetPermissions () {\n");
            out.write("\t\tif(confirm(removeIndividualPermissionConfirm)) {\n");
            out.write("\t\t\tchangesMadeToPermissions=false;\n");
            out.write("\t\t\tdijit.byId('savingPermissionsDialog').show();\n");
            out.write("\t\t\tPermissionAjax.resetAssetPermissions(assetId, languageId, resetPermissionsCallback);\n");
            out.write("\t\t}\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction resetPermissionsCallback () {\n");
            out.write("\t\tdijit.byId('savingPermissionsDialog').hide();\n");
            out.write("\t\tloadPermissions();\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\t//Permissions tab utility functions\n");
            out.write("\tfunction findRole(roleId, roles) {\n");
            out.write("\t\tfor(var i = 0; i < roles.length; i++) {\n");
            out.write("\t\t\tif(roles[i].id == roleId) {\n");
            out.write("\t\t\t\treturn roles[i];\n");
            out.write("\t\t\t}\n");
            out.write("\t\t}\n");
            out.write("\t\treturn null;\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction removeRole(roleId, roles) {\n");
            out.write("\t\tfor(var i = 0; i < roles.length; i++) {\n");
            out.write("\t\t\tif(roles[i].id == roleId) {\n");
            out.write("\t\t\t\troles.splice(i, 1);\n");
            out.write("\t\t\t}\n");
            out.write("\t\t}\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction getPermissionCheckboxDijits (type, id) {\n");
            out.write("\t\tvar prefix = type?type + \"-\":\"\";\n");
            out.write("\t\tvar viewPermissionCheckbox = dijit.byId(prefix + 'view-permission-' + id);\n");
            out.write("\t\tvar addChildrenPermissionCheckbox = dijit.byId(prefix + 'add-children-permission-' + id);\n");
            out.write("\t\tvar editPermissionCheckbox = dijit.byId(prefix + 'edit-permission-' + id);\n");
            out.write("\t\tvar publishPermissionCheckbox = dijit.byId(prefix + 'publish-permission-' + id);\n");
            out.write("\t\tvar editPermissionsPermissionCheckbox = dijit.byId(prefix + 'edit-permissions-permission-' + id);\n");
            out.write("\t\treturn {\n");
            out.write("\t\t\tviewPermissionCheckbox: viewPermissionCheckbox,\n");
            out.write("\t\t\taddChildrenPermissionCheckbox: addChildrenPermissionCheckbox,\n");
            out.write("\t\t\teditPermissionCheckbox: editPermissionCheckbox,\n");
            out.write("\t\t\tpublishPermissionCheckbox: publishPermissionCheckbox,\n");
            out.write("\t\t\teditPermissionsPermissionCheckbox: editPermissionsPermissionCheckbox\n");
            out.write("\t\t};\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction addTemplatePermissionOptions(role, permissions){\n");
            out.write("\n");
            out.write("\t\tfillTemplatePermissionOptions(role, permissions);\n");
            out.write("\t\tfillTemplatePermissionOptions(role, permissions, hostClassName, 'hosts');\n");
            out.write("\t\tfillTemplatePermissionOptions(role, permissions, folderClassName, 'folders');\n");
            out.write("\t\tfillTemplatePermissionOptions(role, permissions, containerClassName, 'containers');\n");
            out.write("\t\tfillTemplatePermissionOptions(role, permissions, templateClassName, 'templates');\n");
            out.write("\t\tfillTemplatePermissionOptions(role, permissions, templateLayoutClassName, 'templateLayouts');\n");
            out.write("\t\tfillTemplatePermissionOptions(role, permissions, pageClassName, 'pages');\n");
            out.write("\t\tfillTemplatePermissionOptions(role, permissions, linkClassName, 'links');\n");
            out.write("\t\tfillTemplatePermissionOptions(role, permissions, contentClassName, 'content');\n");
            out.write("\t\tfillTemplatePermissionOptions(role, permissions, structureClassName, 'structure');\n");
            out.write("\t\tfillTemplatePermissionOptions(role, permissions, rulesClassName, 'rules');\n");
            out.write("\n");
            out.write("\t\trole[\"view-permission-style\"] = '';\n");
            out.write("\t\trole[\"add-children-permission-style\"] = '';\n");
            out.write("\t\trole[\"edit-permission-style\"] = '';\n");
            out.write("\t\trole[\"publish-permission-style\"] = '';\n");
            out.write("\t\trole[\"edit-permissions-permission-style\"] = '';\n");
            out.write("\t\trole[\"add-children-permission-style\"] = '';\n");
            out.write("\t\tif(assetType == 'com.dotmarketing.portlets.folders.model.Folder') {\n");
            out.write("\t\t\trole[\"publish-permission-style\"] = 'display:none';\n");
            out.write("\t\t} else if(assetType == 'com.dotmarketing.beans.Host') {\n");
            out.write("\t\t\trole[\"publish-permission-style\"] = 'display:none';\n");
            out.write("\t\t} else if(assetType == 'com.dotmarketing.portlets.structure.model.Structure') {\n");
            out.write("\t\t\trole[\"add-children-permission-style\"] = 'display: none';\n");
            out.write("\t\t} else if(assetType == 'com.dotmarketing.portlets.categories.model.Category') {\n");
            out.write("\t\t\trole[\"publish-permission-style\"] = 'display:none';\n");
            out.write("\t\t\trole[\"add-children-permission-style\"] = 'display: none';\n");
            out.write("\t\t} else if(assetType == 'com.dotmarketing.portlets.report.model.Report') {\n");
            out.write("\t\t\trole[\"publish-permission-style\"] = 'display:none';\n");
            out.write("\t\t\trole[\"add-children-permission-style\"] = 'display: none';\n");
            out.write("\t\t}\n");
            out.write("     ");
 if(UtilMethods.isSet(contentletAux) && contentletAux.getStructure().getStructureType()==Structure.STRUCTURE_TYPE_HTMLPAGE) {
            out.write("\n");
            out.write("     ");
 } 
            out.write("\n");
            out.write("\t\telse {\n");
            out.write("\t\t\trole[\"add-children-permission-style\"] = 'display: none'\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\trole[\"icon\"] = '/html/images/shim.gif';\n");
            out.write("\t\tif(!role.editPermissions || role.locked) {\n");
            out.write("\t\t\trole[\"icon\"] = '/html/images/icons/lock.png';\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\trole.hostsWillInherit = hostsWillInheritMsg;\n");
            out.write("\t\trole.foldersWillInherit = foldersWillInheritMsg;\n");
            out.write("\t\trole.containersWillInherit = containersWillInheritMsg;\n");
            out.write("\t\trole.templatesWillInherit = templatesWillInheritMsg;\n");
            out.write("\t\trole.templateLayoutsWillInherit = templateLayoutsWillInheritMsg;\n");
            out.write("\t\trole.pagesWillInherit = pagesWillInheritMsg;\n");
            out.write("\t\trole.linksWillInherit = linksWillInheritMsg;\n");
            out.write("\t\trole.contentWillInherit = contentWillInheritMsg;\n");
            out.write("\t\trole.permissionsOnChildren1=permissionsOnChildrenMsg1;\n");
            out.write("\t\trole.permissionsOnChildren2=permissionsOnChildrenMsg2;\n");
            out.write("\t\trole.structureWillInherit = structureWillInheritMsg;\n");
            out.write("\t\trole.rulesWillInherit = rulesWillInheritMsg;\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction fillTemplatePermissionOptions (role, permissions, permissionType, assetType) {\n");
            out.write("\n");
            out.write("\t\tif(!permissionType) permissionType = 'individual'\n");
            out.write("\n");
            out.write("\t\tprefix = \"view\";\n");
            out.write("\t\tif(assetType) prefix = assetType + \"View\";\n");
            out.write("\t\tif(hasPermissionSet(permissions, permissionType, viewPermission)) {\n");
            out.write("\t\t\trole[prefix + \"PermissionChecked\"] = 'checked=\"checked\"'\n");
            out.write("\t\t} else {\n");
            out.write("\t\t\trole[prefix + \"PermissionChecked\"] = ''\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tprefix = \"addChildren\";\n");
            out.write("\t\tif(assetType) prefix = assetType + \"AddChildren\";\n");
            out.write("\t\tif(hasPermissionSet(permissions, permissionType, addChildrenPermission)) {\n");
            out.write("\t\t\trole[prefix + \"PermissionChecked\"] = 'checked=\"checked\"'\n");
            out.write("\t\t} else {\n");
            out.write("\t\t\trole[prefix + \"PermissionChecked\"] = ''\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tprefix = \"edit\";\n");
            out.write("\t\tif(assetType) prefix = assetType + \"Edit\";\n");
            out.write("\t\tif(hasPermissionSet(permissions, permissionType, editPermission)) {\n");
            out.write("\t\t\trole[prefix + \"PermissionChecked\"] = 'checked=\"checked\"'\n");
            out.write("\t\t} else {\n");
            out.write("\t\t\trole[prefix + \"PermissionChecked\"] = ''\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tprefix = \"publish\";\n");
            out.write("\t\tif(assetType) prefix = assetType + \"Publish\";\n");
            out.write("\t\tif(hasPermissionSet(permissions, permissionType, publishPermission)) {\n");
            out.write("\t\t\trole[prefix + \"PermissionChecked\"] = 'checked=\"checked\"'\n");
            out.write("\t\t} else {\n");
            out.write("\t\t\trole[prefix + \"PermissionChecked\"] = ''\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tprefix = \"editPermissions\";\n");
            out.write("\t\tif(assetType) prefix = assetType + \"EditPermissions\";\n");
            out.write("\t\tif(hasPermissionSet(permissions, permissionType, editPermissionsPermission)) {\n");
            out.write("\t\t\trole[prefix + \"PermissionChecked\"] = 'checked=\"checked\"'\n");
            out.write("\t\t} else {\n");
            out.write("\t\t\trole[prefix + \"PermissionChecked\"] = ''\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t\tif(role.inherited || !doesUserHavePermissionsToEdit || role.editPermissions != true || role.locked==true) {\n");
            out.write("\t\t\t role.editPermissionDisabled = 'disabled=\"disabled\"';\n");
            out.write("\t\t} else {\n");
            out.write("\t\t\t role.editPermissionDisabled = '';\n");
            out.write("\t\t}\n");
            out.write("\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction hasPermissionSet(list, type, permission) {\n");
            out.write("\t\tfor (var i = 0; i < list.length; i++) {\n");
            out.write("\t\t\tvar perm = list[i];\n");
            out.write("\t\t\tif((perm.permission & permission) == permission && perm.type == type) {\n");
            out.write("\t\t\t\treturn true;\n");
            out.write("\t\t\t}\n");
            out.write("\t\t}\n");
            out.write("\t\treturn false;\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction norm(value) {\n");
            out.write("\t\treturn dojo.isArray(value)?value[0]:value;\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\n");
            out.write("\tfunction permissionIndividuallyCallback () {\n");
            out.write("\t\tdijit.byId('savingPermissionsDialog').hide();\n");
            out.write("\t\tloadPermissions();\n");
            out.write("\t\tdojo.style('permissionsActions', { display: '' });\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("\tfunction destroyChecks(){\n");
            out.write("\t\ttry{\n");
            out.write("\t\t   if (dijits) {\n");
            out.write("\t\t\t  for (var i = 0, n = dijits.length; i < n; i++) {\n");
            out.write("\t\t\t\t  for (var j = 0, n = dijits[i].length; j < n; j++) {\n");
            out.write("\t\t\t\t\t  dijits[i][j].destroyRecursive();\n");
            out.write("\t\t\t\t  }\n");
            out.write("\t\t\t   }\n");
            out.write("\t\t   }\n");
            out.write("\t\t}catch(ex){\n");
            out.write("\t\t\tconsole.log(ex);\n");
            out.write("\t\t}\n");
            out.write("\t}\n");
            out.write("\n");
            out.write("--></script>");
            out.write("\r\n");
            out.write("<!-- START Loading Image Div -->\r\n");
            out.write("<div id=\"loadingPermissionsAccordion\"><img src=\"/html/js/dojo/custom-build/dojox/widget/Standby/images/loading.gif\"></div>\r\n");
            out.write("<!-- END Loading Image Div -->\r\n");
            out.write("\r\n");
            out.write("<!-- START Alert Message -->\r\n");
            out.write("<div id=\"assetPermissionsMessageWrapper\" display=\"none\"></div>\r\n");
            out.write("<!-- END Message -->\r\n");
            out.write("<div id=\"assetPermissionsWrapper\">\r\n");
            out.write("\t<p class=\"permissionType\">\r\n");
            out.write("\t\t");
            out.print( LanguageUtil.get(pageContext, "Category") );
            out.write(": <b><span id=\"permCatName\"></span></b>\r\n");
            out.write("\t</p>\r\n");
            out.write("\t<!-- START Button Row -->\r\n");
            out.write("\t<div id=\"inheritingFrom\" class=\"permissions__bar-user-role\" style=\"display: none;\">\r\n");
            out.write("\t\t<div class=\"permissions__bar-user-role-main\">\r\n");
            out.write("\t\t\t<b>");
            out.print( LanguageUtil.get(pageContext, "Inheriting-Permissions-From") );
            out.write(":</b>&nbsp;\r\n");
            out.write("\t\t\t<span id=\"inheritingFromSources\"></span>\r\n");
            out.write("\t\t</div>\r\n");
            out.write("\t\t<div class=\"permissions__bar-user-role-actions\">\r\n");
            out.write("\t\t\t<span id=\"permissionIndividuallyButtonWrapper\" style=\"display:none;\">\r\n");
            out.write("\t\t\t\t<button dojoType=\"dijit.form.Button\" onclick=\"permissionsIndividually()\" type=\"button\">");
            out.print( LanguageUtil.get(pageContext, "want-to-permission-individually") );
            out.write("</button>\r\n");
            out.write("\t\t\t</span>\r\n");
            out.write("\t\t\t<div id=\"resetInheritanceMess\" style=\"display: none;\"></div>\r\n");
            out.write("\t\t</div>\r\n");
            out.write("\t</div>\r\n");
            out.write("\t<div id=\"permissionsTabFt\" class=\"permissions__bar-user-role\">\r\n");
            out.write("\r\n");
            out.write("\t\t<div class=\"permissions__bar-user-role-main\">\r\n");
            out.write("\t\t\t<div class=\"inline-form\">\r\n");
            out.write("\t\t\t\t<span class=\"rolesIcon\"></span>\r\n");
            out.write("\t\t\t\t<select id=\"permissionsRoleSelector\" dojoType=\"dotcms.dijit.form.RolesFilteringSelect\" excludeRoles=\"");
            out.print( APILocator.getRoleAPI().loadCMSAdminRole().getId());
            out.write("\"></select>\r\n");
            out.write("\t\t\t\t<button dojoType=\"dijit.form.Button\" onclick=\"addRoleToPermissions();return false;\">");
            out.print( LanguageUtil.get(pageContext, "Add-Role") );
            out.write("</button>\r\n");
            out.write("\t\t\t</div>\r\n");
            out.write("\t\t\t<div class=\"inline-form\">\r\n");
            out.write("\t\t\t\t<span class=\"userIcon\"></span>\r\n");
            out.write("\t\t\t\t<div dojoType=\"dotcms.dojo.data.UsersReadStore\" jsId=\"usersStore\" includeRoles=\"false\" style=\"margin: 0\"></div>\r\n");
            out.write("\t\t\t\t<select id=\"permissionsUserSelector\" name=\"permissionsUserSelector\" dojoType=\"dijit.form.FilteringSelect\" store=\"usersStore\" searchDelay=\"300\" pageSize=\"30\" labelAttr=\"name\" invalidMessage=\"");
            out.print( LanguageUtil.get(pageContext, "Invalid-option-selected") );
            out.write("\"></select>\r\n");
            out.write("\t\t\t\t<button dojoType=\"dijit.form.Button\" onclick=\"addUserToPermissions();return false;\">");
            out.print( LanguageUtil.get(pageContext, "Add-User") );
            out.write("</button>\r\n");
            out.write("\t\t\t</div>\r\n");
            out.write("\t\t</div>\r\n");
            out.write("\t\t<div class=\"permissions__bar-user-role-actions\">\r\n");
            out.write("\t\t\t<span id=\"resetPermissionButtonWrapper\" style=\"display:none;\">\r\n");
            out.write("\t\t\t\t<button dojoType=\"dijit.form.Button\" onclick=\"resetPermissions()\" class=\"dijitButtonDanger\">");
            out.print( LanguageUtil.get(pageContext, "reset-permissions") );
            out.write("</button>\r\n");
            out.write("\t\t\t</span>\r\n");
            out.write("\t\t</div>\r\n");
            out.write("\t</div>\r\n");
            out.write("<!-- END Button Row -->\r\n");
            out.write("<!-- START Permission Rows -->\r\n");
            out.write("\t<div class=\"permissionWrapper\">\r\n");
            out.write("\t\t<table class=\"permissionTable\">\r\n");
            out.write("\t\t    <tr>\r\n");
            out.write("\t\t        <th class=\"permissionType\">\r\n");
            out.write("\t\t        </th>\r\n");
            out.write("\t\t        <th>");
            out.print( LanguageUtil.get(pageContext, "View") );
            out.write("</th>\r\n");
            out.write("\t\t        <th>");
            out.print( LanguageUtil.get(pageContext, "Add-br-children") );
            out.write("</th>\r\n");
            out.write("\t\t        <th>");
            out.print( LanguageUtil.get(pageContext, "Edit") );
            out.write("</th>\r\n");
            out.write("\t\t        <th>");
            out.print( LanguageUtil.get(pageContext, "Publish") );
            out.write("</th>\r\n");
            out.write("\t\t        <th>");
            out.print( LanguageUtil.get(pageContext, "Edit") );
            out.write("<br/>");
            out.print( LanguageUtil.get(pageContext, "Permissions") );
            out.write("</th>\r\n");
            out.write("\t\t    </tr>\r\n");
            out.write("\t\t</table>\r\n");
            out.write("\t</div>\r\n");
            out.write("\r\n");
            out.write("\t<div id=\"permissionsAccordionContainer\" class=\"permissionWrapper\"></div>\r\n");
            out.write("\t\r\n");
            out.write("\t<div id=\"noPermissionsMessage\" class=\"noResultsMessage\" style=\"display: none\">");
            out.print( LanguageUtil.get(pageContext, "No-permissions-message") );
            out.write("</div>\r\n");
            out.write("\t\r\n");
            out.write("\t<div class=\"clear\"></div>\r\n");
            out.write("\t\r\n");
            out.write("\t<div class=\"permissions__button-row\" id=\"permissionsActions\">\r\n");
            out.write("\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" class=\"applyChangesButton\" id=\"applyChangesButton\" onClick=\"applyPermissionChanges('${id}')\">\r\n");
            out.write("\t\t\t");
            out.print( LanguageUtil.get(pageContext, "Apply-Changes") );
            out.write("\r\n");
            out.write("\t\t</button>\r\n");
            out.write("\t\t\r\n");
            out.write("\t\t<span id=\"cascadeChangesChkWrapper\" style=\"display:none;\">\r\n");
            out.write("\t\t\t<div class=\"checkbox\">\r\n");
            out.write("\t\t\t\t<input type=\"checkbox\" dojoType=\"dijit.form.CheckBox\" id=\"cascadeChangesCheckbox\" />\r\n");
            out.write("\t\t\t\t<label for=\"cascadeChangesCheckbox\">\r\n");
            out.write("\t\t\t\t\t");
            out.print( LanguageUtil.get(pageContext, "Reset-Children-Permissions") );
            out.write("&nbsp;<a href=\"javascript: ;\" id=\"resetPermissionsHintHook\">?</a>\r\n");
            out.write("\t\t\t\t</label>\r\n");
            out.write("\t\t\t\t<span dojoType=\"dijit.Tooltip\" connectId=\"resetPermissionsHintHook\" id=\"resetPermissionsHint\" class=\"fieldHint\">");
            out.print( LanguageUtil.get(pageContext, "Reset-Categories-Children-Permissions-Hint") );
            out.write("</span>\r\n");
            out.write("\t\t\t</div>\r\n");
            out.write("\t\t</span>\r\n");
            out.write("\t</div>\r\n");
            out.write("\t\t\r\n");
            out.write("\t\r\n");
            out.write("</div>\r\n");
            out.write("\r\n");
            out.write("<!-- START Saving permissions dialog -->\r\n");
            out.write("\t<div id=\"savingPermissionsDialog\" dojoType=\"dijit.Dialog\" title=\"");
            out.print( LanguageUtil.get(pageContext, "saving-permissions") );
            out.write("\" style=\"display: none;\">\r\n");
            out.write("\t\t<div dojoType=\"dijit.ProgressBar\" style=\"width:200px;text-align:center;\" indeterminate=\"true\"></div>\r\n");
            out.write("\t</div>\r\n");
            out.write("<!-- END Saving permissions dialog -->\r\n");
            out.write("\r\n");
            out.write("<!-- START Confirm Save permissions  change dialog -->\t\r\n");
            out.write("     <div dojoType=\"dijit.Dialog\" id=\"applyPermissionsChangesDialog\" title='");
            out.print(LanguageUtil.get(pageContext, "Permissions-Confirmation") );
            out.write("' style=\"display: none\">\r\n");
            out.write("     \t ");
            out.print(LanguageUtil.get(pageContext, "permissions-changes-confirmation") );
            out.write("\r\n");
            out.write("\t\t <div class=\"buttonRow\">\r\n");
            out.write("\t\t\t<button dojoType=\"dijit.form.Button\" onClick=\"dijit.byId('applyPermissionsChangesDialog').hide();\" type=\"button\">");
            out.print( LanguageUtil.get(pageContext, "No") );
            out.write("</button>\r\n");
            out.write("\t\t\t<button dojoType=\"dijit.form.Button\" onClick=\"dijit.byId('applyPermissionsChangesDialog').hide(); applyPermissionChanges('${id}'); \" type=\"button\">");
            out.print( LanguageUtil.get(pageContext, "Yes") );
            out.write("</button>\r\n");
            out.write("     \t </div>\t\t\t\t\r\n");
            out.write("     </div>\r\n");
            out.write("<!-- END Confirm Save permissions  change dialog -->");
            out.write("\n");
            out.write("\t\t\t\t</div>\n");
            out.write("\t\t\t\t<!-- END Permission Tab -->\n");
            out.write("\n");
            out.write("\t\t\t</div>\n");
            out.write("\t\t</div>\n");
            out.write("\t\t<!-- END Tabs -->\n");
            out.write("\t</div>\n");
            out.write("\n");
            out.write("\t<script language=\"Javascript\">\n");
            out.write("        /**\n");
            out.write("         focus on search box\n");
            out.write("         **/\n");
            out.write("        require([ \"dijit/focus\", \"dojo/dom\", \"dojo/domReady!\" ], function(focusUtil, dom){\n");
            out.write("            dojo.require('dojox.timing');\n");
            out.write("            t = new dojox.timing.Timer(500);\n");
            out.write("            t.onTick = function(){\n");
            out.write("                focusUtil.focus(dom.byId(\"catFilter\"));\n");
            out.write("                t.stop();\n");
            out.write("            }\n");
            out.write("            t.start();\n");
            out.write("        });\n");
            out.write("\n");
            out.write("\t</script>\n");
            out.write("\n");
            int evalDoAfterBody = _jspx_th_liferay_005fbox_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
          if (_jspx_eval_liferay_005fbox_005f0 != javax.servlet.jsp.tagext.Tag.EVAL_BODY_INCLUDE) {
            out = _jspx_page_context.popBody();
          }
        }
        if (_jspx_th_liferay_005fbox_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005fliferay_005fbox_0026_005ftop_005fbottom.reuse(_jspx_th_liferay_005fbox_005f0);
        _jspx_th_liferay_005fbox_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_005fbox_005f0, _jsp_getInstanceManager(), _jspx_th_liferay_005fbox_005f0_reused);
      }
      out.write("\n");
      out.write("\n");
      out.write("<!-- START Add Category pop up -->\n");
      out.write("<div id=\"add_category_dialog\"  dojoType=\"dijit.Dialog\" style=\"display:none;width:300px\" draggable=\"true\" title=\"");
      out.print( LanguageUtil.get(pageContext, "add-category") );
      out.write("\" >\n");
      out.write("\t<div dojoType=\"dijit.layout.ContentPane\">\n");
      out.write("\t\t<span id=\"savedMessage\"></span>\n");
      out.write("\t\t<form id=\"addCatPropertiesForm\" dojoType=\"dijit.form.Form\" style=\"max-width: 260px; max-height: 300px;\">\n");
      out.write("\t\t\t<div class=\"form-inline\">\n");
      out.write("\t\t\t\t<dl>\n");
      out.write("\t\t\t\t\t<dt><span id=\"VariableIdTitle\">");
      out.print( LanguageUtil.get(pageContext, "Variable-ID") );
      out.write(":</span></dt>\n");
      out.write("\t\t\t\t\t<dd><input id=\"addCatVelVarName\" readonly=\"true\" style=\"width:100%;\" class=\"input-text-naked\" /></dd>\n");
      out.write("\t\t\t\t</dl>\n");
      out.write("\t\t\t\t<dl>\n");
      out.write("\t\t\t\t\t<dt>");
      out.print( LanguageUtil.get(pageContext, "Name") );
      out.write(":</dt>\n");
      out.write("\t\t\t\t\t<dd><input dojoType=\"dijit.form.ValidationTextBox\" id=\"addCatName\" type=\"text\" tabindex=\"1\" required=\"true\" onblur=\"fillVelocityVarName(); \" invalidMessage=\"Required.\" maxlength=\"255\"/></dd>\n");
      out.write("\t\t\t\t</dl>\n");
      out.write("\t\t\t\t<dl>\n");
      out.write("\t\t\t\t\t<dt>");
      out.print( LanguageUtil.get(pageContext, "Key") );
      out.write(":</dt>\n");
      out.write("\t\t\t\t\t<dd><input dojoType=\"dijit.form.TextBox\" id=\"addCatKey\" type=\"text\" tabindex=\"2\" maxlength=\"255\"/></dd>\n");
      out.write("\t\t\t\t</dl>\n");
      out.write("\t\t\t\t<dl>\n");
      out.write("\t\t\t\t\t<dt>");
      out.print( LanguageUtil.get(pageContext, "keywords") );
      out.write(":</dt>\n");
      out.write("\t\t\t\t\t<dd><textarea dojoType=\"dijit.form.Textarea\" id=\"addCatKeywords\" tabindex=\"3\" style=\"min-height:100px; max-height:100px\"></textarea></dd>\n");
      out.write("\t\t\t\t</dl>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t\t<div class=\"buttonRow-right\">\n");
      out.write("            \t<button dojoType=\"dijit.form.Button\" tabindex=\"5\" onclick=\"dijit.byId('add_category_dialog').hide()\" type=\"button\" class=\"dijitButtonFlat\">");
      out.print( LanguageUtil.get(pageContext, "Cancel") );
      out.write("</button>\n");
      out.write("\t\t\t\t<button dojoType=\"dijit.form.Button\" tabindex=\"4\" onclick=\"saveOrUpdateCategory(true)\" type=\"button\">");
      out.print( LanguageUtil.get(pageContext, "Save") );
      out.write("</button>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</form>\n");
      out.write("\t</div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<!-- Import Categories Popup -->\n");
      out.write("<div id=\"importCategoriesOptions\" dojoType=\"dijit.Dialog\" style=\"display:none\" title=\"");
      out.print( LanguageUtil.get(pageContext, "import") );
      out.write("\">\n");
      out.write("\t<div dojoType=\"dijit.layout.ContentPane\" style=\"width:300px;\" class=\"box\" hasShadow=\"true\">\n");
      out.write("\t\t<dl class=\"vertical\">\n");
      out.write("\t\t\t<dt><label>");
      out.print( LanguageUtil.get(pageContext, "Import-Options") );
      out.write(":</label></dt>\n");
      out.write("\t\t\t<dd><input type=\"file\" id=\"uploadFile\" class=\"upload\"/></dd>\n");
      out.write("\t\t\t<div class=\"clear\"></div>\n");
      out.write("\n");
      out.write("\t\t\t<dt><label>");
      out.print( LanguageUtil.get(pageContext, "Import-Options") );
      out.write(":</label></dt>\n");
      out.write("\t\t\t<dd>\n");
      out.write("\t\t\t\t<input type=\"radio\" dojoType=\"dijit.form.RadioButton\" name=\"importMode\" id=\"radioOne\" checked /></span>\n");
      out.write("\t\t\t\t<label for=\"radioOne\">");
      out.print( LanguageUtil.get(pageContext, "Replace") );
      out.write("</label>\n");
      out.write("\n");
      out.write("\t\t\t\t<input type=\"radio\" dojoType=\"dijit.form.RadioButton\" name=\"importMode\" id=\"radioTwo\" />\n");
      out.write("\t\t\t\t<label for=\"radioTwo\">");
      out.print( LanguageUtil.get(pageContext, "add-edit") );
      out.write("</label>\n");
      out.write("\t\t\t</dd>\n");
      out.write("\t\t\t<div class=\"clear\"></div>\n");
      out.write("\t\t</dl>\n");
      out.write("\t\t<div class=\"buttonRow\">\n");
      out.write("\t\t\t<button dojoType=\"dijit.form.Button\" type=\"button\" onclick=\"importCategories()\" iconClass=\"uploadIcon\" >");
      out.print( LanguageUtil.get(pageContext, "import") );
      out.write("</button>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<!-- END Add Category pop up -->\n");
      out.write("\n");
      out.write("<div id=\"dotImportCategoriesDialog\" dojoType=\"dijit.Dialog\" style=\"display:none\" title=\"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Processing-Please-be-patient")) );
      out.write("\">\n");
      out.write("\t<div dojoType=\"dijit.layout.ContentPane\" style=\"width:300px;height:80px;text-align: center;vertical-align: middle;padding:20px;\" class=\"box\" hasShadow=\"true\">\n");
      out.write("\t\t<div style=\"width:300px\"  indeterminate=\"true\" id=\"indeterminateBar1\"\n");
      out.write("\t\t\t dojoType=\"dijit.ProgressBar\"></div>\n");
      out.write("\t\t<div style=\"padding:5px;text-align: center;\">\n");
      out.write("\t\t\t");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "message.category.import")) );
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("<div id=\"dotDeleteCategoriesDialog\" dojoType=\"dijit.Dialog\" style=\"display:none\" title=\"");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Processing-Please-be-patient")) );
      out.write("\">\n");
      out.write("\t<div dojoType=\"dijit.layout.ContentPane\" style=\"width:300px;height:80px;text-align: center;vertical-align: middle;padding:20px;\" class=\"box\" hasShadow=\"true\">\n");
      out.write("\t\t<div style=\"width:300px\"  indeterminate=\"true\" id=\"indeterminateBar2\"\n");
      out.write("\t\t\t dojoType=\"dijit.ProgressBar\"></div>\n");
      out.write("\t\t<div style=\"padding:5px;text-align: center;\">\n");
      out.write("\t\t\t");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "message.category.deleting")) );
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("</div>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
