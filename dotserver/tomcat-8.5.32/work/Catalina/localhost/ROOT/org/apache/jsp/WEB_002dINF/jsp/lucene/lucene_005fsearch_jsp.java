/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2019-11-28 18:43:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.lucene;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.dotmarketing.util.PortletID;
import com.liferay.util.Xss;
import java.util.List;
import com.dotmarketing.business.APILocator;
import com.dotmarketing.common.model.ContentletSearch;
import com.dotmarketing.util.PortletURLUtil;
import com.dotmarketing.portlets.contentlet.model.Contentlet;
import com.dotmarketing.business.web.WebAPILocator;
import com.liferay.portal.model.User;
import com.dotmarketing.util.UtilMethods;
import java.util.Calendar;
import com.dotmarketing.util.DateUtil;
import com.liferay.util.cal.CalendarUtil;
import java.util.ArrayList;
import com.dotcms.repackage.javax.portlet.WindowState;
import com.dotmarketing.business.Layout;
import com.liferay.portal.util.WebKeys;
import com.dotmarketing.util.URLEncoder;
import com.liferay.portal.language.LanguageUtil;
import com.dotmarketing.portlets.contentlet.util.ContentletUtil;

public final class lucene_005fsearch_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.dotmarketing.util.UtilMethods");
    _jspx_imports_classes.add("com.dotmarketing.business.web.WebAPILocator");
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageUtil");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.WindowState");
    _jspx_imports_classes.add("com.liferay.portal.util.WebKeys");
    _jspx_imports_classes.add("com.dotmarketing.business.APILocator");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("com.liferay.util.Xss");
    _jspx_imports_classes.add("com.dotmarketing.business.Layout");
    _jspx_imports_classes.add("com.dotmarketing.portlets.contentlet.util.ContentletUtil");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.dotmarketing.common.model.ContentletSearch");
    _jspx_imports_classes.add("com.dotmarketing.util.DateUtil");
    _jspx_imports_classes.add("com.liferay.util.cal.CalendarUtil");
    _jspx_imports_classes.add("com.dotmarketing.portlets.contentlet.model.Contentlet");
    _jspx_imports_classes.add("com.dotmarketing.util.PortletURLUtil");
    _jspx_imports_classes.add("com.liferay.portal.model.User");
    _jspx_imports_classes.add("com.dotmarketing.util.PortletID");
    _jspx_imports_classes.add("com.dotmarketing.util.URLEncoder");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\n");
      out.write("\n");

User user = WebAPILocator.getUserWebAPI().getLoggedInUser(request);
if(user == null){
	response.setStatus(403);
	return;
}
String query = request.getParameter("query");
if(!UtilMethods.isSet(query)){
	query = "";
}
String submitURL = com.dotmarketing.util.PortletURLUtil.getRenderURL(request,null,null,"query-tool");
String translatedQuery = "";
String sortBy = request.getParameter("sort");
String offset = request.getParameter("offset");
String limit = request.getParameter("limit");
boolean reindex = request.getParameter("reindexResults")!= null;
String userToPullID = request.getParameter("userId");
List<ContentletSearch> iresults =  null;
List<Contentlet> cons = null;
int counter = 1;
boolean userIsAdmin = false;
User userForPull = user;
long startAPISearchPull = 0;
long afterAPISearchPull = 0;
long startAPIPull = 0;
long afterAPIPull = 0;


String nastyError = null;

if(!UtilMethods.isSet(sortBy)){
	sortBy = "";
}
if(!UtilMethods.isSet(offset)){
	offset = "0";
}
if(!UtilMethods.isSet(limit)){
	limit = "20";
}

if(APILocator.getRoleAPI().doesUserHaveRole(user, APILocator.getRoleAPI().loadCMSAdminRole())){
	userIsAdmin = true;
	if(UtilMethods.isSet(userToPullID)){
		userForPull = APILocator.getUserAPI().loadUserById(userToPullID,APILocator.getUserAPI().getSystemUser(),true);
	}
}

if(!UtilMethods.isSet(userToPullID)){
	userToPullID = null;
}

if(query == null){
	query = "";
}else{

	startAPISearchPull = Calendar.getInstance().getTimeInMillis();


	try{

		afterAPISearchPull = Calendar.getInstance().getTimeInMillis();
		startAPIPull = Calendar.getInstance().getTimeInMillis();


		if (UtilMethods.isSet(query)) {
			iresults =  APILocator.getContentletAPI().searchIndex(query,new Integer(limit),new Integer(offset),sortBy,userForPull,true);
			cons = APILocator.getContentletAPI().search(query,new Integer(limit),new Integer(offset),sortBy,userForPull,true);
		}
		else {
			iresults =  new ArrayList();
			cons = new ArrayList();
		}
		afterAPIPull = Calendar.getInstance().getTimeInMillis();

		if(cons.size() > 0 && reindex){
			for(Contentlet con : cons) {
				con.setLowIndexPriority(true);
				//APILocator.getDistributedJournalAPI().addContentIndexEntryToDelete(con.getIdentifier());
				//APILocator.getDistributedJournalAPI().addContentIndexEntry(con);
			}
		}

	}
	catch(Exception pe){
		iresults = new ArrayList();
		nastyError = pe.toString();
	}
}

Layout layout = (Layout) request.getAttribute(WebKeys.LAYOUT);

String referer = new URLEncoder().encode("/c/portal/layout?p_l_id=" + layout.getId() + "&p_p_id="+PortletID.QUERY_TOOL+"&");

query = Xss.strip(query);

      out.write("\n");
      out.write("<script>\n");
      out.write("\tdojo.require(\"dijit.form.NumberTextBox\");\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<!-- START Split Screen -->\n");
      out.write("    <div dojoType=\"dijit.layout.BorderContainer\" design=\"sidebar\" gutters=\"false\" liveSplitters=\"true\" id=\"borderContainer\">\n");
      out.write("\t<!-- START Left Column -->\n");
      out.write("\t<div dojoType=\"dijit.layout.ContentPane\" id=\"filterWrapper\" splitter=\"false\" region=\"leading\" style=\"width: 400px;\" class=\"portlet-sidebar-wrapper\" >\n");
      out.write("\t    <div class=\"portlet-sidebar\">\n");
      out.write("\n");
      out.write("\t\t\t<div id=\"advancedSearch\">\n");
      out.write("\t\t\t\t<form name=\"query\" action=\"");
      out.print( submitURL );
      out.write("\" method=\"post\">\n");
      out.write("\t\t\t\t\t<dl class=\"vertical\">\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t<dt><label>");
      out.print( LanguageUtil.get(pageContext, "Lucene-Query") );
      out.write(" :</label></dt>\n");
      out.write("\t\t\t\t\t\t<dd><textarea dojoType=\"dijit.form.Textarea\" name=\"query\" style=\"width:365px;min-height: 150px;\" id=\"query\" type=\"text\">");
      out.print(UtilMethods.htmlifyString(query));
      out.write("</textarea></dd>\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t<dt><label>");
      out.print( LanguageUtil.get(pageContext, "Offset") );
      out.write(" : </label></dt>\n");
      out.write("\t\t\t\t\t\t<dd><input name=\"offset\" id=\"offset\" dojoType=\"dijit.form.NumberTextBox\" type=\"text\" value=\"");
      out.print(offset);
      out.write("\" size=\"10\" /></dd>\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t\t\t<dt><label>");
      out.print( LanguageUtil.get(pageContext, "Limit") );
      out.write(" : </label></dt>\n");
      out.write("\t\t\t\t\t\t<dd><input name=\"limit\" id=\"limit\" dojoType=\"dijit.form.NumberTextBox\" type=\"text\" value=\"");
      out.print(limit);
      out.write("\" size=\"10\" /></dd>\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t\t\t<dt><label>");
      out.print( LanguageUtil.get(pageContext, "Sort") );
      out.write(" : </label></dt>\n");
      out.write("\t\t\t\t\t\t<dd><input name=\"sort\" id=\"sort\" dojoType=\"dijit.form.TextBox\" type=\"text\" value=\"");
      out.print(sortBy);
      out.write("\" size=\"10\" /></dd>\n");
      out.write("\t\t\t\t\n");
      out.write("\t\t\t\t\t\t<dt><label>");
      out.print( LanguageUtil.get(pageContext, "UserID") );
      out.write(" : </label></dt>\n");
      out.write("\t\t\t\t\t\t<dd><input name=\"userid\" id=\"userid\" dojoType=\"dijit.form.TextBox\" type=\"text\" value=\"");
      out.print(UtilMethods.webifyString(userToPullID));
      out.write("\" size=\"40\" ");
 if(!userIsAdmin){ 
      out.write(" disabled=\"disabled\" ");
 } 
      out.write("/></dd>\n");
      out.write("\t\t\t\t\t</dl>\n");
      out.write("\t\t\t\t\t<div class=\"inline-form\">\n");
      out.write("\t\t\t\t\t\t<input name=\"reindexResults\" id=\"reindexResults\" dojoType=\"dijit.form.CheckBox\" type=\"checkbox\"  value=\"true\" ");
 if(!userIsAdmin){ 
      out.write(" disabled=\"disabled\" ");
 } 
      out.write("/>\n");
      out.write("\t\t\t\t\t\t<label>");
      out.print( LanguageUtil.get(pageContext, "Reindex-selected-contents") );
      out.write("</label>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t<div class=\"buttonRow\">\n");
      out.write("\t\t\t\t\t\t\t<button type=\"submit\" id=\"submitButton\" dojoType=\"dijit.form.Button\" value=\"Submit\">");
      out.print( LanguageUtil.get(pageContext, "Submit") );
      out.write("</button>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\n");
      out.write("\t\t\t        <script language=\"Javascript\">\n");
      out.write("\t\t\t\t\t\t/**\n");
      out.write("\t\t\t\t\t\t\tfocus on search box\n");
      out.write("\t\t\t\t\t\t**/\n");
      out.write("\t\t\t\t\t\trequire([ \"dijit/focus\", \"dojo/dom\", \"dojo/domReady!\" ], function(focusUtil, dom){\n");
      out.write("\t\t\t\t\t\t\tdojo.require('dojox.timing');\n");
      out.write("\t\t\t\t\t\t\tt = new dojox.timing.Timer(500);\n");
      out.write("\t\t\t\t\t\t\tt.onTick = function(){\n");
      out.write("\t\t\t\t\t\t\t  focusUtil.focus(dom.byId(\"query\"));\n");
      out.write("\t\t\t\t\t\t\t  t.stop();\n");
      out.write("\t\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\t\tt.start();\n");
      out.write("\t\t\t\t\t\t});\n");
      out.write("\t\t\t\t\t</script>\n");
      out.write("\t\t\t\t</form>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\n");
      out.write("\t<div dojoType=\"dijit.layout.ContentPane\" splitter=\"true\" region=\"center\" class=\"portlet-content-search\" id=\"contentWrapper\" style=\"overflow-y:auto; overflow-x:auto;\">\n");
      out.write("\t\t<div class=\"portlet-main\" style=\"margin: 35px 20px;\">\n");
      out.write("\n");
      out.write("\t\t\t");
if(UtilMethods.isSet(nastyError)){
      out.write("\n");
      out.write("\t\t\t\t<dl>\n");
      out.write("\t\t\t\t\t<dt style='color:red;'>");
      out.print( LanguageUtil.get(pageContext, "Query-Error") );
      out.write(" : </dt>\n");
      out.write("\t\t\t\t\t<dd>");
      out.print(nastyError );
      out.write("</dd>\n");
      out.write("\t\t\t\t</dl>\n");
      out.write("\n");
      out.write("\t\t\t");
}else if(iresults != null){
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t<table class=\"listingTable\">\n");
      out.write("\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t<td><strong>");
      out.print( LanguageUtil.get(pageContext, "The-total-results-are") );
      out.write(" :</strong> ");
      out.print(iresults == null ? "0" : iresults.size());
      out.write("</td>\n");
      out.write("\t\t\t\t\t<td></td>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t<td><strong>");
      out.print( LanguageUtil.get(pageContext, "Query-took") );
      out.write(" :</strong> <");
      out.print( afterAPISearchPull-startAPISearchPull );
      out.write(" ms</td>\n");
      out.write("\t\t\t\t\t<td><em>");
      out.print( LanguageUtil.get(pageContext, "This-includes-permissions-but-returns-only-the-index-objects") );
      out.write("</em></td>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t<td><strong>");
      out.print( LanguageUtil.get(pageContext, "Content-Population-took") );
      out.write(" :</strong> ");
      out.print( afterAPIPull-startAPIPull );
      out.write(" ms</td>\n");
      out.write("\t\t\t\t\t<td><em>");
      out.print( LanguageUtil.get(pageContext, "This-includes-permissions-and-returns-full-content-objects") );
      out.write("</em></td>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t</table>\n");
      out.write("\t\t\t\t<!-- <tr>\n");
      out.write("\t\t\t\t\t<td>");
      out.print( LanguageUtil.get(pageContext, "Query-is") );
      out.write(" :</td>\n");
      out.write("\t\t\t\t\t<td>");
      out.print(UtilMethods.htmlifyString(query));
      out.write("</td>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t<td>");
      out.print( LanguageUtil.get(pageContext, "Translated-query-is") );
      out.write(" :</td>\n");
      out.write("\t\t\t\t\t<td>");
      out.print(translatedQuery);
      out.write("</td>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t<td>");
      out.print( LanguageUtil.get(pageContext, "The-offset-is") );
      out.write(" :</td>\n");
      out.write("\t\t\t\t\t<td>");
      out.print(offset);
      out.write("</td>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t<td>");
      out.print( LanguageUtil.get(pageContext, "The-limit-is") );
      out.write(" :</td>\n");
      out.write("\t\t\t\t\t<td>");
      out.print(limit);
      out.write("</td>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t<td>");
      out.print( LanguageUtil.get(pageContext, "The-sort-is") );
      out.write(":</td>\n");
      out.write("\t\t\t\t\t<td>");
      out.print(sortBy);
      out.write(" </td>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t\t -->\n");
      out.write("\t\t\t</table>\n");
      out.write("\t\t\t<!--\n");
      out.write("\t\t\t<table class=\"listingTable\">\n");
      out.write("\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t<th>");
      out.print( LanguageUtil.get(pageContext, "INODE") );
      out.write("</th>\n");
      out.write("\t\t\t\t\t<th>");
      out.print( LanguageUtil.get(pageContext, "IDENTIFIER") );
      out.write("</th>\n");
      out.write("\t\t\t\t\t<th>");
      out.print( LanguageUtil.get(pageContext, "score") );
      out.write("</th>\n");
      out.write("\t\t\t\t</tr>\n");
      out.write("\t\t\t\t");
 for (ContentletSearch r : iresults){
      out.write("\n");
      out.write("\t\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print( r.getInode() );
      out.write("</td>\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print( r.getIdentifier() );
      out.write("</td>\n");
      out.write("\t\t\t\t\t\t<td>");
      out.print( r.getScore() );
      out.write("</td>\n");
      out.write("\t\t\t\t\t</tr>\n");
      out.write("\t\t\t\t");
 } 
      out.write("\n");
      out.write("\t\t\t</table>\n");
      out.write("\t\t\t-->\n");
      out.write("\n");
      out.write("\t\t\t<div id=\"results\" style=\"margin-top: 30px;\">\n");
      out.write("\t\t\t\t<table class=\"listingTable\">\n");
      out.write("\t\t\t\t\t<!--<tr>\n");
      out.write("\t\t\t\t\t\t<th colspan=\"3\">");
      out.print( LanguageUtil.get(pageContext, "INODE") );
      out.write("</th>\n");
      out.write("\t\t\t\t\t</tr>-->\n");
      out.write("\t\t\t\t\t");
if(iresults.size() >0){ 
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t");
 for(Contentlet c : cons) {
      out.write("\n");
      out.write("\t\t\t\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t\t\t\t<th><strong>");
      out.print( counter );
      out.write(".</th>\n");
      out.write("\t\t\t\t\t\t\t\t<th><strong>");
      out.print( LanguageUtil.get(pageContext, "Title") );
      out.write("</strong></th>\n");
      out.write("\t\t\t\t\t\t\t\t<th>\n");
      out.write("\t\t\t\t\t\t\t\t\t<a href=\"/c/portal/layout?p_l_id=");
      out.print(layout.getId() );
      out.write("&p_p_id=");
      out.print(PortletID.CONTENT);
      out.write("&p_p_action=1&p_p_state=maximized&p_p_mode=view&_");
      out.print(PortletID.CONTENT);
      out.write("_struts_action=/ext/contentlet/edit_contentlet&_");
      out.print(PortletID.CONTENT);
      out.write("_cmd=edit&inode=");
      out.print(c.getInode() );
      out.write("&referer=");
      out.print(referer );
      out.write("\">\n");
      out.write("\t\t\t\t\t\t\t\t\t\t");
      out.print(c.getTitle() );
      out.write("\n");
      out.write("\t\t\t\t\t\t\t\t\t</a>\n");
      out.write("\t\t\t\t\t\t\t\t</th>\n");
      out.write("\t\t\t\t\t\t\t</tr>\n");
      out.write("\t\t\t\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t\t\t\t<td></td>\n");
      out.write("\t\t\t\t\t\t\t\t<td><strong>");
      out.print( LanguageUtil.get(pageContext, "ContentType") );
      out.write(":</strong></td>\n");
      out.write("\t\t\t\t\t\t\t\t<td width=\"90%\">");
      out.print(c.getStructure().getVelocityVarName() );
      out.write("</td>\n");
      out.write("\t\t\t\t\t\t\t</tr>\n");
      out.write("\t\t\t\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t\t\t\t<td></td>\n");
      out.write("\t\t\t\t\t\t\t\t<td><strong>");
      out.print( LanguageUtil.get(pageContext, "Inode") );
      out.write(":</strong></td>\n");
      out.write("\t\t\t\t\t\t\t\t<td width=\"90%\">");
      out.print(c.getInode() );
      out.write("</td>\n");
      out.write("\t\t\t\t\t\t\t</tr>\n");
      out.write("\t\t\t\t\t\t\t<tr>\n");
      out.write("\t\t\t\t\t\t\t\t<td></td>\n");
      out.write("\t\t\t\t\t\t\t\t<td><strong>");
      out.print( LanguageUtil.get(pageContext, "Identifier") );
      out.write(":</strong></td>\n");
      out.write("\t\t\t\t\t\t\t\t<td>");
      out.print( c.getIdentifier() );
      out.write("</td>\n");
      out.write("\t\t\t\t\t\t\t</tr>\n");
      out.write("\t\t\t\t\t\t\t<!-- <tr >\n");
      out.write("\t\t\t\t\t\t\t\t<td></td>\n");
      out.write("\t\t\t\t\t\t\t\t<td colspan=\"2\">\n");
      out.write("\t\t\t\t\t\t\t\t\t<div style=\"padding-bottom: 25px;\">");
      out.print( UtilMethods.makeHtmlSafe(ContentletUtil.getContentPrintableMap(user, c).toString()) );
      out.write("</div>\n");
      out.write("\t\t\t\t\t\t\t\t</td>\n");
      out.write("\t\t\t\t\t\t\t</tr> -->\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t\t");
	counter++;
      out.write("\n");
      out.write("\t\t\t\t\t\t");
}
      out.write("\n");
      out.write("\t\t\t\t\t");
 }else{ 
      out.write("\n");
      out.write("\t\t\t\t\t\t<div id=\"result\" style=\"text-align:center; padding: 40px;\">");
      out.print( LanguageUtil.get(pageContext, "No-Results") );
      out.write("</div>\n");
      out.write("\t\t\t\t\t");
} 
      out.write("\n");
      out.write("\t\t\t\t</table>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t");
} 
      out.write("\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("</div>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
