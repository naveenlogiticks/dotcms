/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2019-11-28 18:41:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp.tag_005fmanager;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.dotmarketing.util.Config;
import java.util.List;
import com.dotmarketing.util.PortletURLUtil;
import com.dotmarketing.portlets.contentlet.model.Contentlet;
import com.dotmarketing.business.web.WebAPILocator;
import com.dotmarketing.business.APILocator;
import com.dotmarketing.beans.Host;
import com.liferay.portal.model.User;
import com.dotmarketing.util.UtilMethods;
import java.io.PrintWriter;
import com.dotmarketing.util.DateUtil;
import com.liferay.util.cal.CalendarUtil;
import com.dotmarketing.tag.ajax.TagAjax;
import com.dotmarketing.tag.model.Tag;
import java.util.ArrayList;
import com.dotcms.repackage.javax.portlet.WindowState;
import com.dotmarketing.business.Layout;
import com.dotmarketing.util.WebKeys;
import com.dotmarketing.util.URLEncoder;
import com.liferay.portal.language.LanguageUtil;
import com.liferay.portlet.ActionRequestImpl;
import com.liferay.portlet.ActionResponseImpl;
import com.liferay.portal.util.ReleaseInfo;
import com.dotcms.repackage.javax.portlet.ActionRequest;
import com.dotcms.repackage.javax.portlet.ActionResponse;
import com.dotcms.repackage.javax.portlet.PortletConfig;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.lang.Exception;
import com.dotcms.repackage.org.apache.struts.action.ActionForm;
import com.dotcms.repackage.org.apache.struts.action.ActionMapping;

public final class tag_005fmanager_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.dotmarketing.util.UtilMethods");
    _jspx_imports_classes.add("com.liferay.portal.util.ReleaseInfo");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.ActionRequest");
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageUtil");
    _jspx_imports_classes.add("com.dotcms.repackage.org.apache.struts.action.ActionForm");
    _jspx_imports_classes.add("com.dotmarketing.util.Config");
    _jspx_imports_classes.add("com.dotmarketing.business.APILocator");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("com.dotmarketing.business.Layout");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletRequest");
    _jspx_imports_classes.add("com.dotmarketing.tag.ajax.TagAjax");
    _jspx_imports_classes.add("com.dotmarketing.portlets.contentlet.model.Contentlet");
    _jspx_imports_classes.add("com.liferay.portlet.ActionRequestImpl");
    _jspx_imports_classes.add("com.dotmarketing.util.PortletURLUtil");
    _jspx_imports_classes.add("com.liferay.portal.model.User");
    _jspx_imports_classes.add("com.dotmarketing.util.WebKeys");
    _jspx_imports_classes.add("com.dotmarketing.util.URLEncoder");
    _jspx_imports_classes.add("com.dotcms.repackage.org.apache.struts.action.ActionMapping");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletConfig");
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("javax.servlet.http.HttpSession");
    _jspx_imports_classes.add("com.dotmarketing.business.web.WebAPILocator");
    _jspx_imports_classes.add("com.dotmarketing.tag.model.Tag");
    _jspx_imports_classes.add("javax.servlet.http.HttpServletResponse");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.WindowState");
    _jspx_imports_classes.add("com.dotmarketing.beans.Host");
    _jspx_imports_classes.add("java.lang.Exception");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.ActionResponse");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.dotmarketing.util.DateUtil");
    _jspx_imports_classes.add("com.liferay.util.cal.CalendarUtil");
    _jspx_imports_classes.add("com.liferay.portlet.ActionResponseImpl");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\">\n");
      out.write("\n");

    List<Host> allHosts = APILocator.getHostAPI().findAll(APILocator.getUserAPI().getSystemUser(),true);
    String dojoPath = Config.getStringProperty("path.to.dojo");
    String currentHostId = request.getSession().getAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID).toString();
    Host currentHost = APILocator.getHostAPI().find(currentHostId, APILocator.getUserAPI().getSystemUser(), false);
    String currentHostStore =  currentHost.getTagStorage();
    Host hostTagStore = APILocator.getHostAPI().find(currentHostStore, APILocator.getUserAPI().getSystemUser(), false);
    String tagStoreHostIdentifier = hostTagStore.getIdentifier();
    String tagStoreHostName = hostTagStore.getHostname();
    if(tagStoreHostName != null && tagStoreHostName.equals("System Host")){
        tagStoreHostName = LanguageUtil.get(pageContext, "tag-all-hosts");
    }

      out.write("\n");
      out.write("\n");
      out.write("<style type=\"text/css\">\n");
      out.write("@import \"");
      out.print(dojoPath);
      out.write("/dojox/grid/enhanced/resources/claro/EnhancedGrid.css?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\";\n");
      out.write(".permissionWrapper{background:none;padding:0;margin:0 auto;width:90%;}\n");
      out.write("\n");
      out.write(".permissionTable{width:100%;margin:0;}\n");
      out.write(".permissionTable td, .permissionTable th{font-size:88%;width:10%;text-align:center;vertical-align:middle;font-weight:bold;padding:3px 0 0 0;}\n");
      out.write(".permissionTable th.permissionType {width:40%;padding: 0 0 0 30px;font-weight:normal;text-align:left;}\n");
      out.write(".permissionTable th.permissionTitle {padding: 0 0 0 10px;font-weight:bold;}\n");
      out.write("\n");
      out.write(".accordionEntry{width:100%;margin:0;visibility:hidden}\n");
      out.write(".accordionEntry td, .accordionEntry th{font-size:88%;width:10%;text-align:center;vertical-align:middle;font-weight:bold;padding:3px 0 0 0;}\n");
      out.write(".accordionEntry th.permissionType {width:40%;padding: 0 0 0 30px;font-weight:normal;text-align:left;}\n");
      out.write(".accordionEntry th.permissionTitle {padding: 0 0 0 10px;font-weight:bold;}\n");
      out.write("\n");
      out.write(".dotCMSRolesFilteringSelect{width:200px;overflow:hidden;display:inline;}\n");
      out.write("#assetPermissionsMessageWrapper{padding-top: 15px;color: red;text-align: center;font-weight: bolder;}\n");
      out.write("\n");
      out.write("td {font-size: 100%;}\n");
      out.write("\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\" src=\"/dwr/interface/TagAjax.js\"></script>\n");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("    dojo.require(\"dijit.Dialog\");\n");
      out.write("    dojo.require(\"dijit.form.Form\");\n");
      out.write("    dojo.require(\"dijit.form.TextBox\");\n");
      out.write("    dojo.require(\"dijit.form.Textarea\");\n");
      out.write("    dojo.require(\"dijit.form.ValidationTextBox\");\n");
      out.write("    dojo.require(\"dijit.form.Button\");\n");
      out.write("    dojo.require(\"dijit.form.CheckBox\");\n");
      out.write("    dojo.require(\"dojox.grid.EnhancedGrid\");\n");
      out.write("    //dojo.require(\"dojox.grid.enhanced.DataSelection\");\n");
      out.write("    dojo.require(\"dojox.grid.enhanced.plugins.Menu\");\n");
      out.write("    dojo.require(\"dojox.grid.enhanced.plugins.DnD\");\n");
      out.write("    dojo.require(\"dojox.grid.enhanced.plugins.NestedSorting\");\n");
      out.write("    dojo.require(\"dojox.grid.enhanced.plugins.IndirectSelection\");\n");
      out.write("    dojo.require(\"dojox.grid.enhanced.plugins.Pagination\");\n");
      out.write("    dojo.require(\"dojox.grid.enhanced.plugins.Search\");\n");
      out.write("    dojo.require(\"dojo.io.iframe\");\n");
      out.write("    dojo.require(\"dojo.data.ItemFileReadStore\");\n");
      out.write("    dojo.require(\"dojo.data.ItemFileWriteStore\");\n");
      out.write("    dojo.require(\"dojox.data.QueryReadStore\");\n");
      out.write("    dojo.require(\"dojox.timing._base\");\n");
      out.write("\n");
      out.write("\n");
      out.write("    dojo.require(\"dotcms.dijit.form.HostFolderFilteringSelect\");\n");
      out.write("    dojo.require(\"dotcms.dojo.data.UsersReadStore\");\n");
      out.write("\n");
      out.write("\n");
      out.write("    var tagNameMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "tag-name")) );
      out.write("';\n");
      out.write("    var hostMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "tag-storage-host")) );
      out.write("';\n");
      out.write("    var tagSavedMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "tag-saved")) );
      out.write("';\n");
      out.write("    var tagRemovedMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "tag-removed")) );
      out.write("';\n");
      out.write("    var confirmRemoveTagMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "confirm-remove-tag")) );
      out.write("';\n");
      out.write("    var confirmRemoveTagsMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "confirm-remove-tags")) );
      out.write("';\n");
      out.write("    var exportTagsMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "export-tags-message")) );
      out.write("';\n");
      out.write("     var noResultsMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "tag-no-search-results")) );
      out.write("';\n");
      out.write("    var allTagMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "tag-all")));
      out.write("';\n");
      out.write("    var addTagMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "add-tag")));
      out.write("';\n");
      out.write("    var editTagMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "edit-tag")));
      out.write("';\n");
      out.write("    var tagsImportedMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "message.tags.imported")));
      out.write("';\n");
      out.write("    var ImportTagMessageErrorMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "message.tags.imported.error")));
      out.write("';\n");
      out.write("    var batchDeleteMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "message.tags.delete.tags")) );
      out.write("';\n");
      out.write("    var batchDeleteErrorMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "message.tags.delete.tags.error")) );
      out.write("';\n");
      out.write("    var fileRequiredMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "message.contentlet.file.required")));
      out.write("';\n");
      out.write("    var someTagsImportFailedMsg = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "message.tags.imported.some.failed")));
      out.write("';\n");
      out.write("    \n");
      out.write("    var currentHostId = '");
      out.print(currentHostId );
      out.write("';\n");
      out.write("    var tagStoreHostIdentifier = '");
      out.print( tagStoreHostIdentifier );
      out.write("';\n");
      out.write("    var tagStoreHostName = '");
      out.print( tagStoreHostName );
      out.write("';\n");
      out.write("\n");
      out.write("\n");
      out.write("    var tagsGrid;\n");
      out.write("    var layout;\n");
      out.write("    var tagStore;\n");
      out.write("\n");
      out.write("    var isNewTag = false;\n");
      out.write("\n");
      out.write("    dojo.provide(\"TagsStore\");\n");
      out.write("\n");
      out.write("    var formatHref = function(value, index) {\n");
      out.write("        var grid = dijit.byId(\"tagsEnhancedGrid\");\n");
      out.write("        var tagId = grid.store.getValue(grid.getItem(index), 'tagId');\n");
      out.write("        var tagName = grid.store.getValue(grid.getItem(index), 'tagname');\n");
      out.write("        var hostId = grid.store.getValue(grid.getItem(index), 'hostId');\n");
      out.write("        var hostName = grid.store.getValue(grid.getItem(index), 'hostName');\n");
      out.write("        return \"<a href=\\\"javascript:tagClicked('\"+index+\"')\\\" >\"+tagName+\"</a>\";\n");
      out.write("    };\n");
      out.write("\n");
      out.write("    function createStore(params) {\n");
      out.write("        if(params==null) params = '';\n");
      out.write("\n");
      out.write("        tagStore = new dojox.data.QueryReadStore({\n");
      out.write("            url : '/JSONTags'+ encodeURI(convertStringToUnicode(params))\n");
      out.write("        });\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function createGrid() {\n");
      out.write("        layout = [{\n");
      out.write("            field: 'tagname',\n");
      out.write("            name: tagNameMsg,\n");
      out.write("            width: '30%',\n");
      out.write("            formatter: formatHref\n");
      out.write("        },\n");
      out.write("        {\n");
      out.write("            field: 'hostName',\n");
      out.write("            name: hostMsg,\n");
      out.write("            width: '70%'\n");
      out.write("        }];\n");
      out.write("\n");
      out.write("        tagsGrid = new dojox.grid.EnhancedGrid({\n");
      out.write("            jsId : \"tagsEnhancedGrid\",\n");
      out.write("            id : \"tagsEnhancedGrid\",\n");
      out.write("            rowsPerPage : 25,\n");
      out.write("            store: tagStore,\n");
      out.write("            autoWidth : true,\n");
      out.write("            initialWidth : '100%',\n");
      out.write("            autoHeight : true,\n");
      out.write("            escapeHTMLInData : false,\n");
      out.write("            structure: layout,\n");
      out.write("            dnd: true,\n");
      out.write("            plugins:{\n");
      out.write("                pagination: {\n");
      out.write("                    pageSizes : [ \"25\", \"50\", \"100\", \"All\" ],\n");
      out.write("                    description : \"45%\",\n");
      out.write("                    sizeSwitch : \"260px\",\n");
      out.write("                    pageStepper : \"30em\",\n");
      out.write("                    gotoButton : true,\n");
      out.write("                    maxPageStep : 7,\n");
      out.write("                    position : \"bottom\",\n");
      out.write("                    defaultPage: 1, defaultPageSize: 25\n");
      out.write("                },\n");
      out.write("                search : true,\n");
      out.write("                indirectSelection: { headerSelector: true }\n");
      out.write("\n");
      out.write("            }\n");
      out.write("        },\n");
      out.write("        document.createElement('div'));\n");
      out.write("\n");
      out.write("        // append the new grid\n");
      out.write("        dojo.byId('tagsGrid').appendChild(tagsGrid.domNode);\n");
      out.write("\n");
      out.write("\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    dojo.addOnLoad(function () {\n");
      out.write("\n");
      out.write("        dojo.style(dojo.byId('tagsGridWrapper'), { visibility: 'visible'});\n");
      out.write("        dojo.style(dojo.byId('loadingTagsWrapper'), { display: 'none'});\n");
      out.write("\n");
      out.write("        //create store\n");
      out.write("        createStore();\n");
      out.write("\n");
      out.write("        //create grid\n");
      out.write("        createGrid();\n");
      out.write("\n");
      out.write("         // Call startup, in order to render the grid:\n");
      out.write("         tagsGrid.startup();\n");
      out.write("\n");
      out.write("         dojo.connect(dijit.byId(\"addTagDialog\"), \"hide\", function (evt) {\n");
      out.write("                dojo.byId(\"savedMessage\").innerHTML = \"\";\n");
      out.write("            });\n");
      out.write("\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        function resetSearch() {\n");
      out.write("            dijit.byId(\"showGlobal\").set('checked',false);\n");
      out.write("            document.getElementById(\"globalFilter\").value='0';\n");
      out.write("            var grid = dijit.byId(\"tagsEnhancedGrid\");\n");
      out.write("            document.getElementById(\"filterBox\").value='';\n");
      out.write("\n");
      out.write("            doSearch();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function tagClicked(index) {\n");
      out.write("            var tagId = tagStore.getValue(tagsGrid.getItem(index),'tagId');\n");
      out.write("            var tagName = tagStore.getValue(tagsGrid.getItem(index), 'tagname');\n");
      out.write("            var hostId = tagStore.getValue(tagsGrid.getItem(index), 'hostId');\n");
      out.write("            var hostName = tagStore.getValue(tagsGrid.getItem(index), 'hostName');\n");
      out.write("\n");
      out.write("            dijit.byId('addTagDialog').set('title',editTagMsg);\n");
      out.write("            dijit.byId('deleteButton').set('disabled',false);\n");
      out.write("\n");
      out.write("            dijit.byId('addTagDialog').show();\n");
      out.write("            dojo.byId('addTagErrorMessagesList').innerHTML = '';\n");
      out.write("\n");
      out.write("            dijit.byId('tagName').set('value', tagName);\n");
      out.write("            document.getElementById('tagId').value = tagId;\n");
      out.write("            document.getElementById('tagStorage').value = hostId;\n");
      out.write("            document.getElementById('tagStorage_dropDown').value = hostName;\n");
      out.write("\n");
      out.write("            dijit.byId('tagStorage_dropDown').set(\"disabled\",true);\n");
      out.write("            document.getElementById('tagStorage_dropDown').disabled=true;\n");
      out.write("\n");
      out.write("            isNewTag = false;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function doSearch() {\n");
      out.write("            dojo.byId('tagsGrid').innerHTML='';\n");
      out.write("            var globalFilter = (document.getElementById(\"globalFilter\").value == '1') ? '1' :'0';\n");
      out.write("            var tagNameFilter = document.getElementById(\"filterBox\").value;\n");
      out.write("\n");
      out.write("            var params = \"?tagname=\"+tagNameFilter+\"&global=\"+globalFilter;\n");
      out.write("            tagsGrid.destroy(true);\n");
      out.write("            createStore(params);\n");
      out.write("            createGrid();\n");
      out.write("            tagsGrid.startup();\n");
      out.write("\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function checkGlobalTags(){\n");
      out.write("            var globalCheck = (dijit.byId(\"showGlobal\").checked) ? '1' :'0';\n");
      out.write("            document.getElementById(\"globalFilter\").value = globalCheck;\n");
      out.write("            doSearch();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function searchTagByName() {\n");
      out.write("            var nameFilter = document.getElementById(\"filterBox\").value;\n");
      out.write("            doSearch();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("\n");
      out.write("        function updateHiddenFields (){\n");
      out.write("            var txtIndexObj = document.getElementById('tagStorage');\n");
      out.write("            txtIndexObj.value = dijit.byId('tagStorage_dropDown').get('value');\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function addNewTag() {\n");
      out.write("            isNewTag = true;\n");
      out.write("\n");
      out.write("            dijit.byId('newTagForm').reset();\n");
      out.write("            dijit.byId('addTagDialog').set('title',addTagMsg);\n");
      out.write("            dijit.byId('addTagDialog').show();\n");
      out.write("            dijit.byId('deleteButton').set('disabled',true);\n");
      out.write("            dijit.byId('tagStorage_dropDown').set(\"disabled\",false);\n");
      out.write("            document.getElementById('tagStorage_dropDown').disabled=false;\n");
      out.write("            dojo.byId('addTagErrorMessagesList').innerHTML = '';\n");
      out.write("\n");
      out.write("            document.getElementById('tagStorage').value = currentHostId;\n");
      out.write("            dijit.byId('tagStorage_dropDown').set('displayedValue', tagStoreHostName);\n");
      out.write("            console.log(\"tagStoreHostName: \" + tagStoreHostName);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("         //Handler when the user clicks the cancel button\n");
      out.write("        function cancelAddNewTag () {\n");
      out.write("            dijit.byId('addTagDialog').hide();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        //Handler to save/update the tag\n");
      out.write("        function saveTag() {\n");
      out.write("\n");
      out.write("            if(!dijit.byId('newTagForm').validate())\n");
      out.write("                return;\n");
      out.write("\n");
      out.write("            var tagId = document.getElementById('tagId').value;\n");
      out.write("            var tagName = document.getElementById('tagName').value;\n");
      out.write("\n");
      out.write("            if(tagName.indexOf(',')>-1) {\n");
      out.write("                var message = '");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "message.tags.add.tags.error")) );
      out.write("';\n");
      out.write("                dojo.byId(\"savedMessage\").innerHTML = message;\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("            //var userId = dijit.byId('userId').attr('value') == null?'':dijit.byId('userId').attr('value');\n");
      out.write("            var hostId = document.getElementById('tagStorage').value;\n");
      out.write("\n");
      out.write("            if(isNewTag)\n");
      out.write("                TagAjax.addTag(tagName, \"\" , hostId, saveTagCallback);\n");
      out.write("            else\n");
      out.write("                TagAjax.updateTag(tagId, tagName, hostId, saveTagCallback);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function saveTagCallback (data) {\n");
      out.write("            if(data[\"saveTagErrors\"] != null ) {\n");
      out.write("                console.log(data);\n");
      out.write("                dojo.byId('addTagErrorMessagesList').innerHTML = '';\n");
      out.write("                dojo.place(\"<li>\" + data[\"saveTagErrors\"] + \"</li>\", \"addTagErrorMessagesList\", \"last\");\n");
      out.write("            }else{\n");
      out.write("                dijit.byId('addTagDialog').hide();\n");
      out.write("                showDotCMSSystemMessage(tagSavedMsg);\n");
      out.write("                doSearch();\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        //Event handler then deleting a tag\n");
      out.write("        function deleteTag() {\n");
      out.write("            var tagId = document.getElementById('tagId').value;\n");
      out.write("            if(confirm(confirmRemoveTagMsg)) {\n");
      out.write("                TagAjax.deleteTag(tagId,deleteTagCallback);\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        //Callback from the server to confirm a tag deletion\n");
      out.write("        function deleteTagCallback () {\n");
      out.write("            dijit.byId('addTagDialog').hide();\n");
      out.write("            showDotCMSSystemMessage(tagRemovedMsg);\n");
      out.write("            doSearch();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function exportTags() {\n");
      out.write("            var globalCheck = (document.getElementById(\"globalFilter\").value == '1') ? '1' :'0';\n");
      out.write("            var filter = dijit.byId(\"filterBox\").value;\n");
      out.write("            var downloadPdfIframeName = \"downloadPdfIframe\";\n");
      out.write("            var iframe = dojo.io.iframe.create(downloadPdfIframeName);\n");
      out.write("            dojo.io.iframe.setSrc(iframe, \"/JSONTags?tagname=\"+filter+\"&global=\"+globalCheck+\"&action=export\", true);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function openImportTagsDialog() {\n");
      out.write("            dijit.byId('importTagsForm').reset();\n");
      out.write("            dijit.byId('importTagsDialog').show();\n");
      out.write("            dojo.byId('importTagsErrorMessagesList').innerHTML = '';\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function cancelImportTags(){\n");
      out.write("            var fu = document.getElementById('uploadFile');\n");
      out.write("            if (fu != null) {\n");
      out.write("            document.getElementById('uploadFile').outerHTML = fu.outerHTML;\n");
      out.write("            }\n");
      out.write("            dijit.byId('importTagsDialog').hide();\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function importTags(){\n");
      out.write("            var file = dwr.util.getValue('uploadFile');\n");
      out.write("            if(file.value != \"\"){\n");
      out.write("                TagAjax.importTags(file, importTagsCallback);\n");
      out.write("            }else {\n");
      out.write("                showDotCMSSystemMessage(fileRequiredMsg);\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function importTagsCallback (data) {\n");
      out.write("            if(data[\"importTagErrors\"] != null ) {\n");
      out.write("                dojo.byId('importTagsErrorMessagesList').innerHTML = '';\n");
      out.write("                dojo.place(\"<li>\" + ImportTagMessageErrorMsg + \"</li>\", \"importTagsErrorMessagesList\", \"last\");\n");
      out.write("            }else if(data[\"importSomeTagsFailed\"] != null ){\n");
      out.write("                dijit.byId('importTagsDialog').hide();\n");
      out.write("                showDotCMSSystemMessage(data['importSomeTagsFailed'] + \" \" + someTagsImportFailedMsg);\n");
      out.write("                doSearch();\n");
      out.write("            }else{\n");
      out.write("                dijit.byId('importTagsDialog').hide();\n");
      out.write("                showDotCMSSystemMessage(tagsImportedMsg);\n");
      out.write("                doSearch();\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function alterFocus(toBlur, toFocus) {\n");
      out.write("            if(toBlur.id != \"tagName\" && toBlur.id != \"tagsGridWrapper\" && toBlur.id != \"loadingTagsGridWrapper\"\n");
      out.write("                    && toBlur.id != \"tagsGrid\" && toBlur.id != \"tagsEnhancedGrid\" && toBlur.id == \"tagsEnhancedGridHdr0\"\n");
      out.write("                    || (toBlur.id == toFocus.id && toBlur.id == \"filterBox\")) {\n");
      out.write("                toBlur.blur();\n");
      out.write("                toFocus.focus();\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        // delete muliple or single category, via ajax\n");
      out.write("        function deleteTagsBatch() {\n");
      out.write("            var items = tagsGrid.selection.getSelected();\n");
      out.write("            if(items.length < 1) {\n");
      out.write("                showDotCMSSystemMessage(batchDeleteErrorMsg);\n");
      out.write("            }\n");
      out.write("            else {\n");
      out.write("\n");
      out.write("                if (confirm(confirmRemoveTagsMsg)) {\n");
      out.write("\n");
      out.write("                    dojo.forEach(items, function (selectedItem, index) {\n");
      out.write("                        if (selectedItem !== null) {\n");
      out.write("                            TagAjax.deleteTag(selectedItem.i.tagId);\n");
      out.write("                        }\n");
      out.write("                    });\n");
      out.write("                    showDotCMSSystemMessage(batchDeleteMsg);\n");
      out.write("\n");
      out.write("                    var t = new dojox.timing.Timer();\n");
      out.write("                    t.setInterval(1000);\n");
      out.write("                    t.onTick = function () {\n");
      out.write("                        t.stop();\n");
      out.write("                        doSearch();\n");
      out.write("                        tagsGrid.selection.clear();\n");
      out.write("                    };\n");
      out.write("                    t.start();\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function downloadCSVSampleFile(){\n");
      out.write("            var globalCheck = (document.getElementById(\"globalFilter\").value == '1') ? '1' :'0';\n");
      out.write("            var filter = dijit.byId(\"filterBox\").value;\n");
      out.write("            var downloadPdfIframeName = \"downloadPdfIframe\";\n");
      out.write("            var iframe = dojo.io.iframe.create(downloadPdfIframeName);\n");
      out.write("            dojo.io.iframe.setSrc(iframe, \"/JSONTags?tagname=\"+filter+\"&global=\"+globalCheck+\"&action=download\", true);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function convertStringToUnicode(name) {\n");
      out.write("              var unicodeString = '';\n");
      out.write("               for (var i=0; i < name.length; i++) {\n");
      out.write("                      if(name.charCodeAt(i) > 128){\n");
      out.write("                     var str = name.charCodeAt(i).toString(16).toUpperCase();\n");
      out.write("                         while(str.length < 4)\n");
      out.write("                            str = \"0\" + str;\n");
      out.write("                          unicodeString += \"\\\\u\" + str;\n");
      out.write("                      }else{\n");
      out.write("                      unicodeString += name[i];\n");
      out.write("                      }\n");
      out.write("                   }\n");
      out.write("              return unicodeString;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("   </script>\n");
      out.write("   \n");
      out.write("\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/html/portlet/ext/browser/sub_nav.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("<div class=\"portlet-wrapper\">\n");
      out.write("   <div class=\"portlet-main tag-manager\">\n");
      out.write("\t<div class=\"portlet-toolbar\">\n");
      out.write("\t\t<div class=\"portlet-toolbar__actions-primary\">\n");
      out.write("\t\t\t<!-- Start Filter -->\n");
      out.write("\t\t\t<div id=\"advancedSearch\">\n");
      out.write("                <div class=\"inline-form\" id=\"filters\">\n");
      out.write("\t\t            <input type=\"hidden\" name=\"host_id\" id=\"host_id\" value=\"");
      out.print((String)session.getAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID));
      out.write("\">\n");
      out.write("\t\t            <input type=\"text\" name=\"filterBox\" value=\"\" dojoType=\"dijit.form.TextBox\" placeHolder=\"Filter\" trim=\"true\" id=\"filterBox\" intermediateChanges=\"true\" onChange=\"searchTagByName();\" onBlur=\"alterFocus(document.activeElement, this);\" >\n");
      out.write("\t\t            \n");
      out.write("\t\t            <button dojoType=\"dijit.form.Button\" class=\"dijitButtonFlat\" id=\"resetButton\" onClick=\"resetSearch()\">\n");
      out.write("\t\t               ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "Reset")) );
      out.write("\n");
      out.write("\t\t            </button>\n");
      out.write("\n");
      out.write("                    <div class=\"checkbox\">\n");
      out.write("                        <input type=\"checkbox\" name=\"showGlobal\" id=\"showGlobal\" dojoType=\"dijit.form.CheckBox\" value=\"\" onChange=\"checkGlobalTags()\"/>\n");
      out.write("                        <label for=\"showGlobal\">");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "show-global-tags")) );
      out.write("</label>\n");
      out.write("                    </div>\n");
      out.write("\t\t            \n");
      out.write("\n");
      out.write("\t\t            <input type=\"hidden\" name=\"globalFilter\" id=\"globalFilter\" value=\"0\">\n");
      out.write("\t\t        </div>\n");
      out.write("\t\t    </div>\n");
      out.write("\t\t    <!-- End Filter -->\n");
      out.write("\t\t</div>\n");
      out.write("\t\t<div class=\"portlet-toolbar__info\"></div>\n");
      out.write("        <div class=\"portlet-toolbar__actions-secondary\">\n");
      out.write("        \t<!-- START Actions -->\n");
      out.write("        \t\t<form name=\"export_form\" id=\"export_form\" method=\"get\">\t\t\n");
      out.write("\t\t\t\t\t<div data-dojo-type=\"dijit/form/DropDownButton\" data-dojo-props='iconClass:\"actionIcon\", class:\"dijitDropDownActionButton\"'>\n");
      out.write("\t            \t\t<span></span>\n");
      out.write("\t\n");
      out.write("\t            \t\t<div data-dojo-type=\"dijit/Menu\" class=\"contentlet-menu-actions\">\n");
      out.write("            \t\t\t\t<div data-dojo-type=\"dijit/MenuItem\" onClick=\"addNewTag()\">\n");
      out.write("\t\t\t\t\t\t\t    ");
      out.print( LanguageUtil.get(pageContext, "add-tag") );
      out.write("\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t<div data-dojo-type=\"dijit/MenuItem\" onClick=\"openImportTagsDialog()\">\n");
      out.write("\t\t\t\t\t\t\t    ");
      out.print( LanguageUtil.get(pageContext, "import-tags") );
      out.write("\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t<div data-dojo-type=\"dijit/MenuItem\" onClick=\"exportTags()\">\n");
      out.write("\t\t\t\t\t    \t\t");
      out.print( LanguageUtil.get(pageContext, "export-tags") );
      out.write("\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t<div data-dojo-type=\"dijit/MenuItem\" onClick=\"deleteTagsBatch()\">\n");
      out.write("\t\t\t\t\t\t\t\t");
      out.print( LanguageUtil.get(pageContext, "delete-tags") );
      out.write("\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t\t<input type=\"hidden\" id=\"cmd\" value=\"none\">\n");
      out.write("\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</form>\n");
      out.write("\t\t\t<!-- End Actions -->\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\t\n");
      out.write("\t<div id=\"loadingTagsWrapper\" style=\"text-align:center\"><img src=\"/html/js/dojo/custom-build/dojox/widget/Standby/images/loading.gif\"></div>\n");
      out.write("\n");
      out.write("    <div id=\"tagsGridWrapper\" style=\"overflow-y:auto;overflow-x:hidden;\">\n");
      out.write("        <div id=\"tagsGrid\" class=\"tag-manager__tags-list\"></div>\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script language=\"Javascript\">\n");
      out.write("    /**\n");
      out.write("        focus on search box\n");
      out.write("    **/\n");
      out.write("    require([ \"dijit/focus\", \"dojo/dom\", \"dojo/domReady!\" ], function(focusUtil, dom){\n");
      out.write("        dojo.require('dojox.timing');\n");
      out.write("        t = new dojox.timing.Timer(500);\n");
      out.write("        t.onTick = function(){\n");
      out.write("          focusUtil.focus(dom.byId(\"filterBox\"));\n");
      out.write("          t.stop();\n");
      out.write("        };\n");
      out.write("        t.start();\n");
      out.write("    });\n");
      out.write("</script>\n");
      out.write(" ");
      out.write("\n");
      out.write("\n");
      out.write("<div id=\"addTagDialog\" title=\"");
      out.print( LanguageUtil.get(pageContext, "edit-tag") );
      out.write("\" dojoType=\"dijit.Dialog\" style=\"display: none;\">\n");
      out.write("    <form id=\"newTagForm\" dojoType=\"dijit.form.Form\" class=\"roleForm\">\n");
      out.write("        <div class=\"form-horizontal\">\n");
      out.write("            <dl>\n");
      out.write("                <dt>\n");
      out.write("                    <label for=\"\">");
      out.print( LanguageUtil.get(pageContext, "tag") );
      out.write(":</label>\n");
      out.write("                </dt>\n");
      out.write("                <dd>\n");
      out.write("                    <input id=\"tagName\" type=\"text\" required=\"true\" invalidMessage=\"Required.\" dojoType=\"dijit.form.ValidationTextBox\" style=\"width: 200px\" />\n");
      out.write("                </dd>\n");
      out.write("            </dl>\n");
      out.write("            <dl>\n");
      out.write("                <dt>\n");
      out.write("                    <label for=\"\">");
      out.print( LanguageUtil.get(pageContext, "Host") );
      out.write(":</label>\n");
      out.write("                </dt>\n");
      out.write("                <dd>\n");
      out.write("                    <input id=\"tagId\" type=\"hidden\" value=\" \" />\n");
      out.write("                    <input id=\"userId\" type=\"hidden\" value=\" \" />\n");
      out.write("                    <input id=\"tagStorage\" type=\"hidden\" value=\" \"/>\n");
      out.write("                    <select id=\"tagStorage_dropDown\" name=\"tagStorage_dropDown\" dojoType=\"dijit.form.FilteringSelect\" autocomplete=\"true\" invalidMessage=\"Required.\" onChange=\"verifyHiddenFields()\" style=\"width: 200px\">\n");
      out.write("                    <option value=\"SYSTEM_HOST\">");
      out.print( LanguageUtil.get(pageContext, "tag-all-hosts") );
      out.write("</option>\n");
      out.write("                    ");
for (Host h: allHosts){
                        if (!h.getIdentifier().equals(Host.SYSTEM_HOST) && h.isLive()) {
                            
      out.write("<option value=\"");
      out.print( h.getIdentifier() );
      out.write(' ');
      out.write('"');
      out.write('>');
      out.print( h.getHostname() );
      out.write("</option>");

                        }
                    }
                    
      out.write("\n");
      out.write("\n");
      out.write("                    </select>\n");
      out.write("\n");
      out.write("                    <script type=\"text/javascript\">\n");
      out.write("                        dojo.addOnLoad(verifyHiddenFields);\n");
      out.write("            \n");
      out.write("                        function verifyHiddenFields() {\n");
      out.write("                            var txtIndexObj = document.getElementById('tagStorage');\n");
      out.write("                            txtIndexObj.value = dijit.byId('tagStorage_dropDown').get('value');\n");
      out.write("                        }\n");
      out.write("                    </script>\n");
      out.write("                </dd>\n");
      out.write("            </dl>\n");
      out.write("            <dl>\n");
      out.write("                <dt></dt>\n");
      out.write("                <dd>\n");
      out.write("                    <div style=\"text-align: center\">\n");
      out.write("                            <span  id=\"savedMessage\" style=\"color:red; font-size:11px; font-family: verdana; \" >\n");
      out.write("                            </span>\n");
      out.write("\n");
      out.write("                            <ul id=\"addTagErrorMessagesList\" style=\"color:red; font-size:11px; font-family: verdana; \" ></ul>\n");
      out.write("                    </div>\n");
      out.write("                </dd>\n");
      out.write("            </dl>\n");
      out.write("        </div>\n");
      out.write("\n");
      out.write("        <div class=\"buttonRow\">\n");
      out.write("            <button dojoType=\"dijit.form.Button\" type=\"button\" onClick=\"cancelAddNewTag()\" id=\"cancelAddOrEdit\" class=\"dijitButtonFlat\">\n");
      out.write("                ");
      out.print( LanguageUtil.get(pageContext, "Cancel") );
      out.write("\n");
      out.write("            </button>\n");
      out.write("            <button dojoType=\"dijit.form.Button\" type=\"button\" onClick=\"deleteTag()\" id=\"deleteButton\" class=\"dijitButtonDanger\">\n");
      out.write("                ");
      out.print( LanguageUtil.get(pageContext, "Delete") );
      out.write("\n");
      out.write("            </button>\n");
      out.write("            <button dojoType=\"dijit.form.Button\" type=\"button\" onClick=\"saveTag()\" id=\"saveButton\">\n");
      out.write("                ");
      out.print( LanguageUtil.get(pageContext, "Save") );
      out.write("\n");
      out.write("            </button>\n");
      out.write("        </div>\n");
      out.write("    </form>\n");
      out.write("</div>\n");
      out.write('\n');
      out.write('\n');
      out.write("\n");
      out.write("\n");
      out.write("<div id=\"importTagsDialog\" title=\"");
      out.print( LanguageUtil.get(pageContext, "import-tags") );
      out.write("\" dojoType=\"dijit.Dialog\" style=\"display: none;width:500px\">\n");
      out.write("    <form id=\"importTagsForm\" dojoType=\"dijit.form.Form\" class=\"roleForm\">\n");
      out.write("        <dl>\n");
      out.write("            <dt></dt>\n");
      out.write("            <dd><ul id=\"importTagsErrorMessagesList\"></ul></dd>\n");
      out.write("        </dl>\n");
      out.write("\n");
      out.write("        <input type=\"file\" id=\"uploadFile\"  />\n");
      out.write("        <br><br>\n");
      out.write("        ");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "upload-csv-with-tags")) );
      out.write("\n");
      out.write("        <br><br>\n");
      out.write("        <div style=\"text-align:center\">\n");
      out.write("        <a onClick=\"downloadCSVSampleFile()\" href=\"#\">");
      out.print( UtilMethods.escapeSingleQuotes(LanguageUtil.get(pageContext, "download-sample-csv-file")) );
      out.write("</a>\n");
      out.write("        </div>\n");
      out.write("        <br>\n");
      out.write("        <div class=\"buttonRow\">\n");
      out.write("            <button dojoType=\"dijit.form.Button\" type=\"button\" iconClass=\"cancelIcon\" onClick=\"cancelImportTags()\" id=\"cancelImport\">\n");
      out.write("                ");
      out.print( LanguageUtil.get(pageContext, "Cancel") );
      out.write("\n");
      out.write("            </button>\n");
      out.write("            <button dojoType=\"dijit.form.Button\" type=\"button\" iconClass=\"uploadIcon\" onClick=\"importTags()\" id=\"importButton\">\n");
      out.write("                ");
      out.print( LanguageUtil.get(pageContext, "Import") );
      out.write("\n");
      out.write("            </button>\n");
      out.write("        </div>\n");
      out.write("    </form>\n");
      out.write("</div>\n");
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
