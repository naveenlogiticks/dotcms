/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2019-11-28 18:30:13 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.html.portal;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.dotmarketing.util.UtilMethods;
import com.dotmarketing.business.Layout;
import com.liferay.portal.NoSuchUserException;
import com.liferay.portal.auth.PrincipalException;
import com.liferay.portal.ejb.AddressManagerUtil;
import com.liferay.portal.ejb.CompanyLocalManagerUtil;
import com.liferay.portal.ejb.PortletManagerUtil;
import com.liferay.portal.ejb.PortletPreferencesManagerUtil;
import com.liferay.portal.ejb.UserLocalManagerUtil;
import com.liferay.portal.model.*;
import com.liferay.portal.util.Constants;
import com.liferay.portal.util.CookieKeys;
import com.liferay.portal.util.ImageKey;
import com.liferay.portal.util.OmniadminUtil;
import com.liferay.portal.util.PortalUtil;
import com.liferay.portal.util.PortletKeys;
import com.liferay.portal.util.Recipient;
import com.liferay.portal.util.RecipientComparator;
import com.liferay.portal.util.ReleaseInfo;
import com.liferay.portal.util.Resolution;
import com.liferay.portal.util.ShutdownUtil;
import com.liferay.portal.util.WebAppPool;
import com.liferay.portlet.ConcretePortletWrapper;
import com.liferay.portlet.LiferayWindowState;
import com.liferay.portlet.PortletURLImpl;
import com.liferay.portlet.RenderParametersPool;
import com.liferay.portlet.RenderRequestImpl;
import com.liferay.portlet.RenderResponseImpl;
import com.liferay.portlet.admin.ejb.AdminConfigManagerUtil;
import com.liferay.portlet.admin.model.EmailConfig;
import com.liferay.portlet.admin.model.JournalConfig;
import com.liferay.portlet.admin.model.ShoppingConfig;
import com.liferay.portlet.admin.model.UserConfig;
import com.liferay.util.BrowserSniffer;
import com.liferay.util.CollectionFactory;
import com.liferay.util.CookieUtil;
import com.liferay.util.CreditCard;
import com.liferay.util.FileUtil;
import com.liferay.util.Html;
import com.liferay.util.Http;
import com.liferay.util.JS;
import com.liferay.util.KeyValuePair;
import com.liferay.util.KeyValuePairComparator;
import com.liferay.util.MathUtil;
import com.liferay.util.ObjectValuePair;
import com.liferay.util.OrderedProperties;
import com.liferay.util.ParamUtil;
import com.liferay.util.PhoneNumber;
import com.liferay.util.PropertiesUtil;
import com.liferay.util.ServerDetector;
import com.liferay.util.SimpleCachePool;
import com.liferay.util.SortedProperties;
import com.liferay.util.State;
import com.liferay.util.StateUtil;
import com.liferay.util.StringComparator;
import com.liferay.util.StringPool;
import com.liferay.util.TextFormatter;
import com.liferay.util.Time;
import com.liferay.util.UnicodeFormatter;
import com.liferay.util.Validator;
import com.liferay.util.Xss;
import com.liferay.util.cal.CalendarUtil;
import com.liferay.util.cal.Recurrence;
import com.liferay.util.lang.BooleanWrapper;
import com.liferay.util.lang.IntegerWrapper;
import com.liferay.util.log4j.Levels;
import com.liferay.util.servlet.DynamicServletRequest;
import com.liferay.util.servlet.SessionParameters;
import com.liferay.util.servlet.StringServletResponse;
import com.liferay.util.servlet.UploadException;
import java.io.ByteArrayInputStream;
import java.io.StringReader;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.Currency;
import java.util.Date;
import java.util.Enumeration;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import com.dotcms.repackage.javax.portlet.PortletConfig;
import com.dotcms.repackage.javax.portlet.PortletContext;
import com.dotcms.repackage.javax.portlet.PortletException;
import com.dotcms.repackage.javax.portlet.PortletMode;
import com.dotcms.repackage.javax.portlet.PortletPreferences;
import com.dotcms.repackage.javax.portlet.PortletURL;
import com.dotcms.repackage.javax.portlet.UnavailableException;
import com.dotcms.repackage.javax.portlet.ValidatorException;
import com.dotcms.repackage.javax.portlet.WindowState;
import com.dotmarketing.portlets.common.bean.CrumbTrailEntry;
import java.util.HashMap;
import com.liferay.portal.language.LanguageUtil;
import com.liferay.portal.language.LanguageWrapper;
import com.liferay.portal.language.UnicodeLanguageUtil;
import com.liferay.portal.util.PropsUtil;
import com.liferay.portal.util.WebKeys;
import com.liferay.util.GetterUtil;
import com.liferay.util.StringUtil;
import com.liferay.util.servlet.SessionErrors;
import com.liferay.util.servlet.SessionMessages;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import com.dotcms.publisher.environment.bean.Environment;
import com.dotcms.publisher.bundle.bean.Bundle;
import com.liferay.portal.util.WebKeys;
import com.dotmarketing.util.Config;
import com.dotmarketing.util.UtilMethods;
import com.liferay.portal.language.LanguageUtil;
import com.dotcms.repackage.org.apache.struts.action.ActionErrors;
import java.util.HashSet;
import java.util.Set;
import com.dotcms.repackage.org.apache.struts.action.ActionErrors;
import com.liferay.portal.language.LanguageUtil;
import java.util.List;
import java.util.ArrayList;
import com.dotcms.repackage.org.apache.struts.action.ActionMessage;
import java.util.Iterator;
import com.liferay.util.servlet.SessionMessages;
import com.dotcms.repackage.org.apache.struts.action.ActionMessages;
import com.dotcms.repackage.org.apache.struts.Globals;
import com.dotmarketing.util.UtilMethods;
import com.liferay.util.servlet.SessionDialogMessage;
import java.util.Map.Entry;
import com.dotcms.repackage.org.apache.struts.action.ActionErrors;
import java.util.HashSet;
import java.util.Set;
import com.dotcms.repackage.org.apache.struts.action.ActionErrors;
import com.liferay.portal.language.LanguageUtil;
import java.util.List;
import java.util.ArrayList;
import com.dotcms.repackage.org.apache.struts.action.ActionMessage;
import java.util.Iterator;
import com.liferay.util.servlet.SessionMessages;
import com.dotcms.repackage.org.apache.struts.action.ActionMessages;
import com.dotcms.repackage.org.apache.struts.Globals;
import com.dotmarketing.util.UtilMethods;
import com.liferay.util.servlet.SessionDialogMessage;
import java.util.Map.Entry;
import com.dotcms.enterprise.LicenseUtil;
import com.liferay.portal.util.PortalUtil;
import com.liferay.util.ParamUtil;
import com.dotmarketing.util.UtilMethods;
import com.dotmarketing.util.Config;
import com.liferay.portal.language.LanguageUtil;
import com.dotmarketing.db.DbConnectionFactory;
import com.dotcms.enterprise.license.LicenseLevel;

public final class layout_005fportal_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(10);
    _jspx_dependants.put("/html/common/messages_inc.jsp", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/html/common/top_inc.jsp", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/WEB-INF/tld/struts-html.tld", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/html/common/db_enterprise_warning.jsp", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/html/common/init.jsp", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/html/common/bottom_inc.jsp", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/WEB-INF/tld/struts-tiles.tld", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-portlet.tld", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/html/common/rest_portlet_navigation_js.jsp", Long.valueOf(1570476689000L));
    _jspx_dependants.put("/WEB-INF/tld/liferay-util.tld", Long.valueOf(1570476689000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.liferay.portal.model");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.liferay.portal.util.ImageKey");
    _jspx_imports_classes.add("com.liferay.util.cal.Recurrence");
    _jspx_imports_classes.add("java.util.Arrays");
    _jspx_imports_classes.add("com.liferay.util.KeyValuePair");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("com.liferay.portal.ejb.AddressManagerUtil");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.ValidatorException");
    _jspx_imports_classes.add("com.dotmarketing.util.Config");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.EmailConfig");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletURL");
    _jspx_imports_classes.add("com.liferay.portal.ejb.CompanyLocalManagerUtil");
    _jspx_imports_classes.add("com.dotmarketing.portlets.common.bean.CrumbTrailEntry");
    _jspx_imports_classes.add("com.dotmarketing.business.Layout");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.UnavailableException");
    _jspx_imports_classes.add("com.liferay.portal.ejb.PortletManagerUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.Resolution");
    _jspx_imports_classes.add("com.liferay.portal.util.PropsUtil");
    _jspx_imports_classes.add("com.liferay.util.State");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletConfig");
    _jspx_imports_classes.add("com.liferay.util.Validator");
    _jspx_imports_classes.add("java.util.GregorianCalendar");
    _jspx_imports_classes.add("com.liferay.util.PhoneNumber");
    _jspx_imports_classes.add("com.liferay.util.BrowserSniffer");
    _jspx_imports_classes.add("com.liferay.util.JS");
    _jspx_imports_classes.add("java.util.Set");
    _jspx_imports_classes.add("com.liferay.util.servlet.UploadException");
    _jspx_imports_classes.add("com.liferay.portal.language.UnicodeLanguageUtil");
    _jspx_imports_classes.add("com.liferay.util.Xss");
    _jspx_imports_classes.add("com.liferay.util.cal.CalendarUtil");
    _jspx_imports_classes.add("com.liferay.portlet.PortletURLImpl");
    _jspx_imports_classes.add("com.liferay.util.SortedProperties");
    _jspx_imports_classes.add("com.liferay.util.GetterUtil");
    _jspx_imports_classes.add("com.dotcms.enterprise.license.LicenseLevel");
    _jspx_imports_classes.add("org.apache.commons.logging.LogFactory");
    _jspx_imports_classes.add("com.liferay.util.ParamUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.PortletKeys");
    _jspx_imports_classes.add("com.liferay.portal.NoSuchUserException");
    _jspx_imports_classes.add("com.liferay.util.log4j.Levels");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.JournalConfig");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletException");
    _jspx_imports_classes.add("com.liferay.portal.auth.PrincipalException");
    _jspx_imports_classes.add("java.util.Currency");
    _jspx_imports_classes.add("java.text.NumberFormat");
    _jspx_imports_classes.add("java.util.TreeSet");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.util.LinkedHashMap");
    _jspx_imports_classes.add("com.liferay.portlet.RenderRequestImpl");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.dotcms.enterprise.LicenseUtil");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionErrors");
    _jspx_imports_classes.add("com.liferay.util.MathUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.OmniadminUtil");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.ShoppingConfig");
    _jspx_imports_classes.add("com.liferay.portlet.RenderParametersPool");
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("com.dotcms.publisher.bundle.bean.Bundle");
    _jspx_imports_classes.add("com.liferay.portal.util.Constants");
    _jspx_imports_classes.add("com.liferay.portal.util.Recipient");
    _jspx_imports_classes.add("com.liferay.util.OrderedProperties");
    _jspx_imports_classes.add("com.liferay.portal.ejb.UserLocalManagerUtil");
    _jspx_imports_classes.add("java.io.StringReader");
    _jspx_imports_classes.add("java.util.TreeMap");
    _jspx_imports_classes.add("com.liferay.util.servlet.DynamicServletRequest");
    _jspx_imports_classes.add("com.dotmarketing.util.UtilMethods");
    _jspx_imports_classes.add("com.liferay.util.Http");
    _jspx_imports_classes.add("com.liferay.portlet.admin.model.UserConfig");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.util.Random");
    _jspx_imports_classes.add("com.liferay.portal.util.WebKeys");
    _jspx_imports_classes.add("com.dotcms.repackage.org.apache.struts.action.ActionMessages");
    _jspx_imports_classes.add("com.liferay.util.CollectionFactory");
    _jspx_imports_classes.add("com.liferay.portal.util.ShutdownUtil");
    _jspx_imports_classes.add("com.dotcms.repackage.org.apache.struts.action.ActionErrors");
    _jspx_imports_classes.add("com.liferay.portal.ejb.PortletPreferencesManagerUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.PortalUtil");
    _jspx_imports_classes.add("com.liferay.util.StringPool");
    _jspx_imports_classes.add("java.io.ByteArrayInputStream");
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionDialogMessage");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionParameters");
    _jspx_imports_classes.add("com.liferay.portlet.RenderResponseImpl");
    _jspx_imports_classes.add("java.text.DateFormat");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletPreferences");
    _jspx_imports_classes.add("com.liferay.util.StringComparator");
    _jspx_imports_classes.add("com.liferay.portlet.ConcretePortletWrapper");
    _jspx_imports_classes.add("java.util.TimeZone");
    _jspx_imports_classes.add("java.util.Collection");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.WindowState");
    _jspx_imports_classes.add("com.liferay.util.servlet.SessionMessages");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.liferay.util.SimpleCachePool");
    _jspx_imports_classes.add("com.liferay.portlet.LiferayWindowState");
    _jspx_imports_classes.add("java.util.Map.Entry");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletContext");
    _jspx_imports_classes.add("com.liferay.util.CookieUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.ReleaseInfo");
    _jspx_imports_classes.add("com.dotcms.repackage.org.apache.struts.action.ActionMessage");
    _jspx_imports_classes.add("com.liferay.util.Time");
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageUtil");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("com.liferay.util.servlet.StringServletResponse");
    _jspx_imports_classes.add("com.dotcms.publisher.environment.bean.Environment");
    _jspx_imports_classes.add("java.util.Stack");
    _jspx_imports_classes.add("java.text.MessageFormat");
    _jspx_imports_classes.add("java.util.HashSet");
    _jspx_imports_classes.add("com.liferay.util.StringUtil");
    _jspx_imports_classes.add("com.liferay.util.PropertiesUtil");
    _jspx_imports_classes.add("com.liferay.util.CreditCard");
    _jspx_imports_classes.add("com.liferay.util.UnicodeFormatter");
    _jspx_imports_classes.add("com.liferay.util.lang.IntegerWrapper");
    _jspx_imports_classes.add("com.dotmarketing.db.DbConnectionFactory");
    _jspx_imports_classes.add("com.liferay.util.ServerDetector");
    _jspx_imports_classes.add("com.liferay.portlet.admin.ejb.AdminConfigManagerUtil");
    _jspx_imports_classes.add("com.liferay.portal.util.RecipientComparator");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.text.DecimalFormat");
    _jspx_imports_classes.add("com.liferay.portal.util.WebAppPool");
    _jspx_imports_classes.add("com.liferay.util.Html");
    _jspx_imports_classes.add("com.liferay.util.FileUtil");
    _jspx_imports_classes.add("com.dotcms.repackage.javax.portlet.PortletMode");
    _jspx_imports_classes.add("com.liferay.portal.util.CookieKeys");
    _jspx_imports_classes.add("com.liferay.portal.language.LanguageWrapper");
    _jspx_imports_classes.add("com.liferay.util.TextFormatter");
    _jspx_imports_classes.add("com.dotcms.repackage.org.apache.struts.Globals");
    _jspx_imports_classes.add("com.liferay.util.StateUtil");
    _jspx_imports_classes.add("com.liferay.util.lang.BooleanWrapper");
    _jspx_imports_classes.add("com.liferay.util.KeyValuePairComparator");
    _jspx_imports_classes.add("org.apache.commons.logging.Log");
    _jspx_imports_classes.add("java.util.Collections");
    _jspx_imports_classes.add("com.liferay.util.ObjectValuePair");
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005ftiles_005fuseAttribute_0026_005fname_005fid_005fclassname_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fliferay_005finclude_0026_005fpage_005fflush_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005ftiles_005fuseAttribute_0026_005fname_005fid_005fclassname_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fliferay_005finclude_0026_005fpage_005fflush_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005ftiles_005fuseAttribute_0026_005fname_005fid_005fclassname_005fnobody.release();
    _005fjspx_005ftagPool_005fliferay_005finclude_0026_005fpage_005fflush_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/html/common/auth_backend_check.jsp", out, false);
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

	String CTX_PATH = (String) application
			.getAttribute(WebKeys.CTX_PATH);
	String CAPTCHA_PATH = (String) application
			.getAttribute(WebKeys.CAPTCHA_PATH);
	String IMAGE_PATH = (String) application
			.getAttribute(WebKeys.IMAGE_PATH);

	String contextPath = PropsUtil.get(PropsUtil.PORTAL_CTX);
	if (contextPath.equals("/")) {
		contextPath = "";
	}

	String COMMON_IMG = null;

	Company company = PortalUtil.getCompany(request);

	User user = PortalUtil.getUser(request);

	boolean signedIn = false;

	if (user == null) {
		user = company.getDefaultUser();
	} else {
		signedIn = true;
	}

	Locale locale = (Locale) session
			.getAttribute(com.dotcms.repackage.org.apache.struts.Globals.LOCALE_KEY);
	if (locale == null) {

		// Locale should never be null except when the TCK tests invalidate the session

		locale = user.getLocale();
	}
	if(UtilMethods.isSet(request.getParameter("switchLocale"))){
		Locale[] locales = LanguageUtil.getAvailableLocales();
		for (int i = 0; i < locales.length; i++) { 
			String test = locales[i].getLanguage() + "_" + locales[i].getCountry();
			if(test.equals(request.getParameter("switchLocale"))){
				locale = locales[i];
				session.setAttribute(com.dotcms.repackage.org.apache.struts.Globals.LOCALE_KEY, locale);
				break;
			}
		}
		
	}else{//DOTCMS-5013
		session.setAttribute(com.dotcms.repackage.org.apache.struts.Globals.LOCALE_KEY, locale);
	}

	TimeZone timeZone = user.getTimeZone();
	if (timeZone == null) {
		timeZone = company.getTimeZone();
	}

	Layout layout = (Layout) request.getAttribute(WebKeys.LAYOUT);
	Layout[] layouts = (Layout[]) request.getAttribute(WebKeys.LAYOUTS);

	String layoutId = null;
	if (layout != null) {
		layoutId = layout.getId();
	}

	//String portletGroupId = PortalUtil.getPortletGroupId(layoutId);

	int RES_NARROW = 0;
	int RES_TOTAL = 0;
	int RES_WIDE = 0;


//	Skin skin = user.getSkin();

	String SKIN_CSS_IMG = null;


	String SKIN_COMMON_IMG =null;
	String SKIN_IMG =null;

      out.write('\n');
      out.write('\n');

	try {
		String hostId = (String) session.getAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID);

		com.dotmarketing.business.web.HostWebAPI hostApi = com.dotmarketing.business.web.WebAPILocator.getHostWebAPI();
		com.dotmarketing.beans.Host currentHost = hostApi.find(hostId, user, false);
		if (currentHost.isArchived()) {
			List<com.dotmarketing.beans.Host> hosts = hostApi.findAll(user, false);
			for (com.dotmarketing.beans.Host host : hosts) {
				if (!host.isSystemHost() && !host.isArchived()) {
					session.setAttribute(com.dotmarketing.util.WebKeys.CMS_SELECTED_HOST_ID, host
							.getIdentifier());
					break;
				}
			}
		}
	} catch (Exception e) {

	}

      out.write('\n');
      //  tiles:useAttribute
      com.dotcms.repackage.org.apache.struts.taglib.tiles.UseAttributeTag _jspx_th_tiles_005fuseAttribute_005f0 = (com.dotcms.repackage.org.apache.struts.taglib.tiles.UseAttributeTag) _005fjspx_005ftagPool_005ftiles_005fuseAttribute_0026_005fname_005fid_005fclassname_005fnobody.get(com.dotcms.repackage.org.apache.struts.taglib.tiles.UseAttributeTag.class);
      boolean _jspx_th_tiles_005fuseAttribute_005f0_reused = false;
      try {
        _jspx_th_tiles_005fuseAttribute_005f0.setPageContext(_jspx_page_context);
        _jspx_th_tiles_005fuseAttribute_005f0.setParent(null);
        // /html/portal/layout_portal.jsp(3,0) name = id type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_tiles_005fuseAttribute_005f0.setId("tilesContent");
        // /html/portal/layout_portal.jsp(3,0) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_tiles_005fuseAttribute_005f0.setName("content");
        // /html/portal/layout_portal.jsp(3,0) name = classname type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_tiles_005fuseAttribute_005f0.setClassname("java.lang.String");
        int _jspx_eval_tiles_005fuseAttribute_005f0 = _jspx_th_tiles_005fuseAttribute_005f0.doStartTag();
        if (_jspx_th_tiles_005fuseAttribute_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005ftiles_005fuseAttribute_0026_005fname_005fid_005fclassname_005fnobody.reuse(_jspx_th_tiles_005fuseAttribute_005f0);
        _jspx_th_tiles_005fuseAttribute_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_tiles_005fuseAttribute_005f0, _jsp_getInstanceManager(), _jspx_th_tiles_005fuseAttribute_005f0_reused);
      }
      java.lang.String tilesContent = null;
      tilesContent = (java.lang.String) _jspx_page_context.findAttribute("tilesContent");
      out.write('\n');
      //  tiles:useAttribute
      com.dotcms.repackage.org.apache.struts.taglib.tiles.UseAttributeTag _jspx_th_tiles_005fuseAttribute_005f1 = (com.dotcms.repackage.org.apache.struts.taglib.tiles.UseAttributeTag) _005fjspx_005ftagPool_005ftiles_005fuseAttribute_0026_005fname_005fid_005fclassname_005fnobody.get(com.dotcms.repackage.org.apache.struts.taglib.tiles.UseAttributeTag.class);
      boolean _jspx_th_tiles_005fuseAttribute_005f1_reused = false;
      try {
        _jspx_th_tiles_005fuseAttribute_005f1.setPageContext(_jspx_page_context);
        _jspx_th_tiles_005fuseAttribute_005f1.setParent(null);
        // /html/portal/layout_portal.jsp(4,0) name = id type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_tiles_005fuseAttribute_005f1.setId("tilesPortletSubNav");
        // /html/portal/layout_portal.jsp(4,0) name = name type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_tiles_005fuseAttribute_005f1.setName("portlet_sub_nav");
        // /html/portal/layout_portal.jsp(4,0) name = classname type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_tiles_005fuseAttribute_005f1.setClassname("java.lang.String");
        int _jspx_eval_tiles_005fuseAttribute_005f1 = _jspx_th_tiles_005fuseAttribute_005f1.doStartTag();
        if (_jspx_th_tiles_005fuseAttribute_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005ftiles_005fuseAttribute_0026_005fname_005fid_005fclassname_005fnobody.reuse(_jspx_th_tiles_005fuseAttribute_005f1);
        _jspx_th_tiles_005fuseAttribute_005f1_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_tiles_005fuseAttribute_005f1, _jsp_getInstanceManager(), _jspx_th_tiles_005fuseAttribute_005f1_reused);
      }
      java.lang.String tilesPortletSubNav = null;
      tilesPortletSubNav = (java.lang.String) _jspx_page_context.findAttribute("tilesPortletSubNav");
      out.write('\n');

        boolean inPortal = (request.getAttribute("org.dotcms.variables.inPortlets") != null);
        boolean inPopupIFrame = UtilMethods.isSet(ParamUtil.getString(request, WebKeys.POPUP)) || (UtilMethods.isSet(ParamUtil.getString(request, WebKeys.IN_FRAME)) && "true".equals(ParamUtil.getString(request, WebKeys.IN_FRAME))) || (UtilMethods.isSet(request.getSession().getAttribute(WebKeys.IN_FRAME)) && (Boolean) request.getSession().getAttribute(WebKeys.IN_FRAME));
		boolean isAjaxIframe = UtilMethods.isSet(ParamUtil.getString(request, WebKeys.AJAX_PORTLET)) && "true".equals(ParamUtil.getString(request, WebKeys.AJAX_PORTLET));
		
        request.setAttribute("org.dotcms.variables.inPortlets", "true"); 
        

      out.write('\n');
      out.write('\n');
if(inPortal ) {
      out.write("\n");
      out.write("    <div class=\"portlet-wrapper\">\n");
      out.write("        ");
 if (Validator.isNotNull(tilesPortletSubNav) ) {
      out.write("\n");
      out.write("            ");
      //  liferay:include
      com.dotcms.repackage.com.liferay.taglib.IncludeTag _jspx_th_liferay_005finclude_005f0 = (com.dotcms.repackage.com.liferay.taglib.IncludeTag) _005fjspx_005ftagPool_005fliferay_005finclude_0026_005fpage_005fflush_005fnobody.get(com.dotcms.repackage.com.liferay.taglib.IncludeTag.class);
      boolean _jspx_th_liferay_005finclude_005f0_reused = false;
      try {
        _jspx_th_liferay_005finclude_005f0.setPageContext(_jspx_page_context);
        _jspx_th_liferay_005finclude_005f0.setParent(null);
        // /html/portal/layout_portal.jsp(17,12) name = page type = null reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_liferay_005finclude_005f0.setPage( Constants.TEXT_HTML_DIR + tilesPortletSubNav );
        // /html/portal/layout_portal.jsp(17,12) name = flush type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_liferay_005finclude_005f0.setFlush(true);
        int _jspx_eval_liferay_005finclude_005f0 = _jspx_th_liferay_005finclude_005f0.doStartTag();
        if (_jspx_th_liferay_005finclude_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return;
        }
        _005fjspx_005ftagPool_005fliferay_005finclude_0026_005fpage_005fflush_005fnobody.reuse(_jspx_th_liferay_005finclude_005f0);
        _jspx_th_liferay_005finclude_005f0_reused = true;
      } finally {
        org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_liferay_005finclude_005f0, _jsp_getInstanceManager(), _jspx_th_liferay_005finclude_005f0_reused);
      }
      out.write("\n");
      out.write("        ");
}
      out.write("\n");
      out.write("        ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response,  Constants.TEXT_HTML_DIR + tilesContent , out, false);
      out.write("\n");
      out.write("    </div>\n");
      out.write("        \n");
}else{ 
      out.write("\n");
      out.write("        ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");


	String dojoPath = Config.getStringProperty("path.to.dojo");
	if(!UtilMethods.isSet(dojoPath)){
		// Change dojopath in dotmarketing-config.properties!
		response.sendError(500, "No dojo path variable (path.to.dojo) set in the property file");
	}
	String agent = request.getHeader("User-Agent");
	response.setHeader("Cache-Control","no-store");
	response.setHeader("Pragma","no-cache");
	response.setHeader("Expires","01 Jan 2000 00:00:00 GMT");


      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n");
      out.write("\n");
      out.write("<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:bi=\"urn:bi\" xmlns:csp=\"urn:csp\">\n");
      out.write("<head>\n");
      out.write("\t<script src=\"/html/js/dragula-3.7.2/dragula.min.js\"></script>\n");
      out.write("\t<meta http-equiv=\"x-ua-compatible\" content=\"IE=edge\" >\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n");
      out.write("\n");
      out.write("\t<meta content=\"no-cache\" http-equiv=\"Cache-Control\" />\n");
      out.write("\t<meta content=\"no-cache\" http-equiv=\"Pragma\" />\n");
      out.write("\t<meta content=\"0\" http-equiv=\"Expires\" />\n");
      out.write("\t<meta name=\"Expire\" content=\"Now\" />\n");
      out.write("\n");
      out.write("\t<link rel=\"shortcut icon\" href=\"//dotcms.com/favicon.ico\" type=\"image/x-icon\">\n");
      out.write("\t<title>dotCMS : ");
      out.print( LanguageUtil.get(pageContext, "Enterprise-Web-Content-Management") );
      out.write("</title>\n");
      out.write("    \n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(dojoPath);
      out.write("/dijit/themes/dijit.css\">\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"/html/css/dijit-dotcms/dotcms.css?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\">\n");
      out.write("\n");
      out.write("\n");
      out.write("\t<!--[if IE]>\n");
      out.write("\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"/html/css/iehacks.css\" />\n");
      out.write("\t<![endif]-->\n");
      out.write("\n");
      out.write("\t");

	String dojoLocaleConfig = "locale:'en-us'";
	if(locale != null){
		dojoLocaleConfig = "locale:'"+locale.getLanguage() + "-" + locale.getCountry().toLowerCase() + "',";
	}
	
      out.write("\n");
      out.write("\n");
      out.write("   \t<script type=\"text/javascript\">\n");
      out.write("\t   \tdjConfig={\n");
      out.write("\t\t\tparseOnLoad: true,\n");
      out.write("\t\t\ti18n: \"");
      out.print(dojoPath);
      out.write("/custom-build/build/\",\n");
      out.write("\t\t\tuseXDomain: false,\n");
      out.write("\t\t\tisDebug: false,\n");
      out.write("\t\t\t");
      out.print(dojoLocaleConfig);
      out.write("\n");
      out.write("\t\t\tmodulePaths: { dotcms: \"/html/js/dotcms\" }\n");
      out.write("\t   };\n");
      out.write("\n");
      out.write("\t   \tfunction isInodeSet(x){\n");
      out.write("\t\t\treturn (x && x != undefined && x!=\"\" && x.length>15);\n");
      out.write("\t\t}\n");
      out.write("\t\t// Polyfill IE11\n");
      out.write("\t\tif (typeof String.prototype.endsWith !== 'function') {\n");
      out.write("\t\t\tString.prototype.endsWith = function(suffix) {\n");
      out.write("\t\t\t\treturn this.indexOf(suffix, this.length - suffix.length) !== -1;\n");
      out.write("\t\t\t};\n");
      out.write("\t\t}\n");
      out.write("   \t</script>\n");
      out.write("\n");
      out.write("\t<script type=\"text/javascript\" src=\"/html/js/log4js/log4javascript.js\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/html/js/log4js/dotcms-log4js.js\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/html/js/dojo/custom-build/dojo/dojo.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/html/js/dojo/custom-build/build/build.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("  \t<script type=\"text/javascript\" src=\"/html/common/javascript.jsp?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/engine.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/util.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/TemplateAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/HostAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/ContainerAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/RoleAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/BrowserAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/UserAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\t<script type=\"text/javascript\" src=\"/dwr/interface/InodeAjax.js?b=");
      out.print( ReleaseInfo.getVersion() );
      out.write("\"></script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\t<script type=\"text/javascript\">\n");
      out.write("\t\tdojo.require(\"dojo.data.ItemFileReadStore\");\n");
      out.write("\n");
      out.write("\t\tdojo.require(\"dotcms.dijit.image.ImageEditor\");\n");
      out.write("\t\tdojo.require(\"dotcms.dojo.data.UsersReadStore\");\n");
      out.write("\n");
      out.write("\t\tdojo.addOnLoad(function () {\n");
      out.write("\t\t\tdojo.global.DWRUtil = dwr.util;\n");
      out.write("\t\t\tdojo.global.DWREngine = dwr.engine;\n");
      out.write("\t\t\tdwr.engine.setErrorHandler(DWRErrorHandler);\n");
      out.write("\t\t\tdwr.engine.setWarningHandler(DWRErrorHandler);\n");
      out.write("\t\t});\n");
      out.write("\n");
      out.write("\t\tfunction DWRErrorHandler(msg, e) {\n");
      out.write("\t\t\tconsole.log(msg, e);\n");
      out.write("\t\t}\n");
      out.write("\t\tvar dojoDom=dojo.require(\"dojo.dom\");\n");
      out.write("\t\tvar dojoDomGeometry=dojo.require(\"dojo.dom-geometry\");\n");
      out.write("\t\tvar dojoStyle=dojo.require(\"dojo.dom-style\");\n");
      out.write("\t\tdojo.coords = function(elem,xx) {\n");
      out.write("\t\t\tvar mb=dojoDomGeometry.getMarginBox(elem,dojoStyle.getComputedStyle(elem));\n");
      out.write("\t\t\tvar abs=dojoDomGeometry.position(elem,xx);\n");
      out.write("\t\t\tmb.x=abs.x;\n");
      out.write("\t\t\tmb.y=abs.y;\n");
      out.write("\t\t\tmb.w=abs.w;\n");
      out.write("\t\t\tmb.h=abs.h;\n");
      out.write("\t\t\treturn mb;\n");
      out.write("\t\t};\n");

	if(UtilMethods.isSet(request.getParameter(WebKeys.IN_FRAME)) && UtilMethods.isSet(request.getParameter(WebKeys.FRAME))){
		boolean inFrame = Boolean.valueOf(request.getParameter(WebKeys.IN_FRAME));
		
		if(inFrame){
			  request.getSession().setAttribute(WebKeys.IN_FRAME,inFrame);
	    	  request.getSession().setAttribute(WebKeys.FRAME,request.getParameter(WebKeys.FRAME));
		}else{
			  request.getSession().removeAttribute(WebKeys.IN_FRAME);
	  	      request.getSession().removeAttribute(WebKeys.FRAME);
		}
	}

      out.write("\n");
      out.write("\t</script>\n");
      out.write("\t");
 String dotBackImage = (!UtilMethods.isSet(company.getHomeURL()) || "localhost".equals(company.getHomeURL())) ? "/html/images/backgrounds/bg-3.jpg" : company.getHomeURL();
      out.write("\n");
      out.write("\t<style>\n");
      out.write("\t\t.imageBG{background-color:");
      out.print( company.getSize() );
      out.write(";background-image:url(");
      out.print( dotBackImage );
      out.write(");background-repeat:no-repeat;background-position:top center;background-size:100% auto;height:75px;position:absolute;top:0;left:0;width:100%;z-index:-2;}\n");
      out.write("\t</style>\n");
      out.write("\n");
      out.write("\n");
      out.write("</head>\n");
if(UtilMethods.isSet(request.getParameter("popup")) || UtilMethods.isSet(request.getAttribute("popup")) ){
      out.write("\n");
      out.write("<body class=\"dotcms\" style=\"background:white\">\n");
}else{ 
      out.write("\n");
      out.write("<body class=\"dotcms\" style=\"visibility:hidden;background:white\">\n");
} 
      out.write('\n');
      out.write("\n");
      out.write("        <style>\n");
      out.write("                body{\n");
      out.write("                        background: white;\n");
      out.write("                }\n");
      out.write("        </style>\n");
      out.write("        \n");
      out.write("        ");
if(isAjaxIframe){ 
      out.write("\n");
      out.write("            <script>\n");
      out.write("\t\t\t\tvar portletTabMap = {}; \n");
      out.write("\t\t\t</script>\n");
      out.write("\t\t\t\n");
      out.write("\t        <div id=\"menu\" class=\"navbar\" style=\"display:none;\">\n");
      out.write("\t\t\t\t<ul class=\"level1 horizontal\" id=\"root\">\n");
      out.write("\t\t\t\t\t<script>portletTabMap['");
      out.print(ParamUtil.getString(request, "p_p_id"));
      out.write("'] = '0';</script>\n");
      out.write("\t\t\t\t    <li class=\"dotAjaxNav0 level1 active\">\n");
      out.write("\t\t\t\t    \t<a href=\"javascript:dotAjaxNav.show(\"/api/portlet/");
      out.print(ParamUtil.getString(request, "p_p_id"));
      out.write("/\",\"0\")\">\n");
      out.write("\t\t\t\t\t        <div class=\"tabLeft\">\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"navMenu-title\"></div>\n");
      out.write("\t\t\t\t\t\t\t\t<div class=\"navMenu-subtitle\"></div>\n");
      out.write("\t\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t\t</a>                               \n");
      out.write("\t\t\t\t\t</li>            \n");
      out.write("\t\t\t\t</ul>\n");
      out.write("\t\t\t</div>\n");
      out.write("            ");
      out.write("\n");
      out.write("<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("dojo.require(\"dojo.hash\");\n");
      out.write("        //\n");
      out.write("        //\n");
      out.write("        // -------------------- AJAX NAVIGATION --------------------\n");
      out.write("        //\n");
      out.write("        //\n");
      out.write("\n");
      out.write("        dojo.declare(\"dotcms.dijit.dotAjaxNav\", null, {\n");
      out.write("                contentDiv : \"dotAjaxMainDiv\",\n");
      out.write("                hangerDiv : \"dotAjaxMainHangerDiv\",\n");
      out.write("\n");
      out.write("                wfCrumbTrail : new Array(),\n");
      out.write("\n");
      out.write("                constructor : function() {},\n");
      out.write("\n");
      out.write("                show : function(href, tabId) {\n");
      out.write("\n");
      out.write("                        var r = Math.floor(Math.random() * 1000000000);\n");
      out.write("                        if (href.indexOf(\"?\") > -1) {\n");
      out.write("                                href = href + \"&r=\" + r;\n");
      out.write("                        } else {\n");
      out.write("                                href = href + \"?r=\" + r;\n");
      out.write("                        }\n");
      out.write("                        dojo.hash(encodeURIComponent(href));\n");
      out.write("\n");
      out.write("                        // if we need to update the tabs\n");
      out.write("                        if(tabId && tabId != undefined){\n");
      out.write("                                dojo.query(\".level1 .active\").forEach(function(node){\n");
      out.write("                                        dojo.removeClass(node, \"active\");\n");
      out.write("                                  });\n");
      out.write("\n");
      out.write("                                dojo.query(\".dotAjaxNav\" + tabId).forEach(function(node){\n");
      out.write("                                        dojo.addClass(node, \"active\");\n");
      out.write("                                  });\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                },\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("                reload : function(){\n");
      out.write("                        if(dojo.hash()  ){\n");
      out.write("\t                        var hashValue = decodeURIComponent(dojo.hash());\n");
      out.write("\t                        var portletId = hashValue.split(\"/api/portlet/\")[1];\n");
      out.write("\t                        if(portletId){\n");
      out.write("\t\t                        portletId = portletId.substring(0, portletId.indexOf(\"/\"));\n");
      out.write("\t\t                        dotAjaxNav.show(hashValue, portletTabMap[portletId]);\n");
      out.write("\t                        }\n");
      out.write("                        }\n");
      out.write("                },\n");
      out.write("\n");
      out.write("\n");
      out.write("                refresh : function() {\n");
      out.write("\n");
      out.write("                        var hashValue = decodeURIComponent(dojo.hash());\n");
      out.write("\n");
      out.write("                        if(hashValue.indexOf(\"donothing\")>0) {\n");
      out.write("                        \treturn;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        logger.debug(\"refreshing:\" + hashValue);\n");
      out.write("                        if(!hashValue || hashValue.length ==0){\n");
      out.write("                                return;\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        var myCp = dijit.byId(this.contentDiv);\n");
      out.write("                        var hanger = dojo.byId(this.hangerDiv);\n");
      out.write("                        if(!hanger){\n");
      out.write("                                return;\n");
      out.write("                        }\n");
      out.write("                        if (myCp) {\n");
      out.write("                                myCp.destroyRecursive();\n");
      out.write("                                myCp.attr(\"content\",\"\");\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("                        myCp = new dojox.layout.ContentPane({\n");
      out.write("                                id : this.contentDiv\n");
      out.write("                        }).placeAt(this.hangerDiv);\n");
      out.write("\n");
      out.write("                        dojo.style(hanger, \"min-height\", \"400px\");\n");
      out.write("\n");
      out.write("                        logger.debug(\"navigating to:\" + hashValue)\n");
      out.write("                        myCp.attr(\"href\", hashValue);\n");
      out.write("                        //myCp.refresh(); GIT-7098\n");
      out.write("\n");
      out.write("                        dojo.parser.parse(this.hangerDiv);\n");
      out.write("                },\n");
      out.write("\n");
      out.write("\n");
      out.write("                refreshHTML : function(html) {\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("                    var myCp = dijit.byId(this.contentDiv);\n");
      out.write("                    var hanger = dojo.byId(this.hangerDiv);\n");
      out.write("                    if(!hanger){\n");
      out.write("                            return;\n");
      out.write("                    }\n");
      out.write("                    if (myCp) {\n");
      out.write("                            myCp.destroyRecursive();\n");
      out.write("                            myCp.attr(\"content\",\"\");\n");
      out.write("                    }\n");
      out.write("\n");
      out.write("                    myCp = new dojox.layout.ContentPane({\n");
      out.write("                            id : this.contentDiv\n");
      out.write("                    }).placeAt(this.hangerDiv);\n");
      out.write("\n");
      out.write("\n");
      out.write("                    myCp.attr(\"content\", html);\n");
      out.write("\n");
      out.write("                    dojo.parser.parse(this.hangerDiv);\n");
      out.write("            },\n");
      out.write("\n");
      out.write("                addCrumbtrail : function (title, urlx){\n");
      out.write("                        var entry = {title:title, url:urlx};\n");
      out.write("                        this.wfCrumbTrail[this.wfCrumbTrail.length] = entry;\n");
      out.write("                },\n");
      out.write("\n");
      out.write("\n");
      out.write("                resetCrumbTrail : function(){\n");
      out.write("                        this.wfCrumbTrail = new Array();\n");
      out.write("                },\n");
      out.write("\n");
      out.write("                refreshCrumbtrail : function (){\n");
      out.write("                        var crumbDiv = dojo.byId(\"subNavCrumbUl\");\n");
      out.write("                        crumbDiv.innerHTML =\"\";\n");
      out.write("                        // dojo.create(\"li\",\n");
      out.write("                        // {onClick:this.show(this.wfCrumbTrail[i].url)},crumbDiv )\n");
      out.write("\n");
      out.write("                        dojo.create(\"li\", {innerHTML:\"<span class='hostStoppedIcon' style='float:left;margin-right:5px;'></span>");
      out.print(LanguageUtil.get(pageContext, "Global-Page"));
      out.write("\", id:\"selectHostDiv\", onClick:\"window.location='/c'\"},crumbDiv );\n");
      out.write("                        for( i =0;i< this.wfCrumbTrail.length;i++ ){\n");
      out.write("                                var className=\"showPointer\";\n");
      out.write("                                if(i+1 ==this.wfCrumbTrail.length){\n");
      out.write("                                        dojo.create(\"li\", {innerHTML:\"<b>\" + dotAjaxNav.wfCrumbTrail[i].title + \"</b>\", className:\"lastCrumb\"},crumbDiv );\n");
      out.write("                                }\n");
      out.write("                                else{\n");
      out.write("                                        dojo.create(\"li\", {innerHTML:\"<a href='javascript:dotAjaxNav.show(dotAjaxNav.wfCrumbTrail[\" + i + \"].url)'>\" + dotAjaxNav.wfCrumbTrail[i].title + \"</a>\", className:className},crumbDiv );\n");
      out.write("                                }\n");
      out.write("\n");
      out.write("                        }\n");
      out.write("\n");
      out.write("\n");
      out.write("                }\n");
      out.write("\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        var dotAjaxNav = new dotcms.dijit.dotAjaxNav({});\n");
      out.write("\n");
      out.write("        dojo.subscribe(\"/dojo/hashchange\", this, function(hash){\n");
      out.write("        \tdotAjaxNav.refresh();\n");
      out.write("        \tdojo.style(dojo.body(), \"visibility\", \"visible\");\n");
      out.write("        });\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("        var _myWindowWidth=0;\n");
      out.write("\n");
      out.write("        function smallifyMenu(){\n");
      out.write("\n");
      out.write("                // move our menu out of sight for rendering....\n");
      out.write("                var m = dojo.byId(\"menu\");\n");
      out.write("\n");
      out.write("                var viewport = dijit.getViewport();\n");
      out.write("                var  screenWidth= (viewport.w -40);\n");
      out.write("                //alert(screenWidth);\n");
      out.write("                if(_myWindowWidth == screenWidth){\n");
      out.write("                        return;\n");
      out.write("                }\n");
      out.write("                _myWindowWidth = screenWidth;\n");
      out.write("                // tabW keeps track of the tab width\n");
      out.write("                var tabW = 0;\n");
      out.write("                var fattestTab =0;\n");
      out.write("                var tabs = dojo.query(\"li.level1\");\n");
      out.write("                for(i = 0;i<tabs.length;i++){\n");
      out.write("                        var x = tabs[i];\n");
      out.write("                        var classes = dojo.attr(x, \"class\");\n");
      out.write("                        classes = classes.replace(\" smallify\", \"\");\n");
      out.write("                        dojo.attr(x, \"class\", classes);\n");
      out.write("                        width =  (dojo.coords(x)).w;\n");
      out.write("                        if(width > fattestTab){\n");
      out.write("                                fattestTab=width;\n");
      out.write("                        }\n");
      out.write("                        tabW = tabW + (dojo.coords(x)).w;\n");
      out.write("                }\n");
      out.write("                screenWidth = screenWidth - fattestTab;\n");
      out.write("                //alert(fattestTab);\n");
      out.write("                // get the top of our menu (to see if we are wrapping)\n");
      out.write("                var firstTop = (dojo.coords(tabs[0])).t;\n");
      out.write("                var lastTop = (dojo.coords(tabs[(tabs.length-1)])).t;\n");
      out.write("                if(tabW > screenWidth || lastTop > firstTop){\n");
      out.write("                        for(i = tabs.length;i>0;i--){\n");
      out.write("                                lastTop = (dojo.coords(tabs[(tabs.length-1)])).t;\n");
      out.write("                                var x = tabs[i-1];\n");
      out.write("\n");
      out.write("                                var width = (dojo.coords(x)).w;\n");
      out.write("                                tabW = tabW-width;\n");
      out.write("                                var classes = dojo.attr(x, \"class\");\n");
      out.write("\n");
      out.write("        ");
      out.write("\n");
      out.write("\n");
      out.write("                                if(tabW > screenWidth || lastTop > firstTop){\n");
      out.write("                                       /*  classes = classes + \" smallify\";\n");
      out.write("                                        dojo.attr(x, \"class\", classes);\n");
      out.write("                                        width = (dojo.coords(x)).w;\n");
      out.write("                                        tabW = tabW+width; */\n");
      out.write("                                }else{\n");
      out.write("                                        break;\n");
      out.write("                                }\n");
      out.write("                        }\n");
      out.write("                }\n");
      out.write("\n");
      out.write("\n");
      out.write("        }\n");
      out.write("        dojo.addOnLoad (smallifyMenu);\n");
      out.write("        dojo.addOnLoad(function(){\n");
      out.write("            dotAjaxNav.reload();\n");
      out.write("        });\n");
      out.write("        dojo.connect(window, \"onresize\", this, \"smallifyMenu\");\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("</script>");
      out.write("\n");
      out.write("            ");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

if(request.getSession().getAttribute(ActionErrors.GLOBAL_ERROR) != null){
	request.setAttribute(ActionErrors.GLOBAL_ERROR, request.getSession().getAttribute(ActionErrors.GLOBAL_ERROR));

}


Set<String> messages = new HashSet<String>();
Set<String> errors = new HashSet<String>();
SessionDialogMessage dialogMessage = null;

if(request.getAttribute(ActionErrors.GLOBAL_ERROR) !=null){
	ActionErrors aes = (ActionErrors) request.getAttribute(ActionErrors.GLOBAL_ERROR);
	Iterator it = aes.get();
	while(it.hasNext()){
		ActionMessage am = (ActionMessage) it.next();
		String m = LanguageUtil.get(pageContext, am.getKey());
		if(am.getValues() != null){
			for(int i=0;i<am.getValues().length;i++){
				m = UtilMethods.replace(m, "{" + i + "}", (String) am.getValues()[i]);
			}
		}
		errors.add(m);
	}
}

if(request.getAttribute(Globals.ERROR_KEY) != null){
	ActionErrors aes = (ActionErrors) request.getAttribute(Globals.ERROR_KEY);
	Iterator it = aes.get();
	while(it.hasNext()){
		ActionMessage am = (ActionMessage) it.next();
		String m = LanguageUtil.get(pageContext, am.getKey());
		if(am.getValues() != null){
			for(int i=0;i<am.getValues().length;i++){
				m = UtilMethods.replace(m, "{" + i + "}", (String) am.getValues()[i]);
			}
		}
		errors.add(m);
	}
}




if(request.getAttribute(ActionMessages.GLOBAL_MESSAGE) !=null){
	ActionMessages aes = (ActionMessages) request.getAttribute(ActionMessages.GLOBAL_MESSAGE);
	Iterator it = aes.get();
	while(it.hasNext()){
		ActionMessage am = (ActionMessage) it.next();
		messages.add(am.getKey());
	}
}



if(SessionMessages.contains(session, "message")){
	messages.add((String) SessionMessages.get(session, "message"));
}

if(SessionMessages.contains(session, "error")){
	errors.add((String) SessionMessages.get(session, "error"));
}
if(SessionMessages.contains(session, "custommessage")){
	messages.add((String) SessionMessages.get(session, "custommessage"));
}

if (SessionMessages.contains(session, "dialogMessage")){
	dialogMessage = (SessionDialogMessage) SessionMessages.get(session, "dialogMessage");
}

//Support multiple messages
int i = 0;
do {
	if (SessionMessages.contains(request, "message" + i)) {
		messages.add((String) SessionMessages.get(request, "message" + i));
		i++;
	}
} while (SessionMessages.contains(request, "message" + i));

i = 0;
do {
	if(SessionMessages.contains(request, "error" + i)){
		errors.add((String) SessionMessages.get(request, "error" + i));
		i++;
	}
} while (SessionMessages.contains(request, "error" + i));

i = 0;
do {
	if(SessionMessages.contains(request, "custommessage" + i)){
		messages.add((String) SessionMessages.get(request, "custommessage" + i));
		i++;
	}
} while (SessionMessages.contains(request, "custommessage" + i));



SessionMessages.clear(session);
SessionMessages.clear(request);
request.getSession().removeAttribute("com.dotcms.repackage.org.apache.struts.action.MESSAGE");
request.getSession().removeAttribute("com.dotcms.repackage.org.apache.struts.action.ERROR");




      out.write("\n");
      out.write("\n");
      out.write("<script type='text/javascript' src='/html/js/messages.js'></script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("\tdojo.require(\"dojo.fx\");\n");
      out.write("\tdojo.require(\"dijit.layout.ContentPane\");\n");
      out.write("\n");
      out.write("\t\t");
if(errors.size() > 0){
      out.write("\n");
      out.write("\t\t   dojo.addOnLoad(\n");
      out.write("\t\t\t\t   function () {\n");
      out.write("\t\t   \t\t\t\tshowDotCMSErrorMessage(\"<ul>");
for(String x : errors){
      out.write("<li>");
      out.print(UtilMethods.replace(LanguageUtil.get(pageContext, x), "\"", "\\\"") );
      out.write("</li>");
} 
      out.write("</ul>\")\n");
      out.write("\t\t\t\t   }\n");
      out.write("\t\t   \t\t);\n");
      out.write("\t\t");
}
      out.write("\n");
      out.write("\t\t\n");
      out.write("\t\n");
      out.write("\t\t");
if(messages.size() > 0){
      out.write("\n");
      out.write("\t\t   dojo.addOnLoad(\n");
      out.write("\t\t\t\t   function () {\n");
      out.write("\t\t   \t\t\t\tshowDotCMSSystemMessage(\"<div class=\\\"messageIcon resolveIcon\\\"></div>\" + \"");
for(String x : messages){
      out.write(' ');
      out.print(UtilMethods.replace(LanguageUtil.get(pageContext, x), "\"", "\\\"") );
} 
      out.write("\")\n");
      out.write("\t\t\t\t   }\n");
      out.write("\t\t   \t\t);\n");
      out.write("\t\t");
}
      out.write("\n");
      out.write("\n");
      out.write("    \t");
if(dialogMessage != null){
      out.write("\n");
      out.write("\t\t\tdojo.addOnLoad(function() {\n");
      out.write("                var dia = dijit.byId(\"messageDialog\");\n");
      out.write("                if(dia){\n");
      out.write("                    dia.destroyRecursive();\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                dia = new dijit.Dialog({\n");
      out.write("                    id\t\t\t:\t\"messageDialog\",\n");
      out.write("                    title\t\t: \t\"");
      out.print(dialogMessage.getTitle());
      out.write("\",\n");
      out.write("                    style\t\t:\t\"display:none;width:630px;height:auto;vertical-align: middle; \",\n");
      out.write("\t\t\t\t\tdraggable\t:\ttrue\n");
      out.write("                });\n");
      out.write("                var contentPane = new dojox.layout.ContentPane({\n");
      out.write("                    id \t\t\t: \"messageDialogContentPane\"\n");
      out.write("                }).placeAt(\"messageDialog\");\n");
      out.write("\n");
      out.write("                dojo.place(\"<span style='color: red; font-weight: bold'>");
      out.print( dialogMessage.getError() );
      out.write("</span>\", \"messageDialogContentPane\", \"last\");\n");
      out.write("\n");
      out.write("                ");

                String messageHTML = "";
                for (Entry<String, List<String>> entry : dialogMessage.getMessages().entrySet()) {
					messageHTML += "<table class='listingTable' style='margin-bottom: 0px'><thead><tr><th>"+ entry.getKey() +"</th></tr></thead><tbody>";
					for (String item : entry.getValue()) {
						messageHTML += "<tr><td>" + item + "</td></tr>";
					}
					messageHTML += "</tbody></table>";
                }
      out.write("\n");
      out.write("\n");
      out.write("                dojo.place(\"<div style='overflow: auto;height:auto; margin-top: 10px; margin-bottom: 20px'>");
      out.print( messageHTML );
      out.write("</div>\", \"messageDialogContentPane\", \"last\");\n");
      out.write("\t\t\t\t\n");
      out.write("                dojo.place(\"<span style='margin-bottom: 10px; color: #888888;font-size: smaller'>");
      out.print( dialogMessage.getFooter() );
      out.write("</span>\", \"messageDialogContentPane\", \"last\");\n");
      out.write("\n");
      out.write("\t\t\t\tdia.show();\n");
      out.write("    \t\t}) ;\n");
      out.write("    \t");
}
      out.write("\n");
      out.write("</script>");
      out.write("\n");
      out.write("                \n");
      out.write("            <div id=\"dotAjaxMainHangerDiv\">\n");
      out.write("            \t<div id=\"dotAjaxMainDiv\" dojoType=\"dojox.layout.ContentPane\" style=\"overflow: visible;\">\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("            \n");
      out.write("\t\t    <script type=\"text/javascript\">\n");
      out.write("\t\t        dotAjaxNav.show(\"/api/portlet/");
      out.print(ParamUtil.getString(request, "p_p_id"));
      out.write("/\",\"0\");\n");
      out.write("\t\t    </script>\n");
      out.write("        ");
} else { 
      out.write("\n");
      out.write("        \t");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

if(request.getSession().getAttribute(ActionErrors.GLOBAL_ERROR) != null){
	request.setAttribute(ActionErrors.GLOBAL_ERROR, request.getSession().getAttribute(ActionErrors.GLOBAL_ERROR));

}


Set<String> messages = new HashSet<String>();
Set<String> errors = new HashSet<String>();
SessionDialogMessage dialogMessage = null;

if(request.getAttribute(ActionErrors.GLOBAL_ERROR) !=null){
	ActionErrors aes = (ActionErrors) request.getAttribute(ActionErrors.GLOBAL_ERROR);
	Iterator it = aes.get();
	while(it.hasNext()){
		ActionMessage am = (ActionMessage) it.next();
		String m = LanguageUtil.get(pageContext, am.getKey());
		if(am.getValues() != null){
			for(int i=0;i<am.getValues().length;i++){
				m = UtilMethods.replace(m, "{" + i + "}", (String) am.getValues()[i]);
			}
		}
		errors.add(m);
	}
}

if(request.getAttribute(Globals.ERROR_KEY) != null){
	ActionErrors aes = (ActionErrors) request.getAttribute(Globals.ERROR_KEY);
	Iterator it = aes.get();
	while(it.hasNext()){
		ActionMessage am = (ActionMessage) it.next();
		String m = LanguageUtil.get(pageContext, am.getKey());
		if(am.getValues() != null){
			for(int i=0;i<am.getValues().length;i++){
				m = UtilMethods.replace(m, "{" + i + "}", (String) am.getValues()[i]);
			}
		}
		errors.add(m);
	}
}




if(request.getAttribute(ActionMessages.GLOBAL_MESSAGE) !=null){
	ActionMessages aes = (ActionMessages) request.getAttribute(ActionMessages.GLOBAL_MESSAGE);
	Iterator it = aes.get();
	while(it.hasNext()){
		ActionMessage am = (ActionMessage) it.next();
		messages.add(am.getKey());
	}
}



if(SessionMessages.contains(session, "message")){
	messages.add((String) SessionMessages.get(session, "message"));
}

if(SessionMessages.contains(session, "error")){
	errors.add((String) SessionMessages.get(session, "error"));
}
if(SessionMessages.contains(session, "custommessage")){
	messages.add((String) SessionMessages.get(session, "custommessage"));
}

if (SessionMessages.contains(session, "dialogMessage")){
	dialogMessage = (SessionDialogMessage) SessionMessages.get(session, "dialogMessage");
}

//Support multiple messages
int i = 0;
do {
	if (SessionMessages.contains(request, "message" + i)) {
		messages.add((String) SessionMessages.get(request, "message" + i));
		i++;
	}
} while (SessionMessages.contains(request, "message" + i));

i = 0;
do {
	if(SessionMessages.contains(request, "error" + i)){
		errors.add((String) SessionMessages.get(request, "error" + i));
		i++;
	}
} while (SessionMessages.contains(request, "error" + i));

i = 0;
do {
	if(SessionMessages.contains(request, "custommessage" + i)){
		messages.add((String) SessionMessages.get(request, "custommessage" + i));
		i++;
	}
} while (SessionMessages.contains(request, "custommessage" + i));



SessionMessages.clear(session);
SessionMessages.clear(request);
request.getSession().removeAttribute("com.dotcms.repackage.org.apache.struts.action.MESSAGE");
request.getSession().removeAttribute("com.dotcms.repackage.org.apache.struts.action.ERROR");




      out.write("\n");
      out.write("\n");
      out.write("<script type='text/javascript' src='/html/js/messages.js'></script>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("\tdojo.require(\"dojo.fx\");\n");
      out.write("\tdojo.require(\"dijit.layout.ContentPane\");\n");
      out.write("\n");
      out.write("\t\t");
if(errors.size() > 0){
      out.write("\n");
      out.write("\t\t   dojo.addOnLoad(\n");
      out.write("\t\t\t\t   function () {\n");
      out.write("\t\t   \t\t\t\tshowDotCMSErrorMessage(\"<ul>");
for(String x : errors){
      out.write("<li>");
      out.print(UtilMethods.replace(LanguageUtil.get(pageContext, x), "\"", "\\\"") );
      out.write("</li>");
} 
      out.write("</ul>\")\n");
      out.write("\t\t\t\t   }\n");
      out.write("\t\t   \t\t);\n");
      out.write("\t\t");
}
      out.write("\n");
      out.write("\t\t\n");
      out.write("\t\n");
      out.write("\t\t");
if(messages.size() > 0){
      out.write("\n");
      out.write("\t\t   dojo.addOnLoad(\n");
      out.write("\t\t\t\t   function () {\n");
      out.write("\t\t   \t\t\t\tshowDotCMSSystemMessage(\"<div class=\\\"messageIcon resolveIcon\\\"></div>\" + \"");
for(String x : messages){
      out.write(' ');
      out.print(UtilMethods.replace(LanguageUtil.get(pageContext, x), "\"", "\\\"") );
} 
      out.write("\")\n");
      out.write("\t\t\t\t   }\n");
      out.write("\t\t   \t\t);\n");
      out.write("\t\t");
}
      out.write("\n");
      out.write("\n");
      out.write("    \t");
if(dialogMessage != null){
      out.write("\n");
      out.write("\t\t\tdojo.addOnLoad(function() {\n");
      out.write("                var dia = dijit.byId(\"messageDialog\");\n");
      out.write("                if(dia){\n");
      out.write("                    dia.destroyRecursive();\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                dia = new dijit.Dialog({\n");
      out.write("                    id\t\t\t:\t\"messageDialog\",\n");
      out.write("                    title\t\t: \t\"");
      out.print(dialogMessage.getTitle());
      out.write("\",\n");
      out.write("                    style\t\t:\t\"display:none;width:630px;height:auto;vertical-align: middle; \",\n");
      out.write("\t\t\t\t\tdraggable\t:\ttrue\n");
      out.write("                });\n");
      out.write("                var contentPane = new dojox.layout.ContentPane({\n");
      out.write("                    id \t\t\t: \"messageDialogContentPane\"\n");
      out.write("                }).placeAt(\"messageDialog\");\n");
      out.write("\n");
      out.write("                dojo.place(\"<span style='color: red; font-weight: bold'>");
      out.print( dialogMessage.getError() );
      out.write("</span>\", \"messageDialogContentPane\", \"last\");\n");
      out.write("\n");
      out.write("                ");

                String messageHTML = "";
                for (Entry<String, List<String>> entry : dialogMessage.getMessages().entrySet()) {
					messageHTML += "<table class='listingTable' style='margin-bottom: 0px'><thead><tr><th>"+ entry.getKey() +"</th></tr></thead><tbody>";
					for (String item : entry.getValue()) {
						messageHTML += "<tr><td>" + item + "</td></tr>";
					}
					messageHTML += "</tbody></table>";
                }
      out.write("\n");
      out.write("\n");
      out.write("                dojo.place(\"<div style='overflow: auto;height:auto; margin-top: 10px; margin-bottom: 20px'>");
      out.print( messageHTML );
      out.write("</div>\", \"messageDialogContentPane\", \"last\");\n");
      out.write("\t\t\t\t\n");
      out.write("                dojo.place(\"<span style='margin-bottom: 10px; color: #888888;font-size: smaller'>");
      out.print( dialogMessage.getFooter() );
      out.write("</span>\", \"messageDialogContentPane\", \"last\");\n");
      out.write("\n");
      out.write("\t\t\t\tdia.show();\n");
      out.write("    \t\t}) ;\n");
      out.write("    \t");
}
      out.write("\n");
      out.write("</script>");
      out.write("\n");
      out.write("        \t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response,  Constants.TEXT_HTML_DIR + tilesContent , out, false);
      out.write("\n");
      out.write("        ");
} 
      out.write("\n");
      out.write("        ");
      out.write("<iframe name=\"hidden_iframe\" id=\"hidden_iframe\" style=\"position:absolute;top:-100px;width:0px; height:0px; border: 0px;\"></iframe>\r\n");
      out.write("<script>\r\n");
      out.write("\tfunction setKeepAlive(){\r\n");
      out.write("\t\tvar myId=document.getElementById(\"hidden_iframe\");\r\n");
      out.write("\t\tmyId.src =\"/html/common/keep_alive.jsp?r=");
      out.print(System.currentTimeMillis());
      out.write("\";\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction killSession(){\r\n");
      out.write("\t\twindow.location = \"/c/portal/logout?referer=/c\";\r\n");
      out.write("\t}\r\n");
      out.write("\t");
 if(Config.getStringProperty("KEEP_SESSION_ALIVE").equalsIgnoreCase("true")) {
      out.write("\r\n");
      out.write("\t\t// 15 minutes\r\n");
      out.write("\t\tsetTimeout(\"setKeepAlive()\", 60000 * 15);\r\n");
      out.write("\t");
}else{
      out.write("\r\n");
      out.write("\t\t// 30 minutes\r\n");
      out.write("\t\tsetTimeout(\"killSession()\", 60000 * 30);\r\n");
      out.write("\t");
} 
      out.write("\r\n");
      out.write("\n");
      out.write("\t\tfunction dotMakeBodVisible(){\r\n");
      out.write("\r\n");
      out.write("\t\t\tif(!window.frameElement){\r\n");
      out.write("\t\t\t\tconsole.log(\"bottom_inc.jsp frame busting\");\r\n");
      out.write("\t\t\t\twindow.top.location=\"/dotAdmin/\";\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(dojo.style(dojo.body(), \"visibility\") != \"visible\"){\r\n");
      out.write("\t\t\t\tsetTimeout( \"dotMakeBodVisible()\",3000);\n");
      out.write("\t\t\t\tdojo.style(dojo.body(), \"visibility\", \"visible\");\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\t\t\r\n");
      out.write("\t\tdojo.addOnLoad(dotMakeBodVisible);\n");
      out.write("\t\t\n");
      out.write("\n");
      out.write("\t</script>\r\n");
      out.write("\t\r\n");
      out.write("\t");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
if((DbConnectionFactory.isOracle() ||  DbConnectionFactory.isMsSql()) 
		&& LicenseLevel.COMMUNITY.level==LicenseUtil.getLevel()
		&& session.getAttribute("db-community-edition-warning") ==null){ 
      out.write('\n');
      out.write('	');
      out.write('	');
session.setAttribute("db-community-edition-warning", "1");  
      out.write("\n");
      out.write("\t<script>\n");
      out.write("\t\tfunction closeCotDbWarningDialog(){\n");
      out.write("\t\t\tdijit.byId('dotDbWarningDialog').hide();\n");
      out.write("\t\t\t");
if(request.getAttribute("licenseManagerPortletUrl") != null){ 
      out.write("\n");
      out.write("\t\t\t\twindow.location='");
      out.print(request.getAttribute("licenseManagerPortletUrl") );
      out.write("';\n");
      out.write("\t\t\t");
}
      out.write("\n");
      out.write("\t\t}\n");
      out.write("\t</script>\n");
      out.write("\t\t\n");
      out.write("\t\t\n");
      out.write("\t<div id=\"dotDbWarningDialog\" dojoType=\"dijit.Dialog\" style=\"display:none\" title=\"");
      out.print( LanguageUtil.get(pageContext, "db-community-edition-warning-title") );
      out.write("\">\n");
      out.write("\t\t<div dojoType=\"dijit.layout.ContentPane\" style=\"width:400px;height:150px;\" class=\"box\" hasShadow=\"true\" id=\"dotDbWarningDialogCP\">\n");
      out.write("\t\t\t");
      out.print( LanguageUtil.get(pageContext, "db-community-edition-warning-text") );
      out.write("\n");
      out.write("\t\t\t<br>&nbsp;<br>\n");
      out.write("\t\t\t<div class=\"buttonRow\">\n");
      out.write("\t\t\t\t<button dojoType=\"dijit.form.Button\" onClick=\"closeCotDbWarningDialog()\" iconClass=\"cancelIcon\">");
      out.print( LanguageUtil.get(pageContext, "close") );
      out.write("</button>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\t<script>\n");
      out.write("\t\tdojo.addOnLoad (function(){\n");
      out.write("\t\t\tdojo.style(dijit.byId(\"dotDbWarningDialog\").closeButtonNode, \"visibility\", \"hidden\"); \n");
      out.write("\t\t\tdijit.byId(\"dotDbWarningDialog\").show();\n");
      out.write("\t\t});\n");
      out.write("\t</script>\n");
      out.write("\t\n");
} 
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write('\n');
} 
      out.write('\n');
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
